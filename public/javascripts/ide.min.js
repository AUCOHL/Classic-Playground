"use strict";function MNLevelSettings(){this.parentAttachmentPosition=$.fn.mnmenu.defaults.defaultParentAttachmentPosition,this.attachmentPosition=$.fn.mnmenu.defaults.defaultAttachmentPosition,this.arrowCharacter=$.fn.mnmenu.defaults.arrowCharacter}(function(){var e,t=this,i="addEventListener",n="removeEventListener",r="getBoundingClientRect",s=t.attachEvent&&!t[i],a=t.document,o=function(){for(var e,t=["","-webkit-","-moz-","-o-"],i=0;i<t.length;i++)if(e=a.createElement("div"),e.style.cssText="width:"+t[i]+"calc(9px)",e.style.length)return t[i]+"calc"}(),l=function(e){return"string"==typeof e||e instanceof String?a.querySelector(e):e},d=function(d,c){var h,u,f,g,_,p,m,v,y=[];c="undefined"!=typeof c?c:{},"undefined"==typeof c.gutterSize&&(c.gutterSize=10),"undefined"==typeof c.minSize&&(c.minSize=100),"undefined"==typeof c.snapOffset&&(c.snapOffset=30),"undefined"==typeof c.direction&&(c.direction="horizontal"),"undefined"==typeof c.draggable&&(c.draggable=!0),"function"==typeof c.onDrag&&(e=c.onDrag),"horizontal"==c.direction?(h="width",f="clientWidth",g="clientX",_="left",p="gutter gutter-horizontal",m="paddingLeft",v="paddingRight",c.cursor||(c.cursor="ew-resize")):"vertical"==c.direction&&(h="height",f="clientHeight",g="clientY",_="top",p="gutter gutter-vertical",m="paddingTop",v="paddingBottom",c.cursor||(c.cursor="ns-resize"));var x=function(e){if(c.draggable){var n=this,r=n.a,s=n.b;!n.dragging&&c.onDragStart&&c.onDragStart(),e.preventDefault(),n.dragging=!0,n.move=w.bind(n),n.stop=b.bind(n),t[i]("mouseup",n.stop),t[i]("touchend",n.stop),t[i]("touchcancel",n.stop),n.parent[i]("mousemove",n.move),n.parent[i]("touchmove",n.move),r[i]("selectstart",$),r[i]("dragstart",$),s[i]("selectstart",$),s[i]("dragstart",$),r.style.userSelect="none",r.style.webkitUserSelect="none",r.style.MozUserSelect="none",r.style.pointerEvents="none",s.style.userSelect="none",s.style.webkitUserSelect="none",s.style.MozUserSelect="none",s.style.pointerEvents="none",n.gutter.style.cursor=c.cursor,n.parent.style.cursor=c.cursor,j.call(n)}},b=function(){var i=this,r=i.a,s=i.b;i.dragging&&c.onDragEnd&&c.onDragEnd(),i.dragging=!1,t[n]("mouseup",i.stop),t[n]("touchend",i.stop),t[n]("touchcancel",i.stop),i.parent[n]("mousemove",i.move),i.parent[n]("touchmove",i.move),delete i.stop,delete i.move,r[n]("selectstart",$),r[n]("dragstart",$),s[n]("selectstart",$),s[n]("dragstart",$),r.style.userSelect="",r.style.webkitUserSelect="",r.style.MozUserSelect="",r.style.pointerEvents="",s.style.userSelect="",s.style.webkitUserSelect="",s.style.MozUserSelect="",s.style.pointerEvents="",i.gutter.style.cursor="",i.parent.style.cursor="","function"==typeof e&&e({})},w=function(e){var t;this.dragging&&(t="touches"in e?e.touches[0][g]-this.start:e[g]-this.start,t<=this.aMin+c.snapOffset?t=this.aMin:t>=this.size-this.bMin-c.snapOffset&&(t=this.size-this.bMin),k.call(this,t),c.onDrag&&c.onDrag())},j=function(){var e=t.getComputedStyle(this.parent),i=this.parent[f]-parseFloat(e[m])-parseFloat(e[v]);this.size=this.a[r]()[h]+this.b[r]()[h]+this.aGutterSize+this.bGutterSize,this.percentage=Math.min(this.size/i*100,100),this.start=this.a[r]()[_]},k=function(e){this.a.style[h]=o+"("+e/this.size*this.percentage+"% - "+this.aGutterSize+"px)",this.b.style[h]=o+"("+(this.percentage-e/this.size*this.percentage)+"% - "+this.bGutterSize+"px)"},S=function(){var e=this,t=e.a,i=e.b;t[r]()[h]<e.aMin?(t.style[h]=e.aMin-e.aGutterSize+"px",i.style[h]=e.size-e.aMin-e.aGutterSize+"px"):i[r]()[h]<e.bMin&&(t.style[h]=e.size-e.bMin-e.bGutterSize+"px",i.style[h]=e.bMin-e.bGutterSize+"px")},C=function(){var e=this,t=e.a,i=e.b;i[r]()[h]<e.bMin?(t.style[h]=e.size-e.bMin-e.bGutterSize+"px",i.style[h]=e.bMin-e.bGutterSize+"px"):t[r]()[h]<e.aMin&&(t.style[h]=e.aMin-e.aGutterSize+"px",i.style[h]=e.size-e.aMin-e.aGutterSize+"px")},T=function(e){for(var t=0;t<e.length;t++)j.call(e[t]),S.call(e[t]);for(t=e.length-1;t>=0;t--)j.call(e[t]),C.call(e[t])},$=function(){return!1},I=l(d[0]).parentNode;if(!c.sizes){var E=100/d.length;for(c.sizes=[],u=0;u<d.length;u++)c.sizes.push(E)}if(!Array.isArray(c.minSize)){var N=[];for(u=0;u<d.length;u++)N.push(c.minSize);c.minSize=N}for(u=0;u<d.length;u++){var O,A,D=l(d[u]),L=1==u,P=u==d.length-1,M=c.gutterSize;if(u>0&&(A={a:l(d[u-1]),b:D,aMin:c.minSize[u-1],bMin:c.minSize[u],dragging:!1,parent:I,isFirst:L,isLast:P,direction:c.direction},A.aGutterSize=c.gutterSize,A.bGutterSize=c.gutterSize,L&&(A.aGutterSize=c.gutterSize/2),P&&(A.bGutterSize=c.gutterSize/2)),s)O="string"==typeof c.sizes[u]||c.sizes[u]instanceof String?c.sizes[u]:c.sizes[u]+"%";else{if(u>0){var z=a.createElement("div");z.className=p,z.style[h]=c.gutterSize+"px",z[i]("mousedown",x.bind(A)),z[i]("touchstart",x.bind(A)),I.insertBefore(z,D),A.gutter=z}0!==u&&u!=d.length-1||(M=c.gutterSize/2),O="string"==typeof c.sizes[u]||c.sizes[u]instanceof String?c.sizes[u]:o+"("+c.sizes[u]+"% - "+M+"px)"}D.style[h]=O,u>0&&y.push(A)}T(y)};"undefined"!=typeof exports?("undefined"!=typeof module&&module.exports&&(exports=module.exports=d),exports.Split=d):t.Split=d}).call(window);var Waveform,indexOf=[].indexOf||function(e){for(var t=0,i=this.length;t<i;t++)if(t in this&&this[t]===e)return t;return-1};Waveform=function(){function e(e,i,n){var r,s,d,c,h,u,f,g,_,p,v,y,x,b,w,j,k,S,C,T,I,E,N,O,A,D,L,P,M,z,F,R,B,V,U,H,G,q,K,W,X,Y,J;if(this._containerId=e,this._data=i,this._initDiagram=n,this._container=$("#"+this._containerId),!this._container.length)return null;if(null==this._data.signal)return null;if(this._data.signal.sort(function(e,t){return e.name<t.name?-1:e.name>t.name?1:0}),console.log(this._data),"string"==typeof this._initDiagram)try{this._initDiagram=JSON.parse(this._initDiagram)}catch(e){d=e,this._initDiagram=null}if(null!=this._initDiagram){for(Y=[],L=this._data.signal,h=0,_=L.length;h<_;h++)q=L[h],Y.push(q.name);for(g=[],P=this._initDiagram.rendered,u=0,p=P.length;u<p;u++)q=P[u],g.push(q);for(M=this._initDiagram.hidden,f=0,y=M.length;f<y;f++)q=M[f],g.push(q);for(I=0,x=g.length;I<x;I++)if(q=g[I],indexOf.call(Y,q)<0){console.error("Supplied layout is not compatible with the simulation."),this._initDiagram=null;break}}if(this.timeScale=this._data.scale.match(/(\d+)/),this.timeScaleUnit=this._data.scale.match(/(\D+)/),null==this.timeScale||!this.timeScaleUnit)return null;for(this.timeScale=this.timeScale[0],this.timeScaleUnit=this.timeScaleUnit[0],this.timeUnit=parseInt(this.timeScale),"ns"===this.timeScaleUnit&&(this.timeUnit*=1e3),this.radix=a,this.originalEndTime=this._data.endtime,this.endTime=this.ceilFive(this.originalEndTime),this.renderFrom=0,this.originalEndTime>100?this.renderTo=this.floorInt(this.endTime,100):this.renderTo=this.roundInt(this.endTime/2,10),this.signals=this._data.signal,this._onChangeListener=void 0,this._onSaveListener=void 0,null!=this._initDiagram&&(null!=this._initDiagram.from&&(this.renderFrom=this._initDiagram.from),null!=this._initDiagram.to&&(this.renderTo=this._initDiagram.to),null!=this._initDiagram.end&&(this.endTime=this._initDiagram.end),null!=this._initDiagram.originalEnd&&(this.originalEndTime=this._initDiagram.originalEnd),null!=this._initDiagram.timeScale&&(this.timeScale=this._initDiagram.timeScale),null!=this._initDiagram.timeScaleUnit&&(this.timeScale=this._initDiagram.timeScaleUnit),null!=this._initDiagram.timeUnit&&(this.timeUnit=this._initDiagram.timeUnit),null!=this._initDiagram.cursor&&null!=this._initDiagram.cursorExact&&(this.currentTime=this._initDiagram.cursor,this.currentExactTime=this._initDiagram.cursorExact)),z=this.signals,E=0,b=z.length;E<b;E++)q=z[E],q.originalName=q.name;if(null==this._initDiagram||null==this._initDiagram.from||null==this._initDiagram.to)for(this.renderedSignals=[],this.removedSignals=[],this.includedSignals=[],this.excludedSignals=[],F=this.signals,N=0,w=F.length;N<w;N++)q=F[N],"string"!=typeof q.name&&""!==q.name.trim()||(T=q.name.split("."),s=T.length,K=q.name,s>1&&T.splice(0,1),q.name=T.join("."),r=this.isBus(q.name),2===s?indexOf.call(this.includedSignals,K)<0&&(this.renderedSignals.push({id:K,signal:q,text:null,ypos:null,currentValue:"0",type:r?t:m,width:r?Math.abs(r.start-r.end)+1:1}),this.includedSignals.push(K)):s>2&&indexOf.call(this.excludedSignals,K)<0&&(this.removedSignals.push({id:K,signal:q,text:null,ypos:null,currentValue:"0",type:r?t:m,width:r?Math.abs(r.start-r.end)+1:1}),this.excludedSignals.push(K)));else{for(X={},this.renderedSignals=[],this.removedSignals=[],this.includedSignals=[],this.excludedSignals=[],R=this._initDiagram.rendered,O=0,j=R.length;O<j;O++)c=R[O],indexOf.call(this.includedSignals,c)<0&&this.includedSignals.push(c);for(B=this._initDiagram.hidden,A=0,k=B.length;A<k;A++)c=B[A],indexOf.call(this.excludedSignals,c)<0&&this.excludedSignals.push(c);for(this._initDiagram.rendered=function(){var e,t,i,n;for(i=this.includedSignals,n=[],t=0,e=i.length;t<e;t++)c=i[t],n.push(c);return n}.call(this),this._initDiagram.hidden=function(){var e,t,i,n;for(i=this.excludedSignals,n=[],t=0,e=i.length;t<e;t++)c=i[t],n.push(c);return n}.call(this),V=this.signals,D=0,S=V.length;D<S;D++)q=V[D],"string"!=typeof q.name&&""!==q.name.trim()||(T=q.name.split("."),s=T.length,K=q.name,s>1&&T.splice(0,1),q.name=T.join("."),r=this.isBus(q.name),X[K]={id:K,signal:q,text:null,ypos:null,currentValue:"0",type:r?t:m,width:r?Math.abs(r.start-r.end)+1:1});for(U=this._initDiagram.rendered,G=0,C=U.length;G<C;G++)W=U[G],this.renderedSignals.push(X[W]);for(H=this._initDiagram.hidden,J=0,v=H.length;J<v;J++)W=H[J],this.removedSignals.push(X[W]);"number"==typeof this._initDiagram.highlightedIndex&&this._initDiagram.highlightedIndex<this.renderedSignals.length&&(this.highlightedIndex=this._initDiagram.highlightedIndex)}this._initLayout(),this._initCanvas(),this.redraw(),null!=this._initDiagram&&null!=this._initDiagram.cursor&&null!=this._initDiagram.cursorExact&&this.setCursorTime(this.currentExactTime),null!=this._initDiagram&&null!=this._initDiagram.radix&&(this._initDiagram.radix===a?($("#"+this._radixSelectId).val(""+this._radixSelectBinId).selectmenu("refresh"),this.radix=a,this.setRadix(a)):this._initDiagram.radix===l?($("#"+this._radixSelectId).val(""+this._radixSelectHexId).selectmenu("refresh"),this.radix=l,this.setRadix(l)):this._initDiagram.radix===o&&($("#"+this._radixSelectId).val(""+this._radixSelectDecId).selectmenu("refresh"),this.radix=o,this.setRadix(o)),this.redraw())}var t,i,n,r,s,a,o,l,d,c,h,u,f,g,_,p,m;return d=14,s=11,_=280,p=150,c=20,u=160,h=8,g=20,f=3,m=0,t=1,a=0,o=1,l=2,i=3e3,n={CANVAS_BACKGROUND:"black",CURSOR:"rgb(64, 186, 255)",GRID_TEXT:"gray",SIGNAL:"rgb(8, 255, 40)",SIGNAL_NAME_RECT:"gray",SIGNAL_HIGHLIGHT:"rgb(97, 255, 0)",SIGNAL_DC:"red",SIGNAL_IMPED:"blue",SIGNAL_DRAGGED:"rgb(197, 255, 145)",GRID_LINE:"gray",SIGNAL_NAME:"white",SIGNAL_VALUE:"white",SIGNAL_CURRENT_VALUE:"white",CURRENT_VALUE_LINE:"white"},r={CURSOR:1,SIGNAL_NAME_RECT:.2,SIGNAL_HIGHLIGHT:.3,SIGNAL_DRAGGED:.3},e.prototype.setOnChangeListener=function(e){if("function"==typeof e)return this._onChangeListener=e},e.prototype.setOnSaveListener=function(e){if("function"==typeof e)return this._onSaveListener=e},e.prototype.exportTimingDiagram=function(){var e,t,i,n;return i=function(){var e,t,i,r;for(i=this.renderedSignals,r=[],e=0,t=i.length;e<t;e++)n=i[e],r.push(n.id);return r}.call(this),t=function(){var e,t,i,r;for(i=this.removedSignals,r=[],e=0,t=i.length;e<t;e++)n=i[e],r.push(n.id);return r}.call(this),e={rendered:i,hidden:t,from:this.renderFrom,to:this.renderTo,cursor:this.currentTime,cursorExact:this.currentExactTime,end:this.endTime,originalEnd:this.originalEndTime,radix:this.radix,timeScale:this.timeScale,timeScaleUnit:this.timeScaleUnit,timeUnit:this.timeUnit,highlightedIndex:this.highlightedIndex},JSON.stringify(e)},e.prototype.resetTimingDiagram=function(){var e,i,n,r,s,o,l,d,c,h,u;if(this.timeScale=this._data.scale.match(/(\d+)/),this.timeScaleUnit=this._data.scale.match(/(\D+)/),null==this.timeScale||!this.timeScaleUnit)return null;for(this.timeScale=this.timeScale[0],this.timeScaleUnit=this.timeScaleUnit[0],this.timeUnit=parseInt(this.timeScale),"ns"===this.timeScaleUnit&&(this.timeUnit*=1e3),this.radix=a,this.originalEndTime=this._data.endtime,this.endTime=this.ceilFive(this.originalEndTime),this.renderFrom=0,this.originalEndTime>100?this.renderTo=this.floorInt(this.endTime,100):this.renderTo=this.roundInt(this.endTime/2,10),d=this.signals,n=0,s=d.length;n<s;n++)h=d[n],h.name=h.originalName;for(this._data.signal.sort(function(e,t){return e.name<t.name?-1:e.name>t.name?1:0}),this.signals=this._data.signal,this.renderedSignals=[],this.removedSignals=[],this.includedSignals=[],this.excludedSignals=[],c=this.signals,r=0,o=c.length;r<o;r++)h=c[r],"string"!=typeof h.name&&""!==h.name.trim()||(l=h.name.split("."),i=l.length,u=h.name,i>1&&l.splice(0,1),h.name=l.join("."),e=this.isBus(h.name),2===i?indexOf.call(this.includedSignals,u)<0&&(this.renderedSignals.push({id:u,signal:h,text:null,ypos:null,currentValue:"0",type:e?t:m,width:e?Math.abs(e.start-e.end)+1:1}),this.includedSignals.push(u)):i>2&&indexOf.call(this.excludedSignals,u)<0&&(this.removedSignals.push({id:u,signal:h,text:null,ypos:null,currentValue:"0",type:e?t:m,width:e?Math.abs(e.start-e.end)+1:1}),this.excludedSignals.push(u)));return this.currentTime=void 0,this.currentExactTime=void 0,this.highlightedIndex=void 0,this.redraw(),this._cursor&&(this._cursor.setVisible(!1),this._cursor.time=void 0,this.refreshCurrentValues(),this._cursorValueDiv.text("")),$("#"+this._radixSelectId).val(""+this._radixSelectBinId).selectmenu("refresh"),this.setRadix(a),this._onChangeListener?this._onChangeListener({type:"reset"}):void 0},e.prototype.redraw=function(){return this.renderTo>this.endTime&&(this.renderTo=this.endTime),this.clearCanvas(),this.drawGrid(this.renderFrom,this.renderTo),this.drawSignals(this.renderFrom,this.renderTo),this._cursor&&this._canvas.add(this._cursor),this.highlighted&&(this.highlighted.fill=void 0,this.highlighted.opacity=0),this.highlightedIndex&&(this.highlighted=this.renderedSignals[this.highlightedIndex].highlight,this.highlighted.fill=n.SIGNAL_HIGHLIGHT,this.highlighted.opacity=r.SIGNAL_HIGHLIGHT),this.setCursorTime(this.currentExactTime)},e.prototype.setCursorTime=function(e){var t,i,s;if(null!=e)return s=e.toFixed(2),i=this._timeToPos(e,null,!1),this.currentTime=s,this.currentExactTime=e,null!=this._cursor?(this._cursor.x1=i,this._cursor.x2=i,this._cursor.setLeft(i),this._cursor.setTop(0),this._cursor.setHeight(this.canvasHeight),this._cursor.width=1):(this._cursor=new fabric.Line([i,0,i,this.canvasHeight],{fill:n.CURSOR,stroke:n.CURSOR,strokeWidth:1,opacity:r.CURSOR,selectable:!1,hasControls:!1,hasRotatingPoint:!1,width:1}),this._cursorValueDiv.show()),s<this.renderFrom||s>this.renderTo?this._cursor.setVisible(!1):this._cursor.setVisible(!0),this._canvas.contains(this._cursor)||this._canvas.add(this._cursor),this._cursor.time=this.currentTime,this.refreshCurrentValues(),t="Time: "+this.currentTime+this.timeScaleUnit,this.highlighted&&(t=t+", Value: "+this._getFormattedValue(this.highlighted.signal.currentValue,this.highlighted.signal.width)),this._cursorValueDiv.text(t),this._onChangeListener&&this._onChangeListener({type:"cursor"}),this._canvas.renderAll()},e.prototype.drawGrid=function(e,t){var i,a,o,l,c,h,u,f,g,p,m,v,y,x;for(null==e&&(e=this.renderFrom),null==t&&(t=this.renderTo),this._signalsNamesRect=new fabric.Rect({width:_,height:this._canvas.height,fill:n.SIGNAL_NAME_RECT,opacity:r.SIGNAL_NAME_RECT}),this._renderDist=Math.abs(this.renderTo-this.renderFrom),p=Math.floor(this._renderDist/(s-1)),a=this.renderFrom+p;a<=this.renderTo;)a+=p;for(i=a-p,a=this.renderFrom+p,this._renderDistanceFactor=(this._canvas.width-_)/this._renderDist,this._gridLines=[],this._gridTexts=[];a<=i;)g=this._timeToPos(a),f=[g,d,g,this._canvas.height],this._gridLines.push(this._getGridLine(f)),this._gridTexts.push(new fabric.Text(a+this.timeScaleUnit,{fontFamily:"monospace",left:g-10,top:0,fontSize:11,selectable:!1,hasControls:!1,hasRotatingPoint:!1,fill:n.GRID_TEXT})),a+=p;for(m=this._gridLines,o=0,c=m.length;o<c;o++)u=m[o],this._canvas.add(u);for(v=this._gridTexts,y=[],l=0,h=v.length;l<h;l++)x=v[l],y.push(this._canvas.add(x));return y},e.prototype.refreshSignalValues=function(){var e,t,i,n;for(i=this._signalValueText,e=0,t=i.length;e<t;e++)n=i[e],n.textbox.setText(this._getFormattedValue(n.value,n.width));return this._canvas.renderAll()},e.prototype.drawSignals=function(e,t){var i,r,s,a,o,l,d,c,h,f,p,m,v,y,x,b,w,j,k,S,C;for(null==e&&(e=this.renderFrom),null==t&&(t=this.renderTo),this._drawSignalNames(),k=-1,this._signalValueText=[],y=this.renderedSignals,l=0,c=y.length;l<c;l++){for(b=y[l],k++,w=b.signal,v=this._getSignalValues(w.wave,e,t),j=this.isBus(w.name),o=v[0].value,f=_,p=b.ypos,"0"!==o&&"x"!==o&&"z"!==o||(p+=g),j&&(p=b.ypos+g/2),S=0,d=0,h=v.length;d<h;d++)C=v[d],C.width=b.width,S===v.length-1&&(C.last=!0),x=this._drawValue(C,f,p,o,n.SIGNAL,j!==!1),f=x[0],p=x[1],o=x[2],S++;for(a=new fabric.Rect({left:2,top:b.ypos-1,height:g+3,width:this.canvasWidth,fill:void 0,opacity:0,selectable:!1,hasControls:!1,hasRotatingPoint:!1}),a.signal=b,b.highlight=a,b.currentValue=v[0].value,r=this._getFormattedValue(v[0].value,v[0].width),this._signalCurrentValues[k].setText(r),s=this._signalCurrentValues[k].width,i=Math.abs(_-u-10),m=s>i;s>i;)r=r.substr(0,r.length-1),this._signalCurrentValues[k].setText(r),s=this._signalCurrentValues[k].width;m&&(s+=".."),this._canvas.add(this._signalCurrentValues[k]),this._canvas.add(a)}return this._canvas.bringToFront(this._currentValueLineStart),this._canvas.bringToFront(this._currentValueLineEnd),this._canvas.renderAll()},e.prototype.refreshCurrentValues=function(){var e,t,i,n,r,s,a,o,l,d,c,h,f,g,p;for(f=0,d=this.renderedSignals,r=0,a=d.length;r<a;r++){for(c=d[r],h=c.signal,p=h.wave,n=0,s=0,o=p.length;s<o;s++){if(g=p[s],this.currentTime>=Number.parseInt(g[0])&&(n===p.length-1||this.currentTime<=Number.parseInt(p[n+1]))){c.currentValue=g[1];break}n++}for(t=this._getFormattedValue(c.currentValue,c.width),this._signalCurrentValues[f].setText(t),i=this._signalCurrentValues[f].width,e=Math.abs(_-u-14),l=i>e;i>e;)t=t.substr(0,t.length-1),this._signalCurrentValues[f].setText(t),i=this._signalCurrentValues[f].width;l&&(i+=".."),f++}return this._canvas.renderAll()},e.prototype.addSignal=function(){var e,t,i,n,r,s,a,o,l;for(s="",i=0,this.removedSignals.sort(function(e,t){return e.signal.name<t.signal.name?-1:e.signal.name>t.signal.name?1:0}),a=this.removedSignals,n=0,r=a.length;n<r;n++)o=a[n],s=s+'<li class="ui-widget-content" value="'+i+'">'+o.signal.name+"</li>\n",i++;return l=this._containerId+"-waveform-add-signal-select",t="Add Signals",e='<ol id="'+l+'" class="ui-widget ui-corner-all waveform-add-signal-select" multiple>\n'+s+"</select>",$("#"+this._modalDialogId).html(e),$("#"+l).selectable(),$("#"+this._modalDialogId).dialog({resizable:!1,modal:!0,title:t,height:400,width:300,buttons:{Add:function(e){return function(){var t,i,n,r,s,a,o,d,c,h,u;for(d=$("#"+l+" .ui-selected"),o=[],i=0,r=d.length;i<r;i++)c=d[i],h=$(c).val(),u=e.removedSignals[h].signal.name,indexOf.call(e.includedSignals,u)<0&&(e.renderedSignals.push(e.removedSignals[h]),o.push(h),e.excludedSignals.splice(e.excludedSignals.indexOf(u,1)),e.includedSignals.push(u));for(o.sort(),a=0,n=0,s=o.length;n<s;n++)t=o[n],e.removedSignals.splice(t-a,1),a++;if($("#"+e._modalDialogId).dialog("close"),$('[aria-describedby="'+e._modalDialogId+'"]').remove(),o.length&&e.redraw(),$("#"+e._modalDialogId).empty(),e._onChangeListener)return e._onChangeListener({type:"add"})}}(this),Cancel:function(){return $(this).dialog("close"),$('[aria-describedby="'+this._modalDialogId+'"]').remove()}},close:function(e){return function(){return $("#"+e._modalDialogId).empty(),$('[aria-describedby="'+e._modalDialogId+'"]').remove()}}(this)})},e.prototype.removeSignal=function(){var e,t,i,n,r;if(this.highlighted)return n=this.renderedSignals.indexOf(this.highlighted.signal),i=this.highlighted.signal.signal,r=i.name,t="Remove Signal "+r+"?",e='<p><span class="ui-icon ui-icon-alert" style="float:left; margin:0 7px 20px 0;"></span>Do you want to remove the selected signal?</p>',$("#"+this._modalDialogId).html(e),$("#"+this._modalDialogId).dialog({resizable:!1,modal:!0,title:t,height:150,width:320,buttons:{Remove:function(e){return function(){if(e.highlighted&&(e.highlighted.fill=void 0,e.highlighted.opacity=0),e.highlighted=void 0,e.highlightedIndex=void 0,indexOf.call(e.excludedSignals,n)<0&&(e.removedSignals.push(e.renderedSignals[n]),e.renderedSignals.splice(n,1),e.excludedSignals.push(n),e.includedSignals.splice(e.includedSignals.indexOf(n,1)),e.redraw()),$("#"+e._modalDialogId).dialog("close"),$('[aria-describedby="'+e._modalDialogId+'"]').remove(),e._onChangeListener)return e._onChangeListener({type:"remove"})}}(this),Cancel:function(){return $(this).dialog("close"),$('[aria-describedby="'+this._modalDialogId+'"]').remove()}},close:function(e){return function(){return $("#"+e._modalDialogId).html("")}}(this)})},e.prototype.moveFirst=function(){if(0!==this.renderFrom)return this.renderFrom=0,this.renderTo=this.renderFrom+this._renderDist,this.renderTo>this.endTime&&(this.renderTo=this.endTime),this.redraw(),this.setCursorTime(this.currentExactTime)},e.prototype.moveLeft=function(){var e,t,i;if(0!==this.renderFrom)return e=Math.floor(this._renderDist/8),t=this.renderFrom-e,t<0&&(t=0),i=t+this._renderDist,i>this.endTime&&(i=this.endTime),this.renderFrom=t,this.renderTo=i,this.redraw(),this.setCursorTime(this.currentExactTime)},e.prototype.moveRight=function(){var e,t,i;if(this.renderTo!==this.endTime)return e=Math.floor(this._renderDist/8),i=this.renderTo+e,i>this.endTime&&(i=this.endTime),t=i-this._renderDist,t<0&&(t=0),this.renderFrom=t,this.renderTo=i,this.redraw(),this.setCursorTime(this.currentExactTime)},e.prototype.zoomIn=function(){var e,t,i,n,r;if(t=Math.floor(this._renderDist/4),n=this.renderFrom+t,r=this.renderTo-t,null!=this._cursor&&(e=Math.round(this._cursor.time),e-t<this.renderFrom?(n=this.renderFrom,r=this.renderTo-2*t):e+t>this.renderTo?(n=this.renderFrom+2*t,r=this.renderTo):(n=e-t,r=e+t)),!(n>r||r<0||n>=r||(i=r-n,this.scaleFactor=i/this.originalEndTime,this.scaleFactor<.02)))return t?(this.renderFrom=n,this.renderTo=r,this.redraw(),this.setCursorTime(this.currentExactTime)):void 0},e.prototype.zoomOut=function(){var e,t,i,n,r;return r=2*this._renderDist,i=void 0,n=void 0,r>this.originalEndTime?(i=0,n=this.endTime):(e=Math.floor(this._renderDist/2),i=this.renderFrom-e,n=this.renderTo+e,n>this.endTime&&(n=this.endTime,i=n-r),i<0&&(i=0)),t=n-i,this.scaleFactor=t/this.originalEndTime,this.renderFrom=i,this.renderTo=n,this.redraw(),this.setCursorTime(this.currentExactTime)},e.prototype.zoomAll=function(){if(0!==this.renderFrom||this.renderTo!==this.endTime)return this.renderFrom=0,this.renderTo=this.endTime,this.redraw(),this.setCursorTime(this.currentExactTime)},e.prototype.setRadix=function(e){var t;if(e===a||e===o||e===l)return t=this.radix!==e,this.radix=e,this.refreshCurrentValues(),this.refreshSignalValues(),t?this.redraw():void 0},e.prototype.isBus=function(e){var t;return t=/[\s\S]+\[(\d+)\:(\d+)\]\s*/.exec(e),null!=t&&{start:t[1],end:t[2]}},e.prototype.clearCanvas=function(){return this._canvas.clear()},e.prototype.binToDec=function(e){return Number.parseInt(e,2).toString(10)},e.prototype.binToHex=function(e){return Number.parseInt(e,2).toString(16).toUpperCase()},e.prototype.pad=function(e,t,i){return null==i&&(i="0"),e+="",e.length>=t?e:new Array(t-e.length+1).join(i)+e},e.prototype.pointDist=function(e,t,i,n){return Math.sqrt(Math.pow(i-e,2)+Math.pow(n-t,2))},e.prototype.getRandomColor=function(){var e,t,i,n;for(n="0123456789ABCDEF".split(""),e="#",t=i=0;i<6;t=++i)e+=n[Math.floor(16*Math.random())];return e},e.prototype.ceilInt=function(e,t){for(e=Math.round(e);e%t;)e++;return e},e.prototype.floorInt=function(e,t){for(e=Math.round(e);e%t;)e--;return e},e.prototype.roundInt=function(e,t){var i,n;if(e=Math.round(e),!(e%t))return e;for(i=e,n=e;i%t&&n%t;)i++,n--;return i%t?n:i},e.prototype.ceilFive=function(e){return this.ceilInt(e,5)},e.prototype.floorFive=function(e){return this.floorInt(e,5)},e.prototype.roundFive=function(e){return this.roundInt(e,5)},e.prototype._initCanvas=function(){return this._canvas=new fabric.Canvas(this._canvasId,{width:this.canvasWidth,height:this.canvasHeight,backgroundColor:n.CANVAS_BACKGROUND,renderOnAddRemove:!1,selection:!1,stateful:!1}),this._context=this._canvas.getContext("2d"),this._isDragging=!1,this._draggedSignal=void 0,this._draggedOriginalX=void 0,this._draggedOriginalY=void 0,this._draggedMouseX=void 0,this._draggedMouseY=void 0,this._dragRectangle=void 0,this._dragRectangleOriginalHeight=void 0,this._canvas.on("mouse:down",function(e){return function(t){var i;if(t.target)return i=e._canvas.getPointer(t.e),t.target.signal?(e.highlighted&&(e.highlighted.fill=void 0,e.highlighted.opacity=0),e.highlighted=t.target,e.highlightedIndex=e.renderedSignals.indexOf(t.target.signal),t.target.fill=n.SIGNAL_HIGHLIGHT,t.target.opacity=r.SIGNAL_HIGHLIGHT):(e.highlighted&&(e.highlighted.fill=void 0,e.highlighted.opacity=0),e.highlighted=void 0,e.highlightedIndex=void 0),t.target.signal&&(e._draggedSignal=t.target,e._draggedOriginalX=t.target.left,e._draggedOriginalY=t.target.top,e._draggedMouseX=i.x,e._draggedMouseY=i.y),e._isDragging=!0,e._canvas.renderAll()}}(this)),this._canvas.on("mouse:move",function(e){return function(t){var i;if(e._isDragging)return i=e._canvas.getPointer(t.e),null!=e._draggedSignal&&(e._draggedSignal.setTop(i.y-e._draggedMouseY+e._draggedOriginalY),e._draggedSignal.opacity=r.SIGNAL_DRAGGED),null!=e._dragRectangle&&t.target!==e._dragRectangle&&(e._dragRectangle.setHeight(e._dragRectangleOriginalHeight),e._dragRectangleOriginalHeight=void 0,e._dragRectangle.fill=void 0,e._dragRectangle.opacity=0,e._dragRectangle=void 0),t.target&&t.target.signal&&t.target!==e._draggedSignal&&t.target!==e._dragRectangle&&(e._dragRectangle=t.target,e._dragRectangle.fill=n.SIGNAL_DRAGGED,e._dragRectangle.opacity=r.SIGNAL_DRAGGED,e._dragRectangleOriginalHeight=e._dragRectangle.height,e._dragRectangle.setHeight(e._dragRectangle.height/2)),e._canvas.renderAll()}}(this)),this._canvas.on("mouse:up",function(e){return function(t){var i,n,r,s;return e._isDragging&&(s=t.target&&t.target.signal&&e._draggedSignal!==t.target,null!=e._draggedSignal&&null!=e._draggedOriginalX&&(s?(n=e.renderedSignals.indexOf(e._draggedSignal.signal),r=e.renderedSignals.indexOf(t.target.signal),e.renderedSignals.splice(r,0,e.renderedSignals.splice(n,1)[0]),e._draggedSignal.set({left:e._draggedOriginalX,top:e._draggedOriginalY}),null!=e._dragRectangle&&(e._dragRectangle.setHeight(e._dragRectangleOriginalHeight),e._dragRectangle.fill=void 0,e._dragRectangleOriginalHeight=void 0,e._dragRectangle.opacity=0,e._dragRectangle=void 0),e.highlightedIndex=r,e.redraw(),e._onChangeListener&&e._onChangeListener({type:"sort"})):e._draggedSignal.set({left:e._draggedOriginalX,top:e._draggedOriginalY}))),null!=e._dragRectangle&&(e._dragRectangle.setHeight(e._dragRectangleOriginalHeight),e._dragRectangleOriginalHeight=void 0,e._dragRectangle.fill=void 0,e._dragRectangle.opacity=0,e._dragRectangle=void 0),e._isDragging=!1,e._draggedSignal=void 0,e._draggedOriginalX=void 0,e._draggedOriginalY=void 0,e._draggedMouseX=void 0,e._draggedMouseY=void 0,i=e._canvas.getPointer(t.e),i.x>_&&e.setCursorTime(e._posToTime(i.x,null,!1)),e._canvas.renderAll()}}(this))},e.prototype._drawValue=function(e,t,i,r,s,a,o,l){var d,c,h,u,_,p,m,v,y,x,b,w,j,k;if(null==s&&(s=n.SIGNAL),null==a&&(a=!1),null==o&&(o=this.renderFrom),null==l&&(l=this.renderTo),j=e.value,x=this._timeToPos(e.start),c=this._timeToPos(e.end),h=e.last,a){for(m=[],u=[],_=Date.now(),m.push({x:this._timeToPos(e.start)+f,y:i+g/2}),m.push({x:this._timeToPos(e.start),y:i}),m.push({x:this._timeToPos(e.start)+f,y:i-g/2}),m.push({x:this._timeToPos(e.end)-f,y:i-g/2}),h?(m.push({x:this._timeToPos(e.end)+f+2,y:i-g/2}),m.push({x:this._timeToPos(e.end)+f+2,y:i+g/2})):m.push({x:this._timeToPos(e.end),y:i}),m.push({x:this._timeToPos(e.end)-f,y:i+g/2}),m.push({x:this._timeToPos(e.start)+f,y:i+g/2}),u=[m[m.length-1].x,m[m.length-1].y],y=this.pointDist(m[2].x,m[2].y,m[3].x,m[3].y),p=new fabric.Polyline(m,{stroke:"x"===j?n.SIGNAL_DC:"z"===j.toLowerCase()?n.SIGNAL_IMPED:s,fill:void 0,selectable:!1,hasControls:!1,hasRotatingPoint:!1}),this._canvas.add(p),d=p.getCenterPoint(),v=new fabric.Text(this._getFormattedValue(j,e.width),{fontFamily:"monospace",fontSize:11,selectable:!1,hasControls:!1,hasRotatingPoint:!1,fill:n.SIGNAL_VALUE}),b=" "+v.text,w=v.width,k=w>y;w>y;)b=b.substr(0,b.length-1),v.setText(b),v.setLeft(v.left+1),w=v.width;return k&&(b+="..",v.setText(b),v.setLeft(v.left+1)),v.set("left",d.x-v.width/2),v.set("top",d.y-v.height/2),this._signalValueText.push({textbox:v,width:e.width,value:j}),this._canvas.add(v),[this._timeToPos(e.end),i,j,p]}return m=[],u=[],p=void 0,"0"===r||"x"===r||"z"===r?"1"===j?(m.push({x:this._timeToPos(e.start),y:i}),m.push({x:this._timeToPos(e.start),y:i-g}),m.push({x:this._timeToPos(e.end),y:i-g}),u=[m[m.length-1].x,m[m.length-1].y],p=new fabric.Polyline(m,{stroke:s,fill:void 0,selectable:!1,hasControls:!1,hasRotatingPoint:!1}),this._canvas.add(p)):"0"===j?(m.push({x:this._timeToPos(e.start),y:i}),m.push({x:this._timeToPos(e.end),y:i}),u=[m[m.length-1].x,m[m.length-1].y],p=new fabric.Polyline(m,{stroke:s,fill:void 0,selectable:!1,hasControls:!1,hasRotatingPoint:!1}),this._canvas.add(p)):"x"===j?(m.push({x:this._timeToPos(e.start),y:i}),m.push({x:this._timeToPos(e.end),y:i}),u=[m[m.length-1].x,m[m.length-1].y],p=new fabric.Polyline(m,{stroke:n.SIGNAL_DC,fill:void 0,selectable:!1,hasControls:!1,hasRotatingPoint:!1}),this._canvas.add(p)):"z"===j.toLowerCase()&&(m.push({x:this._timeToPos(e.start),y:i}),m.push({x:this._timeToPos(e.end),y:i}),u=[m[m.length-1].x,m[m.length-1].y],p=new fabric.Polyline(m,{stroke:n.SIGNAL_IMPED,fill:void 0,selectable:!1,hasControls:!1,hasRotatingPoint:!1}),this._canvas.add(p)):"1"===r&&("1"===j?(m.push({x:this._timeToPos(e.start),y:i}),m.push({x:this._timeToPos(e.end),y:i}),u=[m[m.length-1].x,m[m.length-1].y],p=new fabric.Polyline(m,{stroke:s,fill:void 0,selectable:!1,hasControls:!1,hasRotatingPoint:!1}),this._canvas.add(p)):"0"===j?(m.push({x:this._timeToPos(e.start),y:i}),m.push({x:this._timeToPos(e.start),y:i+g}),m.push({x:this._timeToPos(e.end),y:i+g}),u=[m[m.length-1].x,m[m.length-1].y],p=new fabric.Polyline(m,{stroke:s,fill:void 0,selectable:!1,hasControls:!1,hasRotatingPoint:!1}),this._canvas.add(p)):"x"!==j&&"z"!==j.toLowerCase()||(m.push({x:this._timeToPos(e.start),y:i}),m.push({x:this._timeToPos(e.start),y:i+g}),m.push({x:this._timeToPos(e.end),y:i+g}),u=[m[m.length-1].x,m[m.length-1].y],p=new fabric.Polyline(m,{stroke:s,fill:void 0,selectable:!1,hasControls:!1,hasRotatingPoint:!1}),this._canvas.add(p))),[u[0],u[1],j,p]},e.prototype._getGridLine=function(e){return new fabric.Line(e,{fill:n.GRID_LINE,stroke:n.GRID_LINE,strokeWidth:1,opacity:.3,selectable:!1,hasControls:!1,hasRotatingPoint:!1})},e.prototype._drawSignalNames=function(){var e,t,i,r,s,a,o,l,f,g,p,m,v,y;for(v=h+d,this._signalNames=[],this._signalCurrentValues=[],o=this.renderedSignals,t=0,r=o.length;t<r;t++)f=o[t],p=f.signal,e=this.isBus(p.name),a=new fabric.IText(p.name,{fontFamily:"monospace",left:10,top:v+4,fontSize:12,selectable:!1,hasControls:!1,hasRotatingPoint:!1,width:u,height:c,fill:n.SIGNAL_NAME}),m=new fabric.IText("0",{fontFamily:"monospace",left:u+12,top:v+4,fontSize:11,selectable:!1,hasControls:!1,hasRotatingPoint:!1,width:u,height:c,fill:n.SIGNAL_CURRENT_VALUE}),this._signalNames.push(a),f.text=a,f.ypos=v,this._signalCurrentValues.push(m),v+=c+h;for(this._currentValueLineStart=new fabric.Line([u+10,0,u+10,this._canvas.height],{fill:n.CURRENT_VALUE_LINE,stroke:n.CURRENT_VALUE_LINE,strokeWidth:1,opacity:1,selectable:!1,hasControls:!1,hasRotatingPoint:!1}),this._currentValueLineEnd=new fabric.Line([_,0,_,this._canvas.height],{
fill:n.CURRENT_VALUE_LINE,stroke:n.CURRENT_VALUE_LINE,strokeWidth:1,opacity:1,selectable:!1,hasControls:!1,hasRotatingPoint:!1}),this._canvas.add(this._currentValueLineStart),this._canvas.add(this._currentValueLineEnd),l=this._signalNames,g=[],i=0,s=l.length;i<s;i++)y=l[i],this._canvas.add(y),y.width>u?g.push(y.scaleToWidth(u-10)):g.push(void 0);return g},e.prototype._getSignalValues=function(e,t,i){var n,r,s,a,o,l,d,c;if(null==t&&(t=this.renderFrom),null==i&&(i=this.renderTo),0===e.length)return[];for(l=[],s=!1,d=0,n=function(e,n,r){return null==n&&(n=t),null==r&&(r=i),e>=n&&e<=r};d<e.length;){if(c=e[d],o=Number.parseInt(c[0]),a=d===e.length-1?i:Number.parseInt(e[d+1][0]),r={start:0,end:0,value:c[1]},n(o)&&n(a))r.start=o,r.end=a;else if(n(o)&&a>i)r.start=o,r.end=i;else{if(!(n(a)&&o<t)){d++;continue}r.start=t,r.end=a}l.push(r),s=!0,d++}return s?l:[{start:t,end:i,value:e[e.length-1][1]}]},e.prototype._timeToPos=function(e,t,i){return null==t&&(t=this.renderFrom),null==i&&(i=!0),i?Math.round(_+e*this._renderDistanceFactor-Math.round(t*this._renderDistanceFactor)):_+e*this._renderDistanceFactor-t*this._renderDistanceFactor},e.prototype._posToTime=function(e,t,i){return null==t&&(t=this.renderFrom),null==i&&(i=!0),i?Math.round((e-_)/this._renderDistanceFactor)+Math.round(t):(e-_)/this._renderDistanceFactor+t},e.prototype._getFormattedValue=function(e,t){return null==t&&(t=8),this.radix===o?"x"===e?""+this.pad(e,t,"x"):"z"===e.toLowerCase()?""+this.pad(e,t,"z"):""+this.binToDec(e):this.radix===l?"x"===e?""+this.pad(e,t,"x"):"z"===e.toLowerCase()?""+this.pad(e,t,"z"):"0x"+this.binToHex(e):this.radix===a?"x"===e?""+this.pad(e,t,"x"):"z"===e.toLowerCase()?""+this.pad(e,t,"z"):""+this.pad(e,t):void 0},e.prototype._initLayout=function(){return this._addSignalButtonId=this._containerId+"-waveform-add-btn",this._addSignalButton=$('<button class="waveform-toolbar-btn" id="'+this._addSignalButtonId+'">Add Sginal</button>'),this._removeSignalButtonId=this._containerId+"-waveform-remove-btn",this._removeSignalButton=$('<button class="waveform-toolbar-btn" id="'+this._removeSignalButtonId+'">Remove Sginal</button>'),this._zoomInButtonId=this._containerId+"-waveform-zoomin-btn",this._zoomInButton=$('<button class="waveform-toolbar-btn" id="'+this._zoomInButtonId+'">Zoom In</button>'),this._zoomOutButtonId=this._containerId+"-waveform-zoomout-btn",this._zoomOutButton=$('<button class="waveform-toolbar-btn" id="'+this._zoomOutButtonId+'">Zoom Out</button>'),this._zoomAllButtonId=this._containerId+"-waveform-zoomall-btn",this._zoomAllButton=$('<button class="waveform-toolbar-btn" id="'+this._zoomAllButtonId+'">Zoom All</button>'),this._gotoFirstButtonId=this._containerId+"-waveform-gotofirst-btn",this._gotoFirstButton=$('<button class="waveform-toolbar-btn" id="'+this._gotoFirstButtonId+'">Goto First</button>'),this._goLeftButtonId=this._containerId+"-waveform-goleft-btn",this._goLeftButton=$('<button class="waveform-toolbar-btn" id="'+this._goLeftButtonId+'">Go Left</button>'),this._goRightButtonId=this._containerId+"-waveform-goright-btn",this._goRightButton=$('<button class="waveform-toolbar-btn" id="'+this._goRightButtonId+'">Go Right</button>'),this._resetButtonId=this._containerId+"-waveform-reset-btn",this._resetButton=$('<button class="waveform-toolbar-btn" id="'+this._goRightButtonId+'">Reset Timing Diagram</button>'),this._radixSelectBinId=this._containerId+"-waveform-radix-bin",this._optionBin=$('<option class="waveform-toolbar-option" id="'+this._radixSelectBinId+'" value="'+this._radixSelectBinId+'" selected>Binary</option>'),this._radixSelectDecId=this._containerId+"-waveform-radix-dec",this._optionDec=$('<option class="waveform-toolbar-option" id="'+this._radixSelectDecId+'" value="'+this._radixSelectDecId+'">Decimal</option>'),this._radixSelectHexId=this._containerId+"-waveform-radix-hex",this._optionHex=$('<option class="waveform-toolbar-option" id="'+this._radixSelectHexId+'" value="'+this._radixSelectHexId+'">Hexadecimal</option>'),this._radixSelectId=this._containerId+"-waveform-radix-select",this._radixSelectLabelId=this._containerId+"-waveform-radix-select-label",this._radixSelectLabel=$('<label class="waveform-toolbar-label" id="'+this._radixSelectLabelId+'" for="'+this._radixSelectId+'">Select a speed</label>'),this._radixSelect=$('<select class="waveform-toolbar-select" name="radix-select" id="'+this._radixSelectId+'"></select>'),this._cursorValueId=this._containerId+"-waveform-toolbar-cursor-value",this._cursorValueDiv=$('<div id="'+this._cursorValueId+'" class="cursor-toolbar-value">Cursor: 0ns</div>'),this._modalDialogId=this._containerId+"-waveform-modal",this._modalDialog=$('<div id="'+this._modalDialogId+'"></div>'),this._toolbardId=this._containerId+"-waveform-toolbar",this._waveformToolbar=$('<div id="'+this._toolbardId+'" class="ui-widget-header ui-corner-all waveform-toolbar"></div>'),this._waveformToolbar.append(this._addSignalButton),this._waveformToolbar.append(this._removeSignalButton),this._waveformToolbar.append(this._zoomInButton),this._waveformToolbar.append(this._zoomOutButton),this._waveformToolbar.append(this._zoomAllButton),this._waveformToolbar.append(this._gotoFirstButton),this._waveformToolbar.append(this._goLeftButton),this._waveformToolbar.append(this._goRightButton),this._waveformToolbar.append(this._resetButton),this._radixSelect.append(this._optionBin),this._radixSelect.append(this._optionDec),this._radixSelect.append(this._optionHex),this._waveformToolbar.append(this._radixSelect),this._waveformToolbar.append(this._cursorValueDiv),this._cursorValueDiv.hide(),this._container.append(this._waveformToolbar),this._container.append(this._modalDialog),this._canvasId=this._containerId+"-waveform-canvas",this._canvasWrapper=$('<canvas class="waveform-canvas" id="'+this._canvasId+'"></canvas>'),this._canvasViewportId=this._containerId+"-waveform-canvas-viewport",this._canvasViewport=$('<div class="canvas-viewport" id="'+this._canvasViewportId+'"></div>'),this._canvasViewport.append(this._canvasWrapper),this._container.append(this._canvasViewport),this.canvasHeight=i,this.canvasWidth=this._container.width(),this.viewportHeight=this._container.height(),this.canvasHeight=i,this._canvasViewport.attr("tabIndex",1e3),$("#"+this._canvasViewportId).keydown(function(e){return function(t){return 38===t.keyCode?(e.highlighted&&(e.highlighted.fill=void 0,e.highlighted.opacity=0),e.highlightedIndex--,e.highlightedIndex<0&&(e.highlightedIndex=e.renderedSignals.length-1),e.highlighted=e.renderedSignals[e.highlightedIndex].highlight,e.highlighted.fill=n.SIGNAL_HIGHLIGHT,e.highlighted.opacity=r.SIGNAL_HIGHLIGHT,e._canvas.renderAll(),e.setCursorTime(e.currentExactTime),t.preventDefault()):40===t.keyCode?(e.highlighted&&(e.highlighted.fill=void 0,e.highlighted.opacity=0),e.highlightedIndex++,e.highlightedIndex>=e.renderedSignals.length&&(e.highlightedIndex=0),e.highlighted=e.renderedSignals[e.highlightedIndex].highlight,e.highlighted.fill=n.SIGNAL_HIGHLIGHT,e.highlighted.opacity=r.SIGNAL_HIGHLIGHT,e._canvas.renderAll(),e.setCursorTime(e.currentExactTime),t.preventDefault()):t.ctrlKey&&83===t.keyCode?(e._onSaveListener&&e._onSaveListener(e.exportTimingDiagram()),t.preventDefault()):void 0}}(this)),this._addSignalButton.button({text:!1,icons:{primary:"ui-icon-plus"}}),this._addSignalButton.click(function(e){return function(t){return e.addSignal()}}(this)),this._removeSignalButton.button({text:!1,icons:{primary:"ui-icon-minus"}}),this._removeSignalButton.click(function(e){return function(t){return e.removeSignal()}}(this)),this._zoomInButton.button({text:!1,icons:{primary:"ui-icon-zoomin"}}),this._zoomInButton.click(function(e){return function(t){return e.zoomIn()}}(this)),this._zoomOutButton.button({text:!1,icons:{primary:"ui-icon-zoomout"}}),this._zoomOutButton.click(function(e){return function(t){return e.zoomOut()}}(this)),this._zoomAllButton.button({text:!1,icons:{primary:"ui-icon-arrow-4-diag"}}),this._zoomAllButton.click(function(e){return function(t){return e.zoomAll()}}(this)),this._gotoFirstButton.button({text:!1,icons:{primary:"ui-icon-arrowstop-1-w"}}),this._gotoFirstButton.click(function(e){return function(t){return e.moveFirst()}}(this)),this._goLeftButton.button({text:!1,icons:{primary:"ui-icon-triangle-1-w"}}),this._goLeftButton.click(function(e){return function(t){return e.moveLeft()}}(this)),this._goRightButton.button({text:!1,icons:{primary:"ui-icon-triangle-1-e"}}),this._goRightButton.click(function(e){return function(t){return e.moveRight()}}(this)),this._resetButton.button({text:!1,icons:{primary:"ui-icon-arrowrefresh-1-n"}}),this._resetButton.click(function(e){return function(t){return e.resetTimingDiagram()}}(this)),this._radixSelect.selectmenu(),$("#"+this._containerId+"-waveform-radix-select-button").css("display","inline-table"),$("#"+this._containerId+"-waveform-radix-select-button").find(".ui-selectmenu-text").css("line-height","0.6"),this._radixSelect.on("selectmenuchange",function(e){return function(t,i){var n;return n=i.item.value,n===e._radixSelectBinId?e.setRadix(a):n===e._radixSelectDecId?e.setRadix(o):n===e._radixSelectHexId?e.setRadix(l):void 0}}(this))},e}(),function(e){"function"==typeof define&&define.amd?define(["jquery"],e):"undefined"!=typeof module&&module.exports?module.exports=e(require("jquery")):e(jQuery)}(function(e,t){if(!e.jstree){var i,n,r=0,s=!1,a=!1,o=!1,l=[],d=e("script:last").attr("src"),c=window.document,h=c.createElement("LI");h.setAttribute("role","treeitem"),i=c.createElement("I"),i.className="jstree-icon jstree-ocl",i.setAttribute("role","presentation"),h.appendChild(i),i=c.createElement("A"),i.className="jstree-anchor",i.setAttribute("href","#"),i.setAttribute("tabindex","-1"),n=c.createElement("I"),n.className="jstree-icon jstree-themeicon",n.setAttribute("role","presentation"),i.appendChild(n),h.appendChild(i),i=n=null,e.jstree={version:"3.2.1",defaults:{plugins:[]},plugins:{},path:d&&d.indexOf("/")!==-1?d.replace(/\/[^\/]+$/,""):"",idregex:/[\\:&!^|()\[\]<>@*'+~#";.,=\- \/${}%?`]/g,root:"#"},e.jstree.create=function(t,i){var n=new e.jstree.core((++r)),s=i;return i=e.extend(!0,{},e.jstree.defaults,i),s&&s.plugins&&(i.plugins=s.plugins),e.each(i.plugins,function(e,t){"core"!==e&&(n=n.plugin(t,i[t]))}),e(t).data("jstree",n),n.init(t,i),n},e.jstree.destroy=function(){e(".jstree:jstree").jstree("destroy"),e(c).off(".jstree")},e.jstree.core=function(e){this._id=e,this._cnt=0,this._wrk=null,this._data={core:{themes:{name:!1,dots:!1,icons:!1},selected:[],last_error:{},working:!1,worker_queue:[],focused:null}}},e.jstree.reference=function(t){var i=null,n=null;if(!t||!t.id||t.tagName&&t.nodeType||(t=t.id),!n||!n.length)try{n=e(t)}catch(e){}if(!n||!n.length)try{n=e("#"+t.replace(e.jstree.idregex,"\\$&"))}catch(e){}return n&&n.length&&(n=n.closest(".jstree")).length&&(n=n.data("jstree"))?i=n:e(".jstree").each(function(){var n=e(this).data("jstree");if(n&&n._model.data[t])return i=n,!1}),i},e.fn.jstree=function(i){var n="string"==typeof i,r=Array.prototype.slice.call(arguments,1),s=null;return!(i===!0&&!this.length)&&(this.each(function(){var a=e.jstree.reference(this),o=n&&a?a[i]:null;if(s=n&&o?o.apply(a,r):null,a||n||i!==t&&!e.isPlainObject(i)||e.jstree.create(this,i),(a&&!n||i===!0)&&(s=a||!1),null!==s&&s!==t)return!1}),null!==s&&s!==t?s:this)},e.expr[":"].jstree=e.expr.createPseudo(function(i){return function(i){return e(i).hasClass("jstree")&&e(i).data("jstree")!==t}}),e.jstree.defaults.core={data:!1,strings:!1,check_callback:!1,error:e.noop,animation:200,multiple:!0,themes:{name:!1,url:!1,dir:!1,dots:!0,icons:!0,stripes:!1,variant:!1,responsive:!1},expand_selected_onload:!0,worker:!0,force_text:!1,dblclick_toggle:!0},e.jstree.core.prototype={plugin:function(t,i){var n=e.jstree.plugins[t];return n?(this._data[t]={},n.prototype=this,new n(i,this)):this},init:function(t,i){this._model={data:{},changed:[],force_full_redraw:!1,redraw_timeout:!1,default_state:{loaded:!0,opened:!1,selected:!1,disabled:!1}},this._model.data[e.jstree.root]={id:e.jstree.root,parent:null,parents:[],children:[],children_d:[],state:{loaded:!1}},this.element=e(t).addClass("jstree jstree-"+this._id),this.settings=i,this._data.core.ready=!1,this._data.core.loaded=!1,this._data.core.rtl="rtl"===this.element.css("direction"),this.element[this._data.core.rtl?"addClass":"removeClass"]("jstree-rtl"),this.element.attr("role","tree"),this.settings.core.multiple&&this.element.attr("aria-multiselectable",!0),this.element.attr("tabindex")||this.element.attr("tabindex","0"),this.bind(),this.trigger("init"),this._data.core.original_container_html=this.element.find(" > ul > li").clone(!0),this._data.core.original_container_html.find("li").addBack().contents().filter(function(){return 3===this.nodeType&&(!this.nodeValue||/^\s+$/.test(this.nodeValue))}).remove(),this.element.html("<ul class='jstree-container-ul jstree-children' role='group'><li id='j"+this._id+"_loading' class='jstree-initial-node jstree-loading jstree-leaf jstree-last' role='tree-item'><i class='jstree-icon jstree-ocl'></i><a class='jstree-anchor' href='#'><i class='jstree-icon jstree-themeicon-hidden'></i>"+this.get_string("Loading ...")+"</a></li></ul>"),this.element.attr("aria-activedescendant","j"+this._id+"_loading"),this._data.core.li_height=this.get_container_ul().children("li").first().height()||24,this.trigger("loading"),this.load_node(e.jstree.root)},destroy:function(e){if(this._wrk)try{window.URL.revokeObjectURL(this._wrk),this._wrk=null}catch(e){}e||this.element.empty(),this.teardown()},teardown:function(){this.unbind(),this.element.removeClass("jstree").removeData("jstree").find("[class^='jstree']").addBack().attr("class",function(){return this.className.replace(/jstree[^ ]*|$/gi,"")}),this.element=null},bind:function(){var t="",i=null,n=0;this.element.on("dblclick.jstree",function(e){if(e.target.tagName&&"input"===e.target.tagName.toLowerCase())return!0;if(c.selection&&c.selection.empty)c.selection.empty();else if(window.getSelection){var t=window.getSelection();try{t.removeAllRanges(),t.collapse()}catch(e){}}}).on("mousedown.jstree",e.proxy(function(e){e.target===this.element[0]&&(e.preventDefault(),n=+new Date)},this)).on("mousedown.jstree",".jstree-ocl",function(e){e.preventDefault()}).on("click.jstree",".jstree-ocl",e.proxy(function(e){this.toggle_node(e.target)},this)).on("dblclick.jstree",".jstree-anchor",e.proxy(function(e){return!(!e.target.tagName||"input"!==e.target.tagName.toLowerCase())||void(this.settings.core.dblclick_toggle&&this.toggle_node(e.target))},this)).on("click.jstree",".jstree-anchor",e.proxy(function(t){t.preventDefault(),t.currentTarget!==c.activeElement&&e(t.currentTarget).focus(),this.activate_node(t.currentTarget,t)},this)).on("keydown.jstree",".jstree-anchor",e.proxy(function(t){if(t.target.tagName&&"input"===t.target.tagName.toLowerCase())return!0;if(32!==t.which&&13!==t.which&&(t.shiftKey||t.ctrlKey||t.altKey||t.metaKey))return!0;var i=null;switch(this._data.core.rtl&&(37===t.which?t.which=39:39===t.which&&(t.which=37)),t.which){case 32:t.ctrlKey&&(t.type="click",e(t.currentTarget).trigger(t));break;case 13:t.type="click",e(t.currentTarget).trigger(t);break;case 37:t.preventDefault(),this.is_open(t.currentTarget)?this.close_node(t.currentTarget):(i=this.get_parent(t.currentTarget),i&&i.id!==e.jstree.root&&this.get_node(i,!0).children(".jstree-anchor").focus());break;case 38:t.preventDefault(),i=this.get_prev_dom(t.currentTarget),i&&i.length&&i.children(".jstree-anchor").focus();break;case 39:t.preventDefault(),this.is_closed(t.currentTarget)?this.open_node(t.currentTarget,function(e){this.get_node(e,!0).children(".jstree-anchor").focus()}):this.is_open(t.currentTarget)&&(i=this.get_node(t.currentTarget,!0).children(".jstree-children")[0],i&&e(this._firstChild(i)).children(".jstree-anchor").focus());break;case 40:t.preventDefault(),i=this.get_next_dom(t.currentTarget),i&&i.length&&i.children(".jstree-anchor").focus();break;case 106:this.open_all();break;case 36:t.preventDefault(),i=this._firstChild(this.get_container_ul()[0]),i&&e(i).children(".jstree-anchor").filter(":visible").focus();break;case 35:t.preventDefault(),this.element.find(".jstree-anchor").filter(":visible").last().focus()}},this)).on("load_node.jstree",e.proxy(function(t,i){i.status&&(i.node.id!==e.jstree.root||this._data.core.loaded||(this._data.core.loaded=!0,this._firstChild(this.get_container_ul()[0])&&this.element.attr("aria-activedescendant",this._firstChild(this.get_container_ul()[0]).id),this.trigger("loaded")),this._data.core.ready||setTimeout(e.proxy(function(){if(this.element&&!this.get_container_ul().find(".jstree-loading").length){if(this._data.core.ready=!0,this._data.core.selected.length){if(this.settings.core.expand_selected_onload){var t,i,n=[];for(t=0,i=this._data.core.selected.length;t<i;t++)n=n.concat(this._model.data[this._data.core.selected[t]].parents);for(n=e.vakata.array_unique(n),t=0,i=n.length;t<i;t++)this.open_node(n[t],!1,0)}this.trigger("changed",{action:"ready",selected:this._data.core.selected})}this.trigger("ready")}},this),0))},this)).on("keypress.jstree",e.proxy(function(n){if(n.target.tagName&&"input"===n.target.tagName.toLowerCase())return!0;i&&clearTimeout(i),i=setTimeout(function(){t=""},500);var r=String.fromCharCode(n.which).toLowerCase(),s=this.element.find(".jstree-anchor").filter(":visible"),a=s.index(c.activeElement)||0,o=!1;if(t+=r,t.length>1){if(s.slice(a).each(e.proxy(function(i,n){if(0===e(n).text().toLowerCase().indexOf(t))return e(n).focus(),o=!0,!1},this)),o)return;if(s.slice(0,a).each(e.proxy(function(i,n){if(0===e(n).text().toLowerCase().indexOf(t))return e(n).focus(),o=!0,!1},this)),o)return}if(new RegExp("^"+r.replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&")+"+$").test(t)){if(s.slice(a+1).each(e.proxy(function(t,i){if(e(i).text().toLowerCase().charAt(0)===r)return e(i).focus(),o=!0,!1},this)),o)return;if(s.slice(0,a+1).each(e.proxy(function(t,i){if(e(i).text().toLowerCase().charAt(0)===r)return e(i).focus(),o=!0,!1},this)),o)return}},this)).on("init.jstree",e.proxy(function(){var e=this.settings.core.themes;this._data.core.themes.dots=e.dots,this._data.core.themes.stripes=e.stripes,this._data.core.themes.icons=e.icons,this.set_theme(e.name||"default",e.url),this.set_theme_variant(e.variant)},this)).on("loading.jstree",e.proxy(function(){this[this._data.core.themes.dots?"show_dots":"hide_dots"](),this[this._data.core.themes.icons?"show_icons":"hide_icons"](),this[this._data.core.themes.stripes?"show_stripes":"hide_stripes"]()},this)).on("blur.jstree",".jstree-anchor",e.proxy(function(t){this._data.core.focused=null,e(t.currentTarget).filter(".jstree-hovered").mouseleave(),this.element.attr("tabindex","0")},this)).on("focus.jstree",".jstree-anchor",e.proxy(function(t){var i=this.get_node(t.currentTarget);i&&i.id&&(this._data.core.focused=i.id),this.element.find(".jstree-hovered").not(t.currentTarget).mouseleave(),e(t.currentTarget).mouseenter(),this.element.attr("tabindex","-1")},this)).on("focus.jstree",e.proxy(function(){if(+new Date-n>500&&!this._data.core.focused){n=0;var e=this.get_node(this.element.attr("aria-activedescendant"),!0);e&&e.find("> .jstree-anchor").focus()}},this)).on("mouseenter.jstree",".jstree-anchor",e.proxy(function(e){this.hover_node(e.currentTarget)},this)).on("mouseleave.jstree",".jstree-anchor",e.proxy(function(e){this.dehover_node(e.currentTarget)},this))},unbind:function(){this.element.off(".jstree"),e(c).off(".jstree-"+this._id)},trigger:function(e,t){t||(t={}),t.instance=this,this.element.triggerHandler(e.replace(".jstree","")+".jstree",t)},get_container:function(){return this.element},get_container_ul:function(){return this.element.children(".jstree-children").first()},get_string:function(t){var i=this.settings.core.strings;return e.isFunction(i)?i.call(this,t):i&&i[t]?i[t]:t},_firstChild:function(e){for(e=e?e.firstChild:null;null!==e&&1!==e.nodeType;)e=e.nextSibling;return e},_nextSibling:function(e){for(e=e?e.nextSibling:null;null!==e&&1!==e.nodeType;)e=e.nextSibling;return e},_previousSibling:function(e){for(e=e?e.previousSibling:null;null!==e&&1!==e.nodeType;)e=e.previousSibling;return e},get_node:function(t,i){t&&t.id&&(t=t.id);var n;try{if(this._model.data[t])t=this._model.data[t];else if("string"==typeof t&&this._model.data[t.replace(/^#/,"")])t=this._model.data[t.replace(/^#/,"")];else if("string"==typeof t&&(n=e("#"+t.replace(e.jstree.idregex,"\\$&"),this.element)).length&&this._model.data[n.closest(".jstree-node").attr("id")])t=this._model.data[n.closest(".jstree-node").attr("id")];else if((n=e(t,this.element)).length&&this._model.data[n.closest(".jstree-node").attr("id")])t=this._model.data[n.closest(".jstree-node").attr("id")];else{if(!(n=e(t,this.element)).length||!n.hasClass("jstree"))return!1;t=this._model.data[e.jstree.root]}return i&&(t=t.id===e.jstree.root?this.element:e("#"+t.id.replace(e.jstree.idregex,"\\$&"),this.element)),t}catch(e){return!1}},get_path:function(t,i,n){if(t=t.parents?t:this.get_node(t),!t||t.id===e.jstree.root||!t.parents)return!1;var r,s,a=[];for(a.push(n?t.id:t.text),r=0,s=t.parents.length;r<s;r++)a.push(n?t.parents[r]:this.get_text(t.parents[r]));return a=a.reverse().slice(1),i?a.join(i):a},get_next_dom:function(t,i){var n;if(t=this.get_node(t,!0),t[0]===this.element[0]){for(n=this._firstChild(this.get_container_ul()[0]);n&&0===n.offsetHeight;)n=this._nextSibling(n);return!!n&&e(n)}if(!t||!t.length)return!1;if(i){n=t[0];do n=this._nextSibling(n);while(n&&0===n.offsetHeight);return!!n&&e(n)}if(t.hasClass("jstree-open")){for(n=this._firstChild(t.children(".jstree-children")[0]);n&&0===n.offsetHeight;)n=this._nextSibling(n);if(null!==n)return e(n)}n=t[0];do n=this._nextSibling(n);while(n&&0===n.offsetHeight);return null!==n?e(n):t.parentsUntil(".jstree",".jstree-node").nextAll(".jstree-node:visible").first()},get_prev_dom:function(t,i){var n;if(t=this.get_node(t,!0),t[0]===this.element[0]){for(n=this.get_container_ul()[0].lastChild;n&&0===n.offsetHeight;)n=this._previousSibling(n);return!!n&&e(n)}if(!t||!t.length)return!1;if(i){n=t[0];do n=this._previousSibling(n);while(n&&0===n.offsetHeight);return!!n&&e(n)}n=t[0];do n=this._previousSibling(n);while(n&&0===n.offsetHeight);if(null!==n){for(t=e(n);t.hasClass("jstree-open");)t=t.children(".jstree-children").first().children(".jstree-node:visible:last");return t}return n=t[0].parentNode.parentNode,!(!n||!n.className||n.className.indexOf("jstree-node")===-1)&&e(n)},get_parent:function(t){return t=this.get_node(t),!(!t||t.id===e.jstree.root)&&t.parent},get_children_dom:function(e){return e=this.get_node(e,!0),e[0]===this.element[0]?this.get_container_ul().children(".jstree-node"):!(!e||!e.length)&&e.children(".jstree-children").children(".jstree-node")},is_parent:function(e){return e=this.get_node(e),e&&(e.state.loaded===!1||e.children.length>0)},is_loaded:function(e){return e=this.get_node(e),e&&e.state.loaded},is_loading:function(e){return e=this.get_node(e),e&&e.state&&e.state.loading},is_open:function(e){return e=this.get_node(e),e&&e.state.opened},is_closed:function(e){return e=this.get_node(e),e&&this.is_parent(e)&&!e.state.opened},is_leaf:function(e){return!this.is_parent(e)},load_node:function(t,i){var n,r,s,a,o;if(e.isArray(t))return this._load_nodes(t.slice(),i),!0;if(t=this.get_node(t),!t)return i&&i.call(this,t,!1),!1;if(t.state.loaded){for(t.state.loaded=!1,n=0,r=t.children_d.length;n<r;n++){for(s=0,a=t.parents.length;s<a;s++)this._model.data[t.parents[s]].children_d=e.vakata.array_remove_item(this._model.data[t.parents[s]].children_d,t.children_d[n]);this._model.data[t.children_d[n]].state.selected&&(o=!0,this._data.core.selected=e.vakata.array_remove_item(this._data.core.selected,t.children_d[n])),delete this._model.data[t.children_d[n]]}t.children=[],t.children_d=[],o&&this.trigger("changed",{action:"load_node",node:t,selected:this._data.core.selected})}return t.state.failed=!1,t.state.loading=!0,this.get_node(t,!0).addClass("jstree-loading").attr("aria-busy",!0),this._load_node(t,e.proxy(function(e){t=this._model.data[t.id],t.state.loading=!1,t.state.loaded=e,t.state.failed=!t.state.loaded;var n=this.get_node(t,!0),r=0,s=0,a=this._model.data,o=!1;for(r=0,s=t.children.length;r<s;r++)if(a[t.children[r]]&&!a[t.children[r]].state.hidden){o=!0;break}t.state.loaded&&!o&&n&&n.length&&!n.hasClass("jstree-leaf")&&n.removeClass("jstree-closed jstree-open").addClass("jstree-leaf"),n.removeClass("jstree-loading").attr("aria-busy",!1),this.trigger("load_node",{node:t,status:e}),i&&i.call(this,t,e)},this)),!0},_load_nodes:function(e,t,i){var n,r,s=!0,a=function(){this._load_nodes(e,t,!0)},o=this._model.data,l=[];for(n=0,r=e.length;n<r;n++)!o[e[n]]||(o[e[n]].state.loaded||o[e[n]].state.failed)&&i||(this.is_loading(e[n])||this.load_node(e[n],a),s=!1);if(s){for(n=0,r=e.length;n<r;n++)o[e[n]]&&o[e[n]].state.loaded&&l.push(e[n]);t&&!t.done&&(t.call(this,l),t.done=!0)}},load_all:function(t,i){if(t||(t=e.jstree.root),t=this.get_node(t),!t)return!1;var n,r,s=[],a=this._model.data,o=a[t.id].children_d;for(t.state&&!t.state.loaded&&s.push(t.id),n=0,r=o.length;n<r;n++)a[o[n]]&&a[o[n]].state&&!a[o[n]].state.loaded&&s.push(o[n]);s.length?this._load_nodes(s,function(){this.load_all(t,i)}):(i&&i.call(this,t),this.trigger("load_all",{node:t}))},_load_node:function(t,i){var n,r=this.settings.core.data;return r?e.isFunction(r)?r.call(this,t,e.proxy(function(n){n===!1&&i.call(this,!1),this["string"==typeof n?"_append_html_data":"_append_json_data"](t,"string"==typeof n?e(e.parseHTML(n)).filter(function(){return 3!==this.nodeType}):n,function(e){i.call(this,e)})},this)):"object"==typeof r?r.url?(r=e.extend(!0,{},r),e.isFunction(r.url)&&(r.url=r.url.call(this,t)),e.isFunction(r.data)&&(r.data=r.data.call(this,t)),e.ajax(r).done(e.proxy(function(n,r,s){var a=s.getResponseHeader("Content-Type");return a&&a.indexOf("json")!==-1||"object"==typeof n?this._append_json_data(t,n,function(e){i.call(this,e)}):a&&a.indexOf("html")!==-1||"string"==typeof n?this._append_html_data(t,e(e.parseHTML(n)).filter(function(){return 3!==this.nodeType}),function(e){i.call(this,e)}):(this._data.core.last_error={error:"ajax",plugin:"core",id:"core_04",reason:"Could not load node",data:JSON.stringify({id:t.id,xhr:s})},this.settings.core.error.call(this,this._data.core.last_error),i.call(this,!1))},this)).fail(e.proxy(function(e){i.call(this,!1),this._data.core.last_error={error:"ajax",plugin:"core",id:"core_04",reason:"Could not load node",data:JSON.stringify({id:t.id,xhr:e})},this.settings.core.error.call(this,this._data.core.last_error)},this))):(n=e.isArray(r)||e.isPlainObject(r)?JSON.parse(JSON.stringify(r)):r,t.id===e.jstree.root?this._append_json_data(t,n,function(e){i.call(this,e)}):(this._data.core.last_error={error:"nodata",plugin:"core",id:"core_05",reason:"Could not load node",data:JSON.stringify({id:t.id})},this.settings.core.error.call(this,this._data.core.last_error),i.call(this,!1))):"string"==typeof r?t.id===e.jstree.root?this._append_html_data(t,e(e.parseHTML(r)).filter(function(){return 3!==this.nodeType}),function(e){i.call(this,e)}):(this._data.core.last_error={error:"nodata",plugin:"core",id:"core_06",reason:"Could not load node",data:JSON.stringify({id:t.id})},this.settings.core.error.call(this,this._data.core.last_error),i.call(this,!1)):i.call(this,!1):t.id===e.jstree.root?this._append_html_data(t,this._data.core.original_container_html.clone(!0),function(e){i.call(this,e)}):i.call(this,!1)},_node_changed:function(e){e=this.get_node(e),e&&this._model.changed.push(e.id)},_append_html_data:function(t,i,n){t=this.get_node(t),t.children=[],t.children_d=[];var r,s,a,o=i.is("ul")?i.children():i,l=t.id,d=[],c=[],h=this._model.data,u=h[l],f=this._data.core.selected.length;for(o.each(e.proxy(function(t,i){r=this._parse_model_from_html(e(i),l,u.parents.concat()),r&&(d.push(r),c.push(r),h[r].children_d.length&&(c=c.concat(h[r].children_d)))},this)),u.children=d,u.children_d=c,s=0,a=u.parents.length;s<a;s++)h[u.parents[s]].children_d=h[u.parents[s]].children_d.concat(c);this.trigger("model",{nodes:c,parent:l}),l!==e.jstree.root?(this._node_changed(l),this.redraw()):(this.get_container_ul().children(".jstree-initial-node").remove(),this.redraw(!0)),this._data.core.selected.length!==f&&this.trigger("changed",{action:"model",selected:this._data.core.selected}),n.call(this,!0)},_append_json_data:function(t,i,n,r){if(null!==this.element){t=this.get_node(t),t.children=[],t.children_d=[],i.d&&(i=i.d,"string"==typeof i&&(i=JSON.parse(i))),e.isArray(i)||(i=[i]);var s=null,a={df:this._model.default_state,dat:i,par:t.id,m:this._model.data,t_id:this._id,t_cnt:this._cnt,sel:this._data.core.selected},o=function(e,t){e.data&&(e=e.data);var i,n,r,s,a=e.dat,o=e.par,l=[],d=[],c=[],h=e.df,u=e.t_id,f=e.t_cnt,g=e.m,_=g[o],p=e.sel,m=function(e,i,n){n=n?n.concat():[],i&&n.unshift(i);var r,s,a,o,l=e.id.toString(),d={id:l,text:e.text||"",icon:e.icon===t||e.icon,parent:i,parents:n,children:e.children||[],children_d:e.children_d||[],data:e.data,state:{},li_attr:{id:!1},a_attr:{href:"#"},original:!1};for(r in h)h.hasOwnProperty(r)&&(d.state[r]=h[r]);if(e&&e.data&&e.data.jstree&&e.data.jstree.icon&&(d.icon=e.data.jstree.icon),d.icon!==t&&null!==d.icon&&""!==d.icon||(d.icon=!0),e&&e.data&&(d.data=e.data,e.data.jstree))for(r in e.data.jstree)e.data.jstree.hasOwnProperty(r)&&(d.state[r]=e.data.jstree[r]);if(e&&"object"==typeof e.state)for(r in e.state)e.state.hasOwnProperty(r)&&(d.state[r]=e.state[r]);if(e&&"object"==typeof e.li_attr)for(r in e.li_attr)e.li_attr.hasOwnProperty(r)&&(d.li_attr[r]=e.li_attr[r]);if(d.li_attr.id||(d.li_attr.id=l),e&&"object"==typeof e.a_attr)for(r in e.a_attr)e.a_attr.hasOwnProperty(r)&&(d.a_attr[r]=e.a_attr[r]);for(e&&e.children&&e.children===!0&&(d.state.loaded=!1,d.children=[],d.children_d=[]),g[d.id]=d,r=0,s=d.children.length;r<s;r++)a=m(g[d.children[r]],d.id,n),o=g[a],d.children_d.push(a),o.children_d.length&&(d.children_d=d.children_d.concat(o.children_d));return delete e.data,delete e.children,g[d.id].original=e,d.state.selected&&c.push(d.id),d.id},v=function(e,i,n){n=n?n.concat():[],i&&n.unshift(i);var r,s,a,o,l,d=!1;do d="j"+u+"_"+ ++f;while(g[d]);l={id:!1,text:"string"==typeof e?e:"",icon:"object"!=typeof e||e.icon===t||e.icon,parent:i,parents:n,children:[],children_d:[],data:null,state:{},li_attr:{id:!1},a_attr:{href:"#"},original:!1};for(r in h)h.hasOwnProperty(r)&&(l.state[r]=h[r]);if(e&&e.id&&(l.id=e.id.toString()),e&&e.text&&(l.text=e.text),e&&e.data&&e.data.jstree&&e.data.jstree.icon&&(l.icon=e.data.jstree.icon),l.icon!==t&&null!==l.icon&&""!==l.icon||(l.icon=!0),e&&e.data&&(l.data=e.data,e.data.jstree))for(r in e.data.jstree)e.data.jstree.hasOwnProperty(r)&&(l.state[r]=e.data.jstree[r]);if(e&&"object"==typeof e.state)for(r in e.state)e.state.hasOwnProperty(r)&&(l.state[r]=e.state[r]);if(e&&"object"==typeof e.li_attr)for(r in e.li_attr)e.li_attr.hasOwnProperty(r)&&(l.li_attr[r]=e.li_attr[r]);if(l.li_attr.id&&!l.id&&(l.id=l.li_attr.id.toString()),l.id||(l.id=d),l.li_attr.id||(l.li_attr.id=l.id),e&&"object"==typeof e.a_attr)for(r in e.a_attr)e.a_attr.hasOwnProperty(r)&&(l.a_attr[r]=e.a_attr[r]);if(e&&e.children&&e.children.length){for(r=0,s=e.children.length;r<s;r++)a=v(e.children[r],l.id,n),o=g[a],l.children.push(a),o.children_d.length&&(l.children_d=l.children_d.concat(o.children_d));l.children_d=l.children_d.concat(l.children)}return e&&e.children&&e.children===!0&&(l.state.loaded=!1,l.children=[],l.children_d=[]),delete e.data,delete e.children,l.original=e,g[l.id]=l,l.state.selected&&c.push(l.id),l.id};if(a.length&&a[0].id!==t&&a[0].parent!==t){for(n=0,r=a.length;n<r;n++)a[n].children||(a[n].children=[]),g[a[n].id.toString()]=a[n];for(n=0,r=a.length;n<r;n++)g[a[n].parent.toString()].children.push(a[n].id.toString()),_.children_d.push(a[n].id.toString());for(n=0,r=_.children.length;n<r;n++)i=m(g[_.children[n]],o,_.parents.concat()),d.push(i),g[i].children_d.length&&(d=d.concat(g[i].children_d));for(n=0,r=_.parents.length;n<r;n++)g[_.parents[n]].children_d=g[_.parents[n]].children_d.concat(d);
s={cnt:f,mod:g,sel:p,par:o,dpc:d,add:c}}else{for(n=0,r=a.length;n<r;n++)i=v(a[n],o,_.parents.concat()),i&&(l.push(i),d.push(i),g[i].children_d.length&&(d=d.concat(g[i].children_d)));for(_.children=l,_.children_d=d,n=0,r=_.parents.length;n<r;n++)g[_.parents[n]].children_d=g[_.parents[n]].children_d.concat(d);s={cnt:f,mod:g,sel:p,par:o,dpc:d,add:c}}return"undefined"!=typeof window&&"undefined"!=typeof window.document?s:void postMessage(s)},l=function(t,i){if(null!==this.element){if(this._cnt=t.cnt,this._model.data=t.mod,i){var r,s,a=t.add,o=t.sel,l=this._data.core.selected.slice(),d=this._model.data;if(o.length!==l.length||e.vakata.array_unique(o.concat(l)).length!==o.length){for(r=0,s=o.length;r<s;r++)e.inArray(o[r],a)===-1&&e.inArray(o[r],l)===-1&&(d[o[r]].state.selected=!1);for(r=0,s=l.length;r<s;r++)e.inArray(l[r],o)===-1&&(d[l[r]].state.selected=!0)}}t.add.length&&(this._data.core.selected=this._data.core.selected.concat(t.add)),this.trigger("model",{nodes:t.dpc,parent:t.par}),t.par!==e.jstree.root?(this._node_changed(t.par),this.redraw()):this.redraw(!0),t.add.length&&this.trigger("changed",{action:"model",selected:this._data.core.selected}),n.call(this,!0)}};if(this.settings.core.worker&&window.Blob&&window.URL&&window.Worker)try{null===this._wrk&&(this._wrk=window.URL.createObjectURL(new window.Blob(["self.onmessage = "+o.toString()],{type:"text/javascript"}))),!this._data.core.working||r?(this._data.core.working=!0,s=new window.Worker(this._wrk),s.onmessage=e.proxy(function(e){l.call(this,e.data,!0);try{s.terminate(),s=null}catch(e){}this._data.core.worker_queue.length?this._append_json_data.apply(this,this._data.core.worker_queue.shift()):this._data.core.working=!1},this),a.par?s.postMessage(a):this._data.core.worker_queue.length?this._append_json_data.apply(this,this._data.core.worker_queue.shift()):this._data.core.working=!1):this._data.core.worker_queue.push([t,i,n,!0])}catch(e){l.call(this,o(a),!1),this._data.core.worker_queue.length?this._append_json_data.apply(this,this._data.core.worker_queue.shift()):this._data.core.working=!1}else l.call(this,o(a),!1)}},_parse_model_from_html:function(i,n,r){r=r?[].concat(r):[],n&&r.unshift(n);var s,a,o,l,d,c=this._model.data,h={id:!1,text:!1,icon:!0,parent:n,parents:r,children:[],children_d:[],data:null,state:{},li_attr:{id:!1},a_attr:{href:"#"},original:!1};for(o in this._model.default_state)this._model.default_state.hasOwnProperty(o)&&(h.state[o]=this._model.default_state[o]);if(l=e.vakata.attributes(i,!0),e.each(l,function(t,i){return i=e.trim(i),!i.length||(h.li_attr[t]=i,void("id"===t&&(h.id=i.toString())))}),l=i.children("a").first(),l.length&&(l=e.vakata.attributes(l,!0),e.each(l,function(t,i){i=e.trim(i),i.length&&(h.a_attr[t]=i)})),l=i.children("a").first().length?i.children("a").first().clone():i.clone(),l.children("ins, i, ul").remove(),l=l.html(),l=e("<div />").html(l),h.text=this.settings.core.force_text?l.text():l.html(),l=i.data(),h.data=l?e.extend(!0,{},l):null,h.state.opened=i.hasClass("jstree-open"),h.state.selected=i.children("a").hasClass("jstree-clicked"),h.state.disabled=i.children("a").hasClass("jstree-disabled"),h.data&&h.data.jstree)for(o in h.data.jstree)h.data.jstree.hasOwnProperty(o)&&(h.state[o]=h.data.jstree[o]);l=i.children("a").children(".jstree-themeicon"),l.length&&(h.icon=!l.hasClass("jstree-themeicon-hidden")&&l.attr("rel")),h.state.icon!==t&&(h.icon=h.state.icon),h.icon!==t&&null!==h.icon&&""!==h.icon||(h.icon=!0),l=i.children("ul").children("li");do d="j"+this._id+"_"+ ++this._cnt;while(c[d]);return h.id=h.li_attr.id?h.li_attr.id.toString():d,l.length?(l.each(e.proxy(function(t,i){s=this._parse_model_from_html(e(i),h.id,r),a=this._model.data[s],h.children.push(s),a.children_d.length&&(h.children_d=h.children_d.concat(a.children_d))},this)),h.children_d=h.children_d.concat(h.children)):i.hasClass("jstree-closed")&&(h.state.loaded=!1),h.li_attr.class&&(h.li_attr.class=h.li_attr.class.replace("jstree-closed","").replace("jstree-open","")),h.a_attr.class&&(h.a_attr.class=h.a_attr.class.replace("jstree-clicked","").replace("jstree-disabled","")),c[h.id]=h,h.state.selected&&this._data.core.selected.push(h.id),h.id},_parse_model_from_flat_json:function(e,i,n){n=n?n.concat():[],i&&n.unshift(i);var r,s,a,o,l=e.id.toString(),d=this._model.data,c=this._model.default_state,h={id:l,text:e.text||"",icon:e.icon===t||e.icon,parent:i,parents:n,children:e.children||[],children_d:e.children_d||[],data:e.data,state:{},li_attr:{id:!1},a_attr:{href:"#"},original:!1};for(r in c)c.hasOwnProperty(r)&&(h.state[r]=c[r]);if(e&&e.data&&e.data.jstree&&e.data.jstree.icon&&(h.icon=e.data.jstree.icon),h.icon!==t&&null!==h.icon&&""!==h.icon||(h.icon=!0),e&&e.data&&(h.data=e.data,e.data.jstree))for(r in e.data.jstree)e.data.jstree.hasOwnProperty(r)&&(h.state[r]=e.data.jstree[r]);if(e&&"object"==typeof e.state)for(r in e.state)e.state.hasOwnProperty(r)&&(h.state[r]=e.state[r]);if(e&&"object"==typeof e.li_attr)for(r in e.li_attr)e.li_attr.hasOwnProperty(r)&&(h.li_attr[r]=e.li_attr[r]);if(h.li_attr.id||(h.li_attr.id=l),e&&"object"==typeof e.a_attr)for(r in e.a_attr)e.a_attr.hasOwnProperty(r)&&(h.a_attr[r]=e.a_attr[r]);for(e&&e.children&&e.children===!0&&(h.state.loaded=!1,h.children=[],h.children_d=[]),d[h.id]=h,r=0,s=h.children.length;r<s;r++)a=this._parse_model_from_flat_json(d[h.children[r]],h.id,n),o=d[a],h.children_d.push(a),o.children_d.length&&(h.children_d=h.children_d.concat(o.children_d));return delete e.data,delete e.children,d[h.id].original=e,h.state.selected&&this._data.core.selected.push(h.id),h.id},_parse_model_from_json:function(e,i,n){n=n?n.concat():[],i&&n.unshift(i);var r,s,a,o,l,d=!1,c=this._model.data,h=this._model.default_state;do d="j"+this._id+"_"+ ++this._cnt;while(c[d]);l={id:!1,text:"string"==typeof e?e:"",icon:"object"!=typeof e||e.icon===t||e.icon,parent:i,parents:n,children:[],children_d:[],data:null,state:{},li_attr:{id:!1},a_attr:{href:"#"},original:!1};for(r in h)h.hasOwnProperty(r)&&(l.state[r]=h[r]);if(e&&e.id&&(l.id=e.id.toString()),e&&e.text&&(l.text=e.text),e&&e.data&&e.data.jstree&&e.data.jstree.icon&&(l.icon=e.data.jstree.icon),l.icon!==t&&null!==l.icon&&""!==l.icon||(l.icon=!0),e&&e.data&&(l.data=e.data,e.data.jstree))for(r in e.data.jstree)e.data.jstree.hasOwnProperty(r)&&(l.state[r]=e.data.jstree[r]);if(e&&"object"==typeof e.state)for(r in e.state)e.state.hasOwnProperty(r)&&(l.state[r]=e.state[r]);if(e&&"object"==typeof e.li_attr)for(r in e.li_attr)e.li_attr.hasOwnProperty(r)&&(l.li_attr[r]=e.li_attr[r]);if(l.li_attr.id&&!l.id&&(l.id=l.li_attr.id.toString()),l.id||(l.id=d),l.li_attr.id||(l.li_attr.id=l.id),e&&"object"==typeof e.a_attr)for(r in e.a_attr)e.a_attr.hasOwnProperty(r)&&(l.a_attr[r]=e.a_attr[r]);if(e&&e.children&&e.children.length){for(r=0,s=e.children.length;r<s;r++)a=this._parse_model_from_json(e.children[r],l.id,n),o=c[a],l.children.push(a),o.children_d.length&&(l.children_d=l.children_d.concat(o.children_d));l.children_d=l.children_d.concat(l.children)}return e&&e.children&&e.children===!0&&(l.state.loaded=!1,l.children=[],l.children_d=[]),delete e.data,delete e.children,l.original=e,c[l.id]=l,l.state.selected&&this._data.core.selected.push(l.id),l.id},_redraw:function(){var t,i,n,r=this._model.force_full_redraw?this._model.data[e.jstree.root].children.concat([]):this._model.changed.concat([]),s=c.createElement("UL"),a=this._data.core.focused;for(i=0,n=r.length;i<n;i++)t=this.redraw_node(r[i],!0,this._model.force_full_redraw),t&&this._model.force_full_redraw&&s.appendChild(t);this._model.force_full_redraw&&(s.className=this.get_container_ul()[0].className,s.setAttribute("role","group"),this.element.empty().append(s)),null!==a&&(t=this.get_node(a,!0),t&&t.length&&t.children(".jstree-anchor")[0]!==c.activeElement?t.children(".jstree-anchor").focus():this._data.core.focused=null),this._model.force_full_redraw=!1,this._model.changed=[],this.trigger("redraw",{nodes:r})},redraw:function(e){e&&(this._model.force_full_redraw=!0),this._redraw()},draw_children:function(t){var i=this.get_node(t),n=!1,r=!1,s=!1,a=c;if(!i)return!1;if(i.id===e.jstree.root)return this.redraw(!0);if(t=this.get_node(t,!0),!t||!t.length)return!1;if(t.children(".jstree-children").remove(),t=t[0],i.children.length&&i.state.loaded){for(s=a.createElement("UL"),s.setAttribute("role","group"),s.className="jstree-children",n=0,r=i.children.length;n<r;n++)s.appendChild(this.redraw_node(i.children[n],!0,!0));t.appendChild(s)}},redraw_node:function(t,i,n,r){var s=this.get_node(t),a=!1,o=!1,l=!1,d=!1,u=!1,f=!1,g="",_=c,p=this._model.data,m=!1,v=null,y=0,x=0,b=!1,w=!1;if(!s)return!1;if(s.id===e.jstree.root)return this.redraw(!0);if(i=i||0===s.children.length,t=c.querySelector?this.element[0].querySelector("#"+("0123456789".indexOf(s.id[0])!==-1?"\\3"+s.id[0]+" "+s.id.substr(1).replace(e.jstree.idregex,"\\$&"):s.id.replace(e.jstree.idregex,"\\$&"))):c.getElementById(s.id))t=e(t),n||(a=t.parent().parent()[0],a===this.element[0]&&(a=null),o=t.index()),i||!s.children.length||t.children(".jstree-children").length||(i=!0),i||(l=t.children(".jstree-children")[0]),m=t.children(".jstree-anchor")[0]===c.activeElement,t.remove();else if(i=!0,!n){if(a=s.parent!==e.jstree.root?e("#"+s.parent.replace(e.jstree.idregex,"\\$&"),this.element)[0]:null,!(null===a||a&&p[s.parent].state.opened))return!1;o=e.inArray(s.id,null===a?p[e.jstree.root].children:p[s.parent].children)}t=h.cloneNode(!0),g="jstree-node ";for(d in s.li_attr)if(s.li_attr.hasOwnProperty(d)){if("id"===d)continue;"class"!==d?t.setAttribute(d,s.li_attr[d]):g+=s.li_attr[d]}for(s.a_attr.id||(s.a_attr.id=s.id+"_anchor"),t.setAttribute("aria-selected",!!s.state.selected),t.setAttribute("aria-level",s.parents.length),t.setAttribute("aria-labelledby",s.a_attr.id),s.state.disabled&&t.setAttribute("aria-disabled",!0),d=0,u=s.children.length;d<u;d++)if(!p[s.children[d]].state.hidden){b=!0;break}if(null!==s.parent&&p[s.parent]&&!s.state.hidden&&(d=e.inArray(s.id,p[s.parent].children),w=s.id,d!==-1))for(d++,u=p[s.parent].children.length;d<u&&(p[p[s.parent].children[d]].state.hidden||(w=p[s.parent].children[d]),w===s.id);d++);s.state.hidden&&(g+=" jstree-hidden"),s.state.loaded&&!b?g+=" jstree-leaf":(g+=s.state.opened&&s.state.loaded?" jstree-open":" jstree-closed",t.setAttribute("aria-expanded",s.state.opened&&s.state.loaded)),w===s.id&&(g+=" jstree-last"),t.id=s.id,t.className=g,g=(s.state.selected?" jstree-clicked":"")+(s.state.disabled?" jstree-disabled":"");for(u in s.a_attr)if(s.a_attr.hasOwnProperty(u)){if("href"===u&&"#"===s.a_attr[u])continue;"class"!==u?t.childNodes[1].setAttribute(u,s.a_attr[u]):g+=" "+s.a_attr[u]}if(g.length&&(t.childNodes[1].className="jstree-anchor "+g),(s.icon&&s.icon!==!0||s.icon===!1)&&(s.icon===!1?t.childNodes[1].childNodes[0].className+=" jstree-themeicon-hidden":s.icon.indexOf("/")===-1&&s.icon.indexOf(".")===-1?t.childNodes[1].childNodes[0].className+=" "+s.icon+" jstree-themeicon-custom":(t.childNodes[1].childNodes[0].style.backgroundImage="url("+s.icon+")",t.childNodes[1].childNodes[0].style.backgroundPosition="center center",t.childNodes[1].childNodes[0].style.backgroundSize="auto",t.childNodes[1].childNodes[0].className+=" jstree-themeicon-custom")),this.settings.core.force_text?t.childNodes[1].appendChild(_.createTextNode(s.text)):t.childNodes[1].innerHTML+=s.text,i&&s.children.length&&(s.state.opened||r)&&s.state.loaded){for(f=_.createElement("UL"),f.setAttribute("role","group"),f.className="jstree-children",d=0,u=s.children.length;d<u;d++)f.appendChild(this.redraw_node(s.children[d],i,!0));t.appendChild(f)}if(l&&t.appendChild(l),!n){for(a||(a=this.element[0]),d=0,u=a.childNodes.length;d<u;d++)if(a.childNodes[d]&&a.childNodes[d].className&&a.childNodes[d].className.indexOf("jstree-children")!==-1){v=a.childNodes[d];break}v||(v=_.createElement("UL"),v.setAttribute("role","group"),v.className="jstree-children",a.appendChild(v)),a=v,o<a.childNodes.length?a.insertBefore(t,a.childNodes[o]):a.appendChild(t),m&&(y=this.element[0].scrollTop,x=this.element[0].scrollLeft,t.childNodes[1].focus(),this.element[0].scrollTop=y,this.element[0].scrollLeft=x)}return s.state.opened&&!s.state.loaded&&(s.state.opened=!1,setTimeout(e.proxy(function(){this.open_node(s.id,!1,0)},this),0)),t},open_node:function(i,n,r){var s,a,o,l;if(e.isArray(i)){for(i=i.slice(),s=0,a=i.length;s<a;s++)this.open_node(i[s],n,r);return!0}return i=this.get_node(i),!(!i||i.id===e.jstree.root)&&(r=r===t?this.settings.core.animation:r,this.is_closed(i)?this.is_loaded(i)?(o=this.get_node(i,!0),l=this,o.length&&(r&&o.children(".jstree-children").length&&o.children(".jstree-children").stop(!0,!0),i.children.length&&!this._firstChild(o.children(".jstree-children")[0])&&this.draw_children(i),r?(this.trigger("before_open",{node:i}),o.children(".jstree-children").css("display","none").end().removeClass("jstree-closed").addClass("jstree-open").attr("aria-expanded",!0).children(".jstree-children").stop(!0,!0).slideDown(r,function(){this.style.display="",l.trigger("after_open",{node:i})})):(this.trigger("before_open",{node:i}),o[0].className=o[0].className.replace("jstree-closed","jstree-open"),o[0].setAttribute("aria-expanded",!0))),i.state.opened=!0,n&&n.call(this,i,!0),o.length||this.trigger("before_open",{node:i}),this.trigger("open_node",{node:i}),r&&o.length||this.trigger("after_open",{node:i}),!0):this.is_loading(i)?setTimeout(e.proxy(function(){this.open_node(i,n,r)},this),500):void this.load_node(i,function(e,t){return t?this.open_node(e,n,r):!!n&&n.call(this,e,!1)}):(n&&n.call(this,i,!1),!1))},_open_to:function(t){if(t=this.get_node(t),!t||t.id===e.jstree.root)return!1;var i,n,r=t.parents;for(i=0,n=r.length;i<n;i+=1)i!==e.jstree.root&&this.open_node(r[i],!1,0);return e("#"+t.id.replace(e.jstree.idregex,"\\$&"),this.element)},close_node:function(i,n){var r,s,a,o;if(e.isArray(i)){for(i=i.slice(),r=0,s=i.length;r<s;r++)this.close_node(i[r],n);return!0}return i=this.get_node(i),!(!i||i.id===e.jstree.root)&&(!this.is_closed(i)&&(n=n===t?this.settings.core.animation:n,a=this,o=this.get_node(i,!0),o.length&&(n?o.children(".jstree-children").attr("style","display:block !important").end().removeClass("jstree-open").addClass("jstree-closed").attr("aria-expanded",!1).children(".jstree-children").stop(!0,!0).slideUp(n,function(){this.style.display="",o.children(".jstree-children").remove(),a.trigger("after_close",{node:i})}):(o[0].className=o[0].className.replace("jstree-open","jstree-closed"),o.attr("aria-expanded",!1).children(".jstree-children").remove())),i.state.opened=!1,this.trigger("close_node",{node:i}),void(n&&o.length||this.trigger("after_close",{node:i}))))},toggle_node:function(t){var i,n;if(e.isArray(t)){for(t=t.slice(),i=0,n=t.length;i<n;i++)this.toggle_node(t[i]);return!0}return this.is_closed(t)?this.open_node(t):this.is_open(t)?this.close_node(t):void 0},open_all:function(t,i,n){if(t||(t=e.jstree.root),t=this.get_node(t),!t)return!1;var r,s,a,o=t.id===e.jstree.root?this.get_container_ul():this.get_node(t,!0);if(!o.length){for(r=0,s=t.children_d.length;r<s;r++)this.is_closed(this._model.data[t.children_d[r]])&&(this._model.data[t.children_d[r]].state.opened=!0);return this.trigger("open_all",{node:t})}n=n||o,a=this,o=this.is_closed(t)?o.find(".jstree-closed").addBack():o.find(".jstree-closed"),o.each(function(){a.open_node(this,function(e,t){t&&this.is_parent(e)&&this.open_all(e,i,n)},i||0)}),0===n.find(".jstree-closed").length&&this.trigger("open_all",{node:this.get_node(n)})},close_all:function(t,i){if(t||(t=e.jstree.root),t=this.get_node(t),!t)return!1;var n,r,s=t.id===e.jstree.root?this.get_container_ul():this.get_node(t,!0),a=this;for(s.length&&(s=this.is_open(t)?s.find(".jstree-open").addBack():s.find(".jstree-open"),e(s.get().reverse()).each(function(){a.close_node(this,i||0)})),n=0,r=t.children_d.length;n<r;n++)this._model.data[t.children_d[n]].state.opened=!1;this.trigger("close_all",{node:t})},is_disabled:function(e){return e=this.get_node(e),e&&e.state&&e.state.disabled},enable_node:function(t){var i,n;if(e.isArray(t)){for(t=t.slice(),i=0,n=t.length;i<n;i++)this.enable_node(t[i]);return!0}return t=this.get_node(t),!(!t||t.id===e.jstree.root)&&(t.state.disabled=!1,this.get_node(t,!0).children(".jstree-anchor").removeClass("jstree-disabled").attr("aria-disabled",!1),void this.trigger("enable_node",{node:t}))},disable_node:function(t){var i,n;if(e.isArray(t)){for(t=t.slice(),i=0,n=t.length;i<n;i++)this.disable_node(t[i]);return!0}return t=this.get_node(t),!(!t||t.id===e.jstree.root)&&(t.state.disabled=!0,this.get_node(t,!0).children(".jstree-anchor").addClass("jstree-disabled").attr("aria-disabled",!0),void this.trigger("disable_node",{node:t}))},hide_node:function(t,i){var n,r;if(e.isArray(t)){for(t=t.slice(),n=0,r=t.length;n<r;n++)this.hide_node(t[n],!0);return this.redraw(),!0}return t=this.get_node(t),!(!t||t.id===e.jstree.root)&&void(t.state.hidden||(t.state.hidden=!0,this._node_changed(t.parent),i||this.redraw(),this.trigger("hide_node",{node:t})))},show_node:function(t,i){var n,r;if(e.isArray(t)){for(t=t.slice(),n=0,r=t.length;n<r;n++)this.show_node(t[n],!0);return this.redraw(),!0}return t=this.get_node(t),!(!t||t.id===e.jstree.root)&&void(t.state.hidden&&(t.state.hidden=!1,this._node_changed(t.parent),i||this.redraw(),this.trigger("show_node",{node:t})))},hide_all:function(t){var i,n=this._model.data,r=[];for(i in n)n.hasOwnProperty(i)&&i!==e.jstree.root&&!n[i].state.hidden&&(n[i].state.hidden=!0,r.push(i));return this._model.force_full_redraw=!0,t||this.redraw(),this.trigger("hide_all",{nodes:r}),r},show_all:function(t){var i,n=this._model.data,r=[];for(i in n)n.hasOwnProperty(i)&&i!==e.jstree.root&&n[i].state.hidden&&(n[i].state.hidden=!1,r.push(i));return this._model.force_full_redraw=!0,t||this.redraw(),this.trigger("show_all",{nodes:r}),r},activate_node:function(e,i){if(this.is_disabled(e))return!1;if(i&&"object"==typeof i||(i={}),this._data.core.last_clicked=this._data.core.last_clicked&&this._data.core.last_clicked.id!==t?this.get_node(this._data.core.last_clicked.id):null,this._data.core.last_clicked&&!this._data.core.last_clicked.state.selected&&(this._data.core.last_clicked=null),!this._data.core.last_clicked&&this._data.core.selected.length&&(this._data.core.last_clicked=this.get_node(this._data.core.selected[this._data.core.selected.length-1])),this.settings.core.multiple&&(i.metaKey||i.ctrlKey||i.shiftKey)&&(!i.shiftKey||this._data.core.last_clicked&&this.get_parent(e)&&this.get_parent(e)===this._data.core.last_clicked.parent))if(i.shiftKey){var n,r,s=this.get_node(e).id,a=this._data.core.last_clicked.id,o=this.get_node(this._data.core.last_clicked.parent).children,l=!1;for(n=0,r=o.length;n<r;n+=1)o[n]===s&&(l=!l),o[n]===a&&(l=!l),this.is_disabled(o[n])||!l&&o[n]!==s&&o[n]!==a?this.deselect_node(o[n],!0,i):this.select_node(o[n],!0,!1,i);this.trigger("changed",{action:"select_node",node:this.get_node(e),selected:this._data.core.selected,event:i})}else this.is_selected(e)?this.deselect_node(e,!1,i):this.select_node(e,!1,!1,i);else!this.settings.core.multiple&&(i.metaKey||i.ctrlKey||i.shiftKey)&&this.is_selected(e)?this.deselect_node(e,!1,i):(this.deselect_all(!0),this.select_node(e,!1,!1,i),this._data.core.last_clicked=this.get_node(e));this.trigger("activate_node",{node:this.get_node(e),event:i})},hover_node:function(e){if(e=this.get_node(e,!0),!e||!e.length||e.children(".jstree-hovered").length)return!1;var t=this.element.find(".jstree-hovered"),i=this.element;t&&t.length&&this.dehover_node(t),e.children(".jstree-anchor").addClass("jstree-hovered"),this.trigger("hover_node",{node:this.get_node(e)}),setTimeout(function(){i.attr("aria-activedescendant",e[0].id)},0)},dehover_node:function(e){return e=this.get_node(e,!0),!!(e&&e.length&&e.children(".jstree-hovered").length)&&(e.children(".jstree-anchor").removeClass("jstree-hovered"),void this.trigger("dehover_node",{node:this.get_node(e)}))},select_node:function(t,i,n,r){var s,a,o;if(e.isArray(t)){for(t=t.slice(),a=0,o=t.length;a<o;a++)this.select_node(t[a],i,n,r);return!0}return t=this.get_node(t),!(!t||t.id===e.jstree.root)&&(s=this.get_node(t,!0),void(t.state.selected||(t.state.selected=!0,this._data.core.selected.push(t.id),n||(s=this._open_to(t)),s&&s.length&&s.attr("aria-selected",!0).children(".jstree-anchor").addClass("jstree-clicked"),this.trigger("select_node",{node:t,selected:this._data.core.selected,event:r}),i||this.trigger("changed",{action:"select_node",node:t,selected:this._data.core.selected,event:r}))))},deselect_node:function(t,i,n){var r,s,a;if(e.isArray(t)){for(t=t.slice(),r=0,s=t.length;r<s;r++)this.deselect_node(t[r],i,n);return!0}return t=this.get_node(t),!(!t||t.id===e.jstree.root)&&(a=this.get_node(t,!0),void(t.state.selected&&(t.state.selected=!1,this._data.core.selected=e.vakata.array_remove_item(this._data.core.selected,t.id),a.length&&a.attr("aria-selected",!1).children(".jstree-anchor").removeClass("jstree-clicked"),this.trigger("deselect_node",{node:t,selected:this._data.core.selected,event:n}),i||this.trigger("changed",{action:"deselect_node",node:t,selected:this._data.core.selected,event:n}))))},select_all:function(t){var i,n,r=this._data.core.selected.concat([]);for(this._data.core.selected=this._model.data[e.jstree.root].children_d.concat(),i=0,n=this._data.core.selected.length;i<n;i++)this._model.data[this._data.core.selected[i]]&&(this._model.data[this._data.core.selected[i]].state.selected=!0);this.redraw(!0),this.trigger("select_all",{selected:this._data.core.selected}),t||this.trigger("changed",{action:"select_all",selected:this._data.core.selected,old_selection:r})},deselect_all:function(e){var t,i,n=this._data.core.selected.concat([]);for(t=0,i=this._data.core.selected.length;t<i;t++)this._model.data[this._data.core.selected[t]]&&(this._model.data[this._data.core.selected[t]].state.selected=!1);this._data.core.selected=[],this.element.find(".jstree-clicked").removeClass("jstree-clicked").parent().attr("aria-selected",!1),this.trigger("deselect_all",{selected:this._data.core.selected,node:n}),e||this.trigger("changed",{action:"deselect_all",selected:this._data.core.selected,old_selection:n})},is_selected:function(t){return t=this.get_node(t),!(!t||t.id===e.jstree.root)&&t.state.selected},get_selected:function(t){return t?e.map(this._data.core.selected,e.proxy(function(e){return this.get_node(e)},this)):this._data.core.selected.slice()},get_top_selected:function(t){var i,n,r,s,a=this.get_selected(!0),o={};for(i=0,n=a.length;i<n;i++)o[a[i].id]=a[i];for(i=0,n=a.length;i<n;i++)for(r=0,s=a[i].children_d.length;r<s;r++)o[a[i].children_d[r]]&&delete o[a[i].children_d[r]];a=[];for(i in o)o.hasOwnProperty(i)&&a.push(i);return t?e.map(a,e.proxy(function(e){return this.get_node(e)},this)):a},get_bottom_selected:function(t){var i,n,r=this.get_selected(!0),s=[];for(i=0,n=r.length;i<n;i++)r[i].children.length||s.push(r[i].id);return t?e.map(s,e.proxy(function(e){return this.get_node(e)},this)):s},get_state:function(){var t,i={core:{open:[],scroll:{left:this.element.scrollLeft(),top:this.element.scrollTop()},selected:[]}};for(t in this._model.data)this._model.data.hasOwnProperty(t)&&t!==e.jstree.root&&(this._model.data[t].state.opened&&i.core.open.push(t),this._model.data[t].state.selected&&i.core.selected.push(t));return i},set_state:function(i,n){if(i){if(i.core){var r,s;if(i.core.open)return e.isArray(i.core.open)&&i.core.open.length?this._load_nodes(i.core.open,function(e){this.open_node(e,!1,0),delete i.core.open,this.set_state(i,n)},!0):(delete i.core.open,this.set_state(i,n)),!1;if(i.core.scroll)return i.core.scroll&&i.core.scroll.left!==t&&this.element.scrollLeft(i.core.scroll.left),i.core.scroll&&i.core.scroll.top!==t&&this.element.scrollTop(i.core.scroll.top),delete i.core.scroll,this.set_state(i,n),!1;if(i.core.selected)return r=this,this.deselect_all(),e.each(i.core.selected,function(e,t){r.select_node(t,!1,!0)}),delete i.core.selected,this.set_state(i,n),!1;for(s in i)i.hasOwnProperty(s)&&"core"!==s&&e.inArray(s,this.settings.plugins)===-1&&delete i[s];if(e.isEmptyObject(i.core))return delete i.core,this.set_state(i,n),!1}return!e.isEmptyObject(i)||(i=null,n&&n.call(this),this.trigger("set_state"),!1)}return!1},refresh:function(t,i){this._data.core.state=i===!0?{}:this.get_state(),i&&e.isFunction(i)&&(this._data.core.state=i.call(this,this._data.core.state)),this._cnt=0,this._model.data={},this._model.data[e.jstree.root]={id:e.jstree.root,parent:null,parents:[],children:[],children_d:[],state:{loaded:!1}},this._data.core.selected=[],this._data.core.last_clicked=null,this._data.core.focused=null;var n=this.get_container_ul()[0].className;t||(this.element.html("<ul class='"+n+"' role='group'><li class='jstree-initial-node jstree-loading jstree-leaf jstree-last' role='treeitem' id='j"+this._id+"_loading'><i class='jstree-icon jstree-ocl'></i><a class='jstree-anchor' href='#'><i class='jstree-icon jstree-themeicon-hidden'></i>"+this.get_string("Loading ...")+"</a></li></ul>"),this.element.attr("aria-activedescendant","j"+this._id+"_loading")),this.load_node(e.jstree.root,function(t,i){i&&(this.get_container_ul()[0].className=n,this._firstChild(this.get_container_ul()[0])&&this.element.attr("aria-activedescendant",this._firstChild(this.get_container_ul()[0]).id),this.set_state(e.extend(!0,{},this._data.core.state),function(){this.trigger("refresh")})),this._data.core.state=null})},refresh_node:function(t){if(t=this.get_node(t),!t||t.id===e.jstree.root)return!1;var i=[],n=[];this._data.core.selected.concat([]);n.push(t.id),t.state.opened===!0&&i.push(t.id),this.get_node(t,!0).find(".jstree-open").each(function(){i.push(this.id)}),this._load_nodes(n,e.proxy(function(e){this.open_node(i,!1,0),this.select_node(this._data.core.selected),this.trigger("refresh_node",{node:t,nodes:e})},this))},set_id:function(t,i){if(t=this.get_node(t),!t||t.id===e.jstree.root)return!1;var n,r,s=this._model.data;for(i=i.toString(),s[t.parent].children[e.inArray(t.id,s[t.parent].children)]=i,n=0,r=t.parents.length;n<r;n++)s[t.parents[n]].children_d[e.inArray(t.id,s[t.parents[n]].children_d)]=i;for(n=0,r=t.children.length;n<r;n++)s[t.children[n]].parent=i;for(n=0,r=t.children_d.length;n<r;n++)s[t.children_d[n]].parents[e.inArray(t.id,s[t.children_d[n]].parents)]=i;return n=e.inArray(t.id,this._data.core.selected),n!==-1&&(this._data.core.selected[n]=i),n=this.get_node(t.id,!0),n&&(n.attr("id",i).children(".jstree-anchor").attr("id",i+"_anchor").end().attr("aria-labelledby",i+"_anchor"),this.element.attr("aria-activedescendant")===t.id&&this.element.attr("aria-activedescendant",i)),delete s[t.id],t.id=i,t.li_attr.id=i,s[i]=t,!0},get_text:function(t){return t=this.get_node(t),!(!t||t.id===e.jstree.root)&&t.text},set_text:function(t,i){var n,r;if(e.isArray(t)){for(t=t.slice(),n=0,r=t.length;n<r;n++)this.set_text(t[n],i);return!0}return t=this.get_node(t),!(!t||t.id===e.jstree.root)&&(t.text=i,this.get_node(t,!0).length&&this.redraw_node(t.id),this.trigger("set_text",{obj:t,text:i}),!0)},get_json:function(t,i,n){if(t=this.get_node(t||e.jstree.root),!t)return!1;i&&i.flat&&!n&&(n=[]);var r,s,a={id:t.id,text:t.text,icon:this.get_icon(t),li_attr:e.extend(!0,{},t.li_attr),a_attr:e.extend(!0,{},t.a_attr),state:{},data:(!i||!i.no_data)&&e.extend(!0,{},t.data)};if(i&&i.flat?a.parent=t.parent:a.children=[],!i||!i.no_state)for(r in t.state)t.state.hasOwnProperty(r)&&(a.state[r]=t.state[r]);if(i&&i.no_id&&(delete a.id,a.li_attr&&a.li_attr.id&&delete a.li_attr.id,a.a_attr&&a.a_attr.id&&delete a.a_attr.id),i&&i.flat&&t.id!==e.jstree.root&&n.push(a),!i||!i.no_children)for(r=0,s=t.children.length;r<s;r++)i&&i.flat?this.get_json(t.children[r],i,n):a.children.push(this.get_json(t.children[r],i));return i&&i.flat?n:t.id===e.jstree.root?a.children:a},create_node:function(i,n,r,s,a){if(null===i&&(i=e.jstree.root),i=this.get_node(i),!i)return!1;if(r=r===t?"last":r,!r.toString().match(/^(before|after)$/)&&!a&&!this.is_loaded(i))return this.load_node(i,function(){this.create_node(i,n,r,s,!0)});n||(n={text:this.get_string("New node")}),"string"==typeof n&&(n={text:n}),n.text===t&&(n.text=this.get_string("New node"));var o,l,d,c;switch(i.id===e.jstree.root&&("before"===r&&(r="first"),"after"===r&&(r="last")),r){case"before":o=this.get_node(i.parent),r=e.inArray(i.id,o.children),i=o;break;case"after":o=this.get_node(i.parent),r=e.inArray(i.id,o.children)+1,i=o;break;case"inside":case"first":r=0;break;case"last":r=i.children.length;break;default:r||(r=0)}if(r>i.children.length&&(r=i.children.length),n.id||(n.id=!0),!this.check("create_node",n,i,r))return this.settings.core.error.call(this,this._data.core.last_error),!1;if(n.id===!0&&delete n.id,n=this._parse_model_from_json(n,i.id,i.parents.concat()),!n)return!1;for(o=this.get_node(n),l=[],l.push(n),l=l.concat(o.children_d),this.trigger("model",{nodes:l,parent:i.id}),i.children_d=i.children_d.concat(l),d=0,c=i.parents.length;d<c;d++)this._model.data[i.parents[d]].children_d=this._model.data[i.parents[d]].children_d.concat(l);for(n=o,o=[],d=0,c=i.children.length;d<c;d++)o[d>=r?d+1:d]=i.children[d];return o[r]=n.id,i.children=o,this.redraw_node(i,!0),s&&s.call(this,this.get_node(n)),this.trigger("create_node",{node:this.get_node(n),parent:i.id,position:r}),n.id},rename_node:function(t,i){var n,r,s;if(e.isArray(t)){for(t=t.slice(),n=0,r=t.length;n<r;n++)this.rename_node(t[n],i);return!0}return t=this.get_node(t),!(!t||t.id===e.jstree.root)&&(s=t.text,this.check("rename_node",t,this.get_parent(t),i)?(this.set_text(t,i),this.trigger("rename_node",{node:t,text:i,old:s}),!0):(this.settings.core.error.call(this,this._data.core.last_error),!1))},delete_node:function(t){var i,n,r,s,a,o,l,d,c,h,u,f;if(e.isArray(t)){for(t=t.slice(),i=0,n=t.length;i<n;i++)this.delete_node(t[i]);return!0}if(t=this.get_node(t),!t||t.id===e.jstree.root)return!1;if(r=this.get_node(t.parent),s=e.inArray(t.id,r.children),h=!1,!this.check("delete_node",t,r,s))return this.settings.core.error.call(this,this._data.core.last_error),!1;for(s!==-1&&(r.children=e.vakata.array_remove(r.children,s)),a=t.children_d.concat([]),a.push(t.id),d=0,c=a.length;d<c;d++){for(o=0,l=t.parents.length;o<l;o++)s=e.inArray(a[d],this._model.data[t.parents[o]].children_d),s!==-1&&(this._model.data[t.parents[o]].children_d=e.vakata.array_remove(this._model.data[t.parents[o]].children_d,s));this._model.data[a[d]].state.selected&&(h=!0,s=e.inArray(a[d],this._data.core.selected),s!==-1&&(this._data.core.selected=e.vakata.array_remove(this._data.core.selected,s)))}for(this.trigger("delete_node",{node:t,parent:r.id}),h&&this.trigger("changed",{action:"delete_node",node:t,selected:this._data.core.selected,parent:r.id}),d=0,c=a.length;d<c;d++)delete this._model.data[a[d]];return e.inArray(this._data.core.focused,a)!==-1&&(this._data.core.focused=null,u=this.element[0].scrollTop,f=this.element[0].scrollLeft,r.id===e.jstree.root?this.get_node(this._model.data[e.jstree.root].children[0],!0).children(".jstree-anchor").focus():this.get_node(r,!0).children(".jstree-anchor").focus(),this.element[0].scrollTop=u,this.element[0].scrollLeft=f),this.redraw_node(r,!0),!0},check:function(t,i,n,r,s){i=i&&i.id?i:this.get_node(i),n=n&&n.id?n:this.get_node(n);var a=t.match(/^move_node|copy_node|create_node$/i)?n:i,o=this.settings.core.check_callback;return"move_node"!==t&&"copy_node"!==t||s&&s.is_multi||i.id!==n.id&&e.inArray(i.id,n.children)!==r&&e.inArray(n.id,i.children_d)===-1?(a&&a.data&&(a=a.data),a&&a.functions&&(a.functions[t]===!1||a.functions[t]===!0)?(a.functions[t]===!1&&(this._data.core.last_error={error:"check",plugin:"core",id:"core_02",reason:"Node data prevents function: "+t,data:JSON.stringify({chk:t,pos:r,obj:!(!i||!i.id)&&i.id,par:!(!n||!n.id)&&n.id})}),a.functions[t]):!(o===!1||e.isFunction(o)&&o.call(this,t,i,n,r,s)===!1||o&&o[t]===!1)||(this._data.core.last_error={error:"check",plugin:"core",id:"core_03",reason:"User config for core.check_callback prevents function: "+t,data:JSON.stringify({chk:t,pos:r,obj:!(!i||!i.id)&&i.id,par:!(!n||!n.id)&&n.id
})},!1)):(this._data.core.last_error={error:"check",plugin:"core",id:"core_01",reason:"Moving parent inside child",data:JSON.stringify({chk:t,pos:r,obj:!(!i||!i.id)&&i.id,par:!(!n||!n.id)&&n.id})},!1)},last_error:function(){return this._data.core.last_error},move_node:function(i,n,r,s,a,o,l){var d,c,h,u,f,g,_,p,m,v,y,x,b,w;if(n=this.get_node(n),r=r===t?0:r,!n)return!1;if(!r.toString().match(/^(before|after)$/)&&!a&&!this.is_loaded(n))return this.load_node(n,function(){this.move_node(i,n,r,s,!0,!1,l)});if(e.isArray(i)){if(1!==i.length){for(d=0,c=i.length;d<c;d++)(m=this.move_node(i[d],n,r,s,a,!1,l))&&(n=m,r="after");return this.redraw(),!0}i=i[0]}if(i=i&&i.id?i:this.get_node(i),!i||i.id===e.jstree.root)return!1;if(h=(i.parent||e.jstree.root).toString(),f=r.toString().match(/^(before|after)$/)&&n.id!==e.jstree.root?this.get_node(n.parent):n,g=l?l:this._model.data[i.id]?this:e.jstree.reference(i.id),_=!g||!g._id||this._id!==g._id,u=g&&g._id&&h&&g._model.data[h]&&g._model.data[h].children?e.inArray(i.id,g._model.data[h].children):-1,g&&g._id&&(i=g._model.data[i.id]),_)return!!(m=this.copy_node(i,n,r,s,a,!1,l))&&(g&&g.delete_node(i),m);switch(n.id===e.jstree.root&&("before"===r&&(r="first"),"after"===r&&(r="last")),r){case"before":r=e.inArray(n.id,f.children);break;case"after":r=e.inArray(n.id,f.children)+1;break;case"inside":case"first":r=0;break;case"last":r=f.children.length;break;default:r||(r=0)}if(r>f.children.length&&(r=f.children.length),!this.check("move_node",i,f,r,{core:!0,origin:l,is_multi:g&&g._id&&g._id!==this._id,is_foreign:!g||!g._id}))return this.settings.core.error.call(this,this._data.core.last_error),!1;if(i.parent===f.id){for(p=f.children.concat(),m=e.inArray(i.id,p),m!==-1&&(p=e.vakata.array_remove(p,m),r>m&&r--),m=[],v=0,y=p.length;v<y;v++)m[v>=r?v+1:v]=p[v];m[r]=i.id,f.children=m,this._node_changed(f.id),this.redraw(f.id===e.jstree.root)}else{for(m=i.children_d.concat(),m.push(i.id),v=0,y=i.parents.length;v<y;v++){for(p=[],w=g._model.data[i.parents[v]].children_d,x=0,b=w.length;x<b;x++)e.inArray(w[x],m)===-1&&p.push(w[x]);g._model.data[i.parents[v]].children_d=p}for(g._model.data[h].children=e.vakata.array_remove_item(g._model.data[h].children,i.id),v=0,y=f.parents.length;v<y;v++)this._model.data[f.parents[v]].children_d=this._model.data[f.parents[v]].children_d.concat(m);for(p=[],v=0,y=f.children.length;v<y;v++)p[v>=r?v+1:v]=f.children[v];for(p[r]=i.id,f.children=p,f.children_d.push(i.id),f.children_d=f.children_d.concat(i.children_d),i.parent=f.id,m=f.parents.concat(),m.unshift(f.id),w=i.parents.length,i.parents=m,m=m.concat(),v=0,y=i.children_d.length;v<y;v++)this._model.data[i.children_d[v]].parents=this._model.data[i.children_d[v]].parents.slice(0,w*-1),Array.prototype.push.apply(this._model.data[i.children_d[v]].parents,m);h!==e.jstree.root&&f.id!==e.jstree.root||(this._model.force_full_redraw=!0),this._model.force_full_redraw||(this._node_changed(h),this._node_changed(f.id)),o||this.redraw()}return s&&s.call(this,i,f,r),this.trigger("move_node",{node:i,parent:f.id,position:r,old_parent:h,old_position:u,is_multi:g&&g._id&&g._id!==this._id,is_foreign:!g||!g._id,old_instance:g,new_instance:this}),i.id},copy_node:function(i,n,r,s,a,o,l){var d,c,h,u,f,g,_,p,m,v,y;if(n=this.get_node(n),r=r===t?0:r,!n)return!1;if(!r.toString().match(/^(before|after)$/)&&!a&&!this.is_loaded(n))return this.load_node(n,function(){this.copy_node(i,n,r,s,!0,!1,l)});if(e.isArray(i)){if(1!==i.length){for(d=0,c=i.length;d<c;d++)(u=this.copy_node(i[d],n,r,s,a,!0,l))&&(n=u,r="after");return this.redraw(),!0}i=i[0]}if(i=i&&i.id?i:this.get_node(i),!i||i.id===e.jstree.root)return!1;switch(p=(i.parent||e.jstree.root).toString(),m=r.toString().match(/^(before|after)$/)&&n.id!==e.jstree.root?this.get_node(n.parent):n,v=l?l:this._model.data[i.id]?this:e.jstree.reference(i.id),y=!v||!v._id||this._id!==v._id,v&&v._id&&(i=v._model.data[i.id]),n.id===e.jstree.root&&("before"===r&&(r="first"),"after"===r&&(r="last")),r){case"before":r=e.inArray(n.id,m.children);break;case"after":r=e.inArray(n.id,m.children)+1;break;case"inside":case"first":r=0;break;case"last":r=m.children.length;break;default:r||(r=0)}if(r>m.children.length&&(r=m.children.length),!this.check("copy_node",i,m,r,{core:!0,origin:l,is_multi:v&&v._id&&v._id!==this._id,is_foreign:!v||!v._id}))return this.settings.core.error.call(this,this._data.core.last_error),!1;if(_=v?v.get_json(i,{no_id:!0,no_data:!0,no_state:!0}):i,!_)return!1;if(_.id===!0&&delete _.id,_=this._parse_model_from_json(_,m.id,m.parents.concat()),!_)return!1;for(u=this.get_node(_),i&&i.state&&i.state.loaded===!1&&(u.state.loaded=!1),h=[],h.push(_),h=h.concat(u.children_d),this.trigger("model",{nodes:h,parent:m.id}),f=0,g=m.parents.length;f<g;f++)this._model.data[m.parents[f]].children_d=this._model.data[m.parents[f]].children_d.concat(h);for(h=[],f=0,g=m.children.length;f<g;f++)h[f>=r?f+1:f]=m.children[f];return h[r]=u.id,m.children=h,m.children_d.push(u.id),m.children_d=m.children_d.concat(u.children_d),m.id===e.jstree.root&&(this._model.force_full_redraw=!0),this._model.force_full_redraw||this._node_changed(m.id),o||this.redraw(m.id===e.jstree.root),s&&s.call(this,u,m,r),this.trigger("copy_node",{node:u,original:i,parent:m.id,position:r,old_parent:p,old_position:v&&v._id&&p&&v._model.data[p]&&v._model.data[p].children?e.inArray(i.id,v._model.data[p].children):-1,is_multi:v&&v._id&&v._id!==this._id,is_foreign:!v||!v._id,old_instance:v,new_instance:this}),u.id},cut:function(t){if(t||(t=this._data.core.selected.concat()),e.isArray(t)||(t=[t]),!t.length)return!1;var i,n,r,l=[];for(n=0,r=t.length;n<r;n++)i=this.get_node(t[n]),i&&i.id&&i.id!==e.jstree.root&&l.push(i);return!!l.length&&(s=l,o=this,a="move_node",void this.trigger("cut",{node:t}))},copy:function(t){if(t||(t=this._data.core.selected.concat()),e.isArray(t)||(t=[t]),!t.length)return!1;var i,n,r,l=[];for(n=0,r=t.length;n<r;n++)i=this.get_node(t[n]),i&&i.id&&i.id!==e.jstree.root&&l.push(i);return!!l.length&&(s=l,o=this,a="copy_node",void this.trigger("copy",{node:t}))},get_buffer:function(){return{mode:a,node:s,inst:o}},can_paste:function(){return a!==!1&&s!==!1},paste:function(e,t){return e=this.get_node(e),!!(e&&a&&a.match(/^(copy_node|move_node)$/)&&s)&&(this[a](s,e,t,!1,!1,!1,o)&&this.trigger("paste",{parent:e.id,node:s,mode:a}),s=!1,a=!1,void(o=!1))},clear_buffer:function(){s=!1,a=!1,o=!1,this.trigger("clear_buffer")},edit:function(t,i,n){var r,s,a,o,l,d,c,h,u,f=!1;return!!(t=this.get_node(t))&&(this.settings.core.check_callback===!1?(this._data.core.last_error={error:"check",plugin:"core",id:"core_07",reason:"Could not edit node because of check_callback"},this.settings.core.error.call(this,this._data.core.last_error),!1):(u=t,i="string"==typeof i?i:t.text,this.set_text(t,""),t=this._open_to(t),u.text=i,r=this._data.core.rtl,s=this.element.width(),this._data.core.focused=u.id,a=t.children(".jstree-anchor").focus(),o=e("<span>"),l=i,d=e("<div />",{css:{position:"absolute",top:"-200px",left:r?"0px":"-1000px",visibility:"hidden"}}).appendTo("body"),c=e("<input />",{value:l,class:"jstree-rename-input",css:{padding:"0",border:"1px solid silver","box-sizing":"border-box",display:"inline-block",height:this._data.core.li_height+"px",lineHeight:this._data.core.li_height+"px",width:"150px"},blur:e.proxy(function(i){i.stopImmediatePropagation(),i.preventDefault();var r,s=o.children(".jstree-rename-input"),c=s.val(),h=this.settings.core.force_text;""===c&&(c=l),d.remove(),o.replaceWith(a),o.remove(),l=h?l:e("<div></div>").append(e.parseHTML(l)).html(),this.set_text(t,l),r=!!this.rename_node(t,h?e("<div></div>").text(c).text():e("<div></div>").append(e.parseHTML(c)).html()),r||this.set_text(t,l),this._data.core.focused=u.id,setTimeout(e.proxy(function(){var e=this.get_node(u.id,!0);e.length&&(this._data.core.focused=u.id,e.children(".jstree-anchor").focus())},this),0),n&&n.call(this,u,r,f)},this),keydown:function(e){var t=e.which;27===t&&(f=!0,this.value=l),27!==t&&13!==t&&37!==t&&38!==t&&39!==t&&40!==t&&32!==t||e.stopImmediatePropagation(),27!==t&&13!==t||(e.preventDefault(),this.blur())},click:function(e){e.stopImmediatePropagation()},mousedown:function(e){e.stopImmediatePropagation()},keyup:function(e){c.width(Math.min(d.text("pW"+this.value).width(),s))},keypress:function(e){if(13===e.which)return!1}}),h={fontFamily:a.css("fontFamily")||"",fontSize:a.css("fontSize")||"",fontWeight:a.css("fontWeight")||"",fontStyle:a.css("fontStyle")||"",fontStretch:a.css("fontStretch")||"",fontVariant:a.css("fontVariant")||"",letterSpacing:a.css("letterSpacing")||"",wordSpacing:a.css("wordSpacing")||""},o.attr("class",a.attr("class")).append(a.contents().clone()).append(c),a.replaceWith(o),d.css(h),void c.css(h).width(Math.min(d.text("pW"+c[0].value).width(),s))[0].select()))},set_theme:function(t,i){if(!t)return!1;if(i===!0){var n=this.settings.core.themes.dir;n||(n=e.jstree.path+"/themes"),i=n+"/"+t+"/style.css"}i&&e.inArray(i,l)===-1&&(e("head").append('<link rel="stylesheet" href="'+i+'" type="text/css" />'),l.push(i)),this._data.core.themes.name&&this.element.removeClass("jstree-"+this._data.core.themes.name),this._data.core.themes.name=t,this.element.addClass("jstree-"+t),this.element[this.settings.core.themes.responsive?"addClass":"removeClass"]("jstree-"+t+"-responsive"),this.trigger("set_theme",{theme:t})},get_theme:function(){return this._data.core.themes.name},set_theme_variant:function(e){this._data.core.themes.variant&&this.element.removeClass("jstree-"+this._data.core.themes.name+"-"+this._data.core.themes.variant),this._data.core.themes.variant=e,e&&this.element.addClass("jstree-"+this._data.core.themes.name+"-"+this._data.core.themes.variant)},get_theme_variant:function(){return this._data.core.themes.variant},show_stripes:function(){this._data.core.themes.stripes=!0,this.get_container_ul().addClass("jstree-striped")},hide_stripes:function(){this._data.core.themes.stripes=!1,this.get_container_ul().removeClass("jstree-striped")},toggle_stripes:function(){this._data.core.themes.stripes?this.hide_stripes():this.show_stripes()},show_dots:function(){this._data.core.themes.dots=!0,this.get_container_ul().removeClass("jstree-no-dots")},hide_dots:function(){this._data.core.themes.dots=!1,this.get_container_ul().addClass("jstree-no-dots")},toggle_dots:function(){this._data.core.themes.dots?this.hide_dots():this.show_dots()},show_icons:function(){this._data.core.themes.icons=!0,this.get_container_ul().removeClass("jstree-no-icons")},hide_icons:function(){this._data.core.themes.icons=!1,this.get_container_ul().addClass("jstree-no-icons")},toggle_icons:function(){this._data.core.themes.icons?this.hide_icons():this.show_icons()},set_icon:function(i,n){var r,s,a,o;if(e.isArray(i)){for(i=i.slice(),r=0,s=i.length;r<s;r++)this.set_icon(i[r],n);return!0}return i=this.get_node(i),!(!i||i.id===e.jstree.root)&&(o=i.icon,i.icon=n===!0||null===n||n===t||""===n||n,a=this.get_node(i,!0).children(".jstree-anchor").children(".jstree-themeicon"),n===!1?this.hide_icon(i):n===!0||null===n||n===t||""===n?(a.removeClass("jstree-themeicon-custom "+o).css("background","").removeAttr("rel"),o===!1&&this.show_icon(i)):n.indexOf("/")===-1&&n.indexOf(".")===-1?(a.removeClass(o).css("background",""),a.addClass(n+" jstree-themeicon-custom").attr("rel",n),o===!1&&this.show_icon(i)):(a.removeClass(o).css("background",""),a.addClass("jstree-themeicon-custom").css("background","url('"+n+"') center center no-repeat").attr("rel",n),o===!1&&this.show_icon(i)),!0)},get_icon:function(t){return t=this.get_node(t),!(!t||t.id===e.jstree.root)&&t.icon},hide_icon:function(t){var i,n;if(e.isArray(t)){for(t=t.slice(),i=0,n=t.length;i<n;i++)this.hide_icon(t[i]);return!0}return t=this.get_node(t),!(!t||t===e.jstree.root)&&(t.icon=!1,this.get_node(t,!0).children(".jstree-anchor").children(".jstree-themeicon").addClass("jstree-themeicon-hidden"),!0)},show_icon:function(t){var i,n,r;if(e.isArray(t)){for(t=t.slice(),i=0,n=t.length;i<n;i++)this.show_icon(t[i]);return!0}return t=this.get_node(t),!(!t||t===e.jstree.root)&&(r=this.get_node(t,!0),t.icon=!r.length||r.children(".jstree-anchor").children(".jstree-themeicon").attr("rel"),t.icon||(t.icon=!0),r.children(".jstree-anchor").children(".jstree-themeicon").removeClass("jstree-themeicon-hidden"),!0)}},e.vakata={},e.vakata.attributes=function(t,i){t=e(t)[0];var n=i?{}:[];return t&&t.attributes&&e.each(t.attributes,function(t,r){e.inArray(r.name.toLowerCase(),["style","contenteditable","hasfocus","tabindex"])===-1&&null!==r.value&&""!==e.trim(r.value)&&(i?n[r.name]=r.value:n.push(r.name))}),n},e.vakata.array_unique=function(e){var i,n,r=[],s={};for(i=0,n=e.length;i<n;i++)s[e[i]]===t&&(r.push(e[i]),s[e[i]]=!0);return r},e.vakata.array_remove=function(e,t,i){var n=e.slice((i||t)+1||e.length);return e.length=t<0?e.length+t:t,e.push.apply(e,n),e},e.vakata.array_remove_item=function(t,i){var n=e.inArray(i,t);return n!==-1?e.vakata.array_remove(t,n):t},e.jstree.plugins.changed=function(e,t){var i=[];this.trigger=function(e,n){var r,s;if(n||(n={}),"changed"===e.replace(".jstree","")){n.changed={selected:[],deselected:[]};var a={};for(r=0,s=i.length;r<s;r++)a[i[r]]=1;for(r=0,s=n.selected.length;r<s;r++)a[n.selected[r]]?a[n.selected[r]]=2:n.changed.selected.push(n.selected[r]);for(r=0,s=i.length;r<s;r++)1===a[i[r]]&&n.changed.deselected.push(i[r]);i=n.selected.slice()}t.trigger.call(this,e,n)},this.refresh=function(e,n){return i=[],t.refresh.apply(this,arguments)}};var u=c.createElement("I");u.className="jstree-icon jstree-checkbox",u.setAttribute("role","presentation"),e.jstree.defaults.checkbox={visible:!0,three_state:!0,whole_node:!0,keep_selected_style:!0,cascade:"",tie_selection:!0},e.jstree.plugins.checkbox=function(i,n){this.bind=function(){n.bind.call(this),this._data.checkbox.uto=!1,this._data.checkbox.selected=[],this.settings.checkbox.three_state&&(this.settings.checkbox.cascade="up+down+undetermined"),this.element.on("init.jstree",e.proxy(function(){this._data.checkbox.visible=this.settings.checkbox.visible,this.settings.checkbox.keep_selected_style||this.element.addClass("jstree-checkbox-no-clicked"),this.settings.checkbox.tie_selection&&this.element.addClass("jstree-checkbox-selection")},this)).on("loading.jstree",e.proxy(function(){this[this._data.checkbox.visible?"show_checkboxes":"hide_checkboxes"]()},this)),this.settings.checkbox.cascade.indexOf("undetermined")!==-1&&this.element.on("changed.jstree uncheck_node.jstree check_node.jstree uncheck_all.jstree check_all.jstree move_node.jstree copy_node.jstree redraw.jstree open_node.jstree",e.proxy(function(){this._data.checkbox.uto&&clearTimeout(this._data.checkbox.uto),this._data.checkbox.uto=setTimeout(e.proxy(this._undetermined,this),50)},this)),this.settings.checkbox.tie_selection||this.element.on("model.jstree",e.proxy(function(e,t){var i,n,r=this._model.data,s=(r[t.parent],t.nodes);for(i=0,n=s.length;i<n;i++)r[s[i]].state.checked=r[s[i]].state.checked||r[s[i]].original&&r[s[i]].original.state&&r[s[i]].original.state.checked,r[s[i]].state.checked&&this._data.checkbox.selected.push(s[i])},this)),this.settings.checkbox.cascade.indexOf("up")===-1&&this.settings.checkbox.cascade.indexOf("down")===-1||this.element.on("model.jstree",e.proxy(function(t,i){var n,r,s,a,o,l,d=this._model.data,c=d[i.parent],h=i.nodes,u=[],f=this.settings.checkbox.cascade,g=this.settings.checkbox.tie_selection;if(f.indexOf("down")!==-1)if(c.state[g?"selected":"checked"]){for(r=0,s=h.length;r<s;r++)d[h[r]].state[g?"selected":"checked"]=!0;this._data[g?"core":"checkbox"].selected=this._data[g?"core":"checkbox"].selected.concat(h)}else for(r=0,s=h.length;r<s;r++)if(d[h[r]].state[g?"selected":"checked"]){for(a=0,o=d[h[r]].children_d.length;a<o;a++)d[d[h[r]].children_d[a]].state[g?"selected":"checked"]=!0;this._data[g?"core":"checkbox"].selected=this._data[g?"core":"checkbox"].selected.concat(d[h[r]].children_d)}if(f.indexOf("up")!==-1){for(r=0,s=c.children_d.length;r<s;r++)d[c.children_d[r]].children.length||u.push(d[c.children_d[r]].parent);for(u=e.vakata.array_unique(u),a=0,o=u.length;a<o;a++)for(c=d[u[a]];c&&c.id!==e.jstree.root;){for(n=0,r=0,s=c.children.length;r<s;r++)n+=d[c.children[r]].state[g?"selected":"checked"];if(n!==s)break;c.state[g?"selected":"checked"]=!0,this._data[g?"core":"checkbox"].selected.push(c.id),l=this.get_node(c,!0),l&&l.length&&l.attr("aria-selected",!0).children(".jstree-anchor").addClass(g?"jstree-clicked":"jstree-checked"),c=this.get_node(c.parent)}}this._data[g?"core":"checkbox"].selected=e.vakata.array_unique(this._data[g?"core":"checkbox"].selected)},this)).on(this.settings.checkbox.tie_selection?"select_node.jstree":"check_node.jstree",e.proxy(function(t,i){var n,r,s,a,o=i.node,l=this._model.data,d=this.get_node(o.parent),c=this.get_node(o,!0),h=this.settings.checkbox.cascade,u=this.settings.checkbox.tie_selection;if(h.indexOf("down")!==-1)for(this._data[u?"core":"checkbox"].selected=e.vakata.array_unique(this._data[u?"core":"checkbox"].selected.concat(o.children_d)),n=0,r=o.children_d.length;n<r;n++)a=l[o.children_d[n]],a.state[u?"selected":"checked"]=!0,a&&a.original&&a.original.state&&a.original.state.undetermined&&(a.original.state.undetermined=!1);if(h.indexOf("up")!==-1)for(;d&&d.id!==e.jstree.root;){for(s=0,n=0,r=d.children.length;n<r;n++)s+=l[d.children[n]].state[u?"selected":"checked"];if(s!==r)break;d.state[u?"selected":"checked"]=!0,this._data[u?"core":"checkbox"].selected.push(d.id),a=this.get_node(d,!0),a&&a.length&&a.attr("aria-selected",!0).children(".jstree-anchor").addClass(u?"jstree-clicked":"jstree-checked"),d=this.get_node(d.parent)}h.indexOf("down")!==-1&&c.length&&c.find(".jstree-anchor").addClass(u?"jstree-clicked":"jstree-checked").parent().attr("aria-selected",!0)},this)).on(this.settings.checkbox.tie_selection?"deselect_all.jstree":"uncheck_all.jstree",e.proxy(function(t,i){var n,r,s,a=this.get_node(e.jstree.root),o=this._model.data;for(n=0,r=a.children_d.length;n<r;n++)s=o[a.children_d[n]],s&&s.original&&s.original.state&&s.original.state.undetermined&&(s.original.state.undetermined=!1)},this)).on(this.settings.checkbox.tie_selection?"deselect_node.jstree":"uncheck_node.jstree",e.proxy(function(t,i){var n,r,s,a=i.node,o=this.get_node(a,!0),l=this.settings.checkbox.cascade,d=this.settings.checkbox.tie_selection;if(a&&a.original&&a.original.state&&a.original.state.undetermined&&(a.original.state.undetermined=!1),l.indexOf("down")!==-1)for(n=0,r=a.children_d.length;n<r;n++)s=this._model.data[a.children_d[n]],s.state[d?"selected":"checked"]=!1,s&&s.original&&s.original.state&&s.original.state.undetermined&&(s.original.state.undetermined=!1);if(l.indexOf("up")!==-1)for(n=0,r=a.parents.length;n<r;n++)s=this._model.data[a.parents[n]],s.state[d?"selected":"checked"]=!1,s&&s.original&&s.original.state&&s.original.state.undetermined&&(s.original.state.undetermined=!1),s=this.get_node(a.parents[n],!0),s&&s.length&&s.attr("aria-selected",!1).children(".jstree-anchor").removeClass(d?"jstree-clicked":"jstree-checked");for(s=[],n=0,r=this._data[d?"core":"checkbox"].selected.length;n<r;n++)l.indexOf("down")!==-1&&e.inArray(this._data[d?"core":"checkbox"].selected[n],a.children_d)!==-1||l.indexOf("up")!==-1&&e.inArray(this._data[d?"core":"checkbox"].selected[n],a.parents)!==-1||s.push(this._data[d?"core":"checkbox"].selected[n]);this._data[d?"core":"checkbox"].selected=e.vakata.array_unique(s),l.indexOf("down")!==-1&&o.length&&o.find(".jstree-anchor").removeClass(d?"jstree-clicked":"jstree-checked").parent().attr("aria-selected",!1)},this)),this.settings.checkbox.cascade.indexOf("up")!==-1&&this.element.on("delete_node.jstree",e.proxy(function(t,i){for(var n,r,s,a,o=this.get_node(i.parent),l=this._model.data,d=this.settings.checkbox.tie_selection;o&&o.id!==e.jstree.root&&!o.state[d?"selected":"checked"];){for(s=0,n=0,r=o.children.length;n<r;n++)s+=l[o.children[n]].state[d?"selected":"checked"];if(!(r>0&&s===r))break;o.state[d?"selected":"checked"]=!0,this._data[d?"core":"checkbox"].selected.push(o.id),a=this.get_node(o,!0),a&&a.length&&a.attr("aria-selected",!0).children(".jstree-anchor").addClass(d?"jstree-clicked":"jstree-checked"),o=this.get_node(o.parent)}},this)).on("move_node.jstree",e.proxy(function(t,i){var n,r,s,a,o,l=i.is_multi,d=i.old_parent,c=this.get_node(i.parent),h=this._model.data,u=this.settings.checkbox.tie_selection;if(!l)for(n=this.get_node(d);n&&n.id!==e.jstree.root&&!n.state[u?"selected":"checked"];){for(r=0,s=0,a=n.children.length;s<a;s++)r+=h[n.children[s]].state[u?"selected":"checked"];if(!(a>0&&r===a))break;n.state[u?"selected":"checked"]=!0,this._data[u?"core":"checkbox"].selected.push(n.id),o=this.get_node(n,!0),o&&o.length&&o.attr("aria-selected",!0).children(".jstree-anchor").addClass(u?"jstree-clicked":"jstree-checked"),n=this.get_node(n.parent)}for(n=c;n&&n.id!==e.jstree.root;){for(r=0,s=0,a=n.children.length;s<a;s++)r+=h[n.children[s]].state[u?"selected":"checked"];if(r===a)n.state[u?"selected":"checked"]||(n.state[u?"selected":"checked"]=!0,this._data[u?"core":"checkbox"].selected.push(n.id),o=this.get_node(n,!0),o&&o.length&&o.attr("aria-selected",!0).children(".jstree-anchor").addClass(u?"jstree-clicked":"jstree-checked"));else{if(!n.state[u?"selected":"checked"])break;n.state[u?"selected":"checked"]=!1,this._data[u?"core":"checkbox"].selected=e.vakata.array_remove_item(this._data[u?"core":"checkbox"].selected,n.id),o=this.get_node(n,!0),o&&o.length&&o.attr("aria-selected",!1).children(".jstree-anchor").removeClass(u?"jstree-clicked":"jstree-checked")}n=this.get_node(n.parent)}},this))},this._undetermined=function(){if(null!==this.element){var i,n,r,s,a={},o=this._model.data,l=this.settings.checkbox.tie_selection,d=this._data[l?"core":"checkbox"].selected,c=[],h=this;for(i=0,n=d.length;i<n;i++)if(o[d[i]]&&o[d[i]].parents)for(r=0,s=o[d[i]].parents.length;r<s;r++)a[o[d[i]].parents[r]]===t&&o[d[i]].parents[r]!==e.jstree.root&&(a[o[d[i]].parents[r]]=!0,c.push(o[d[i]].parents[r]));for(this.element.find(".jstree-closed").not(":has(.jstree-children)").each(function(){var l,d=h.get_node(this);if(d.state.loaded){for(i=0,n=d.children_d.length;i<n;i++)if(l=o[d.children_d[i]],!l.state.loaded&&l.original&&l.original.state&&l.original.state.undetermined&&l.original.state.undetermined===!0)for(a[l.id]===t&&l.id!==e.jstree.root&&(a[l.id]=!0,c.push(l.id)),r=0,s=l.parents.length;r<s;r++)a[l.parents[r]]===t&&l.parents[r]!==e.jstree.root&&(a[l.parents[r]]=!0,c.push(l.parents[r]))}else if(d.original&&d.original.state&&d.original.state.undetermined&&d.original.state.undetermined===!0)for(a[d.id]===t&&d.id!==e.jstree.root&&(a[d.id]=!0,c.push(d.id)),r=0,s=d.parents.length;r<s;r++)a[d.parents[r]]===t&&d.parents[r]!==e.jstree.root&&(a[d.parents[r]]=!0,c.push(d.parents[r]))}),this.element.find(".jstree-undetermined").removeClass("jstree-undetermined"),i=0,n=c.length;i<n;i++)o[c[i]].state[l?"selected":"checked"]||(d=this.get_node(c[i],!0),d&&d.length&&d.children(".jstree-anchor").children(".jstree-checkbox").addClass("jstree-undetermined"))}},this.redraw_node=function(t,i,r,s){if(t=n.redraw_node.apply(this,arguments)){var a,o,l=null,d=null;for(a=0,o=t.childNodes.length;a<o;a++)if(t.childNodes[a]&&t.childNodes[a].className&&t.childNodes[a].className.indexOf("jstree-anchor")!==-1){l=t.childNodes[a];break}l&&(!this.settings.checkbox.tie_selection&&this._model.data[t.id].state.checked&&(l.className+=" jstree-checked"),d=u.cloneNode(!1),this._model.data[t.id].state.checkbox_disabled&&(d.className+=" jstree-checkbox-disabled"),l.insertBefore(d,l.childNodes[0]))}return r||this.settings.checkbox.cascade.indexOf("undetermined")===-1||(this._data.checkbox.uto&&clearTimeout(this._data.checkbox.uto),this._data.checkbox.uto=setTimeout(e.proxy(this._undetermined,this),50)),t},this.show_checkboxes=function(){this._data.core.themes.checkboxes=!0,this.get_container_ul().removeClass("jstree-no-checkboxes")},this.hide_checkboxes=function(){this._data.core.themes.checkboxes=!1,this.get_container_ul().addClass("jstree-no-checkboxes")},this.toggle_checkboxes=function(){this._data.core.themes.checkboxes?this.hide_checkboxes():this.show_checkboxes()},this.is_undetermined=function(t){t=this.get_node(t);var i,n,r=this.settings.checkbox.cascade,s=this.settings.checkbox.tie_selection,a=this._data[s?"core":"checkbox"].selected,o=this._model.data;if(!t||t.state[s?"selected":"checked"]===!0||r.indexOf("undetermined")===-1||r.indexOf("down")===-1&&r.indexOf("up")===-1)return!1;if(!t.state.loaded&&t.original.state.undetermined===!0)return!0;for(i=0,n=t.children_d.length;i<n;i++)if(e.inArray(t.children_d[i],a)!==-1||!o[t.children_d[i]].state.loaded&&o[t.children_d[i]].original.state.undetermined)return!0;return!1},this.disable_checkbox=function(t){var i,n,r;if(e.isArray(t)){for(t=t.slice(),i=0,n=t.length;i<n;i++)this.disable_checkbox(t[i]);return!0}return t=this.get_node(t),!(!t||t.id===e.jstree.root)&&(r=this.get_node(t,!0),void(t.state.checkbox_disabled||(t.state.checkbox_disabled=!0,r&&r.length&&r.children(".jstree-anchor").children(".jstree-checkbox").addClass("jstree-checkbox-disabled"),this.trigger("disable_checkbox",{node:t}))))},this.enable_checkbox=function(t){var i,n,r;if(e.isArray(t)){for(t=t.slice(),i=0,n=t.length;i<n;i++)this.enable_checkbox(t[i]);return!0}return t=this.get_node(t),!(!t||t.id===e.jstree.root)&&(r=this.get_node(t,!0),void(t.state.checkbox_disabled&&(t.state.checkbox_disabled=!1,r&&r.length&&r.children(".jstree-anchor").children(".jstree-checkbox").removeClass("jstree-checkbox-disabled"),this.trigger("enable_checkbox",{node:t}))))},this.activate_node=function(t,i){return!e(i.target).hasClass("jstree-checkbox-disabled")&&(this.settings.checkbox.tie_selection&&(this.settings.checkbox.whole_node||e(i.target).hasClass("jstree-checkbox"))&&(i.ctrlKey=!0),this.settings.checkbox.tie_selection||!this.settings.checkbox.whole_node&&!e(i.target).hasClass("jstree-checkbox")?n.activate_node.call(this,t,i):!this.is_disabled(t)&&(this.is_checked(t)?this.uncheck_node(t,i):this.check_node(t,i),void this.trigger("activate_node",{node:this.get_node(t)})))},this.check_node=function(t,i){if(this.settings.checkbox.tie_selection)return this.select_node(t,!1,!0,i);var n,r,s;if(e.isArray(t)){for(t=t.slice(),r=0,s=t.length;r<s;r++)this.check_node(t[r],i);return!0}return t=this.get_node(t),!(!t||t.id===e.jstree.root)&&(n=this.get_node(t,!0),void(t.state.checked||(t.state.checked=!0,this._data.checkbox.selected.push(t.id),n&&n.length&&n.children(".jstree-anchor").addClass("jstree-checked"),this.trigger("check_node",{node:t,selected:this._data.checkbox.selected,event:i}))))},this.uncheck_node=function(t,i){if(this.settings.checkbox.tie_selection)return this.deselect_node(t,!1,i);var n,r,s;if(e.isArray(t)){for(t=t.slice(),n=0,r=t.length;n<r;n++)this.uncheck_node(t[n],i);return!0}return t=this.get_node(t),!(!t||t.id===e.jstree.root)&&(s=this.get_node(t,!0),void(t.state.checked&&(t.state.checked=!1,this._data.checkbox.selected=e.vakata.array_remove_item(this._data.checkbox.selected,t.id),s.length&&s.children(".jstree-anchor").removeClass("jstree-checked"),this.trigger("uncheck_node",{node:t,selected:this._data.checkbox.selected,event:i}))))},this.check_all=function(){if(this.settings.checkbox.tie_selection)return this.select_all();var t,i;this._data.checkbox.selected.concat([]);for(this._data.checkbox.selected=this._model.data[e.jstree.root].children_d.concat(),t=0,i=this._data.checkbox.selected.length;t<i;t++)this._model.data[this._data.checkbox.selected[t]]&&(this._model.data[this._data.checkbox.selected[t]].state.checked=!0);this.redraw(!0),this.trigger("check_all",{selected:this._data.checkbox.selected})},this.uncheck_all=function(){if(this.settings.checkbox.tie_selection)return this.deselect_all();var e,t,i=this._data.checkbox.selected.concat([]);for(e=0,t=this._data.checkbox.selected.length;e<t;e++)this._model.data[this._data.checkbox.selected[e]]&&(this._model.data[this._data.checkbox.selected[e]].state.checked=!1);this._data.checkbox.selected=[],this.element.find(".jstree-checked").removeClass("jstree-checked"),this.trigger("uncheck_all",{selected:this._data.checkbox.selected,node:i})},this.is_checked=function(t){return this.settings.checkbox.tie_selection?this.is_selected(t):(t=this.get_node(t),!(!t||t.id===e.jstree.root)&&t.state.checked)},this.get_checked=function(t){return this.settings.checkbox.tie_selection?this.get_selected(t):t?e.map(this._data.checkbox.selected,e.proxy(function(e){return this.get_node(e)},this)):this._data.checkbox.selected},this.get_top_checked=function(t){if(this.settings.checkbox.tie_selection)return this.get_top_selected(t);var i,n,r,s,a=this.get_checked(!0),o={};for(i=0,n=a.length;i<n;i++)o[a[i].id]=a[i];for(i=0,n=a.length;i<n;i++)for(r=0,s=a[i].children_d.length;r<s;r++)o[a[i].children_d[r]]&&delete o[a[i].children_d[r]];a=[];for(i in o)o.hasOwnProperty(i)&&a.push(i);return t?e.map(a,e.proxy(function(e){return this.get_node(e)},this)):a},this.get_bottom_checked=function(t){if(this.settings.checkbox.tie_selection)return this.get_bottom_selected(t);var i,n,r=this.get_checked(!0),s=[];for(i=0,n=r.length;i<n;i++)r[i].children.length||s.push(r[i].id);return t?e.map(s,e.proxy(function(e){return this.get_node(e)},this)):s},this.load_node=function(t,i){var r,s,a,o;if(!e.isArray(t)&&!this.settings.checkbox.tie_selection&&(o=this.get_node(t),o&&o.state.loaded))for(r=0,s=o.children_d.length;r<s;r++)this._model.data[o.children_d[r]].state.checked&&(a=!0,this._data.checkbox.selected=e.vakata.array_remove_item(this._data.checkbox.selected,o.children_d[r]));return n.load_node.apply(this,arguments)},this.get_state=function(){var e=n.get_state.apply(this,arguments);return this.settings.checkbox.tie_selection?e:(e.checkbox=this._data.checkbox.selected.slice(),e)},this.set_state=function(t,i){var r=n.set_state.apply(this,arguments);if(r&&t.checkbox){if(!this.settings.checkbox.tie_selection){this.uncheck_all();var s=this;e.each(t.checkbox,function(e,t){s.check_node(t)})}return delete t.checkbox,this.set_state(t,i),!1}return r},this.refresh=function(e,t){return this.settings.checkbox.tie_selection||(this._data.checkbox.selected=[]),n.refresh.apply(this,arguments)}},e.jstree.defaults.conditionalselect=function(){return!0},e.jstree.plugins.conditionalselect=function(e,t){this.activate_node=function(e,i){this.settings.conditionalselect.call(this,this.get_node(e),i)&&t.activate_node.call(this,e,i)}},e.jstree.defaults.contextmenu={select_node:!0,show_at_node:!0,items:function(t,i){return{create:{separator_before:!1,separator_after:!0,_disabled:!1,label:"Create",action:function(t){var i=e.jstree.reference(t.reference),n=i.get_node(t.reference);i.create_node(n,{},"last",function(e){setTimeout(function(){i.edit(e)},0)})}},rename:{separator_before:!1,separator_after:!1,_disabled:!1,label:"Rename",action:function(t){var i=e.jstree.reference(t.reference),n=i.get_node(t.reference);i.edit(n)}},remove:{separator_before:!1,icon:!1,separator_after:!1,_disabled:!1,label:"Delete",action:function(t){var i=e.jstree.reference(t.reference),n=i.get_node(t.reference);i.is_selected(n)?i.delete_node(i.get_selected()):i.delete_node(n)}},ccp:{separator_before:!0,icon:!1,separator_after:!1,label:"Edit",action:!1,submenu:{cut:{separator_before:!1,separator_after:!1,label:"Cut",action:function(t){var i=e.jstree.reference(t.reference),n=i.get_node(t.reference);i.is_selected(n)?i.cut(i.get_top_selected()):i.cut(n)}},copy:{separator_before:!1,icon:!1,separator_after:!1,label:"Copy",action:function(t){var i=e.jstree.reference(t.reference),n=i.get_node(t.reference);i.is_selected(n)?i.copy(i.get_top_selected()):i.copy(n)}},paste:{separator_before:!1,icon:!1,_disabled:function(t){return!e.jstree.reference(t.reference).can_paste()},separator_after:!1,label:"Paste",action:function(t){var i=e.jstree.reference(t.reference),n=i.get_node(t.reference);i.paste(n)}}}}}}},e.jstree.plugins.contextmenu=function(i,n){this.bind=function(){n.bind.call(this);var t,i,r=0,s=null;this.element.on("contextmenu.jstree",".jstree-anchor",e.proxy(function(e,t){
e.preventDefault(),r=e.ctrlKey?+new Date:0,(t||s)&&(r=+new Date+1e4),s&&clearTimeout(s),this.is_loading(e.currentTarget)||this.show_contextmenu(e.currentTarget,e.pageX,e.pageY,e)},this)).on("click.jstree",".jstree-anchor",e.proxy(function(t){this._data.contextmenu.visible&&(!r||+new Date-r>250)&&e.vakata.context.hide(),r=0},this)).on("touchstart.jstree",".jstree-anchor",function(n){n.originalEvent&&n.originalEvent.changedTouches&&n.originalEvent.changedTouches[0]&&(t=n.pageX,i=n.pageY,s=setTimeout(function(){e(n.currentTarget).trigger("contextmenu",!0)},750))}).on("touchmove.vakata.jstree",function(e){s&&e.originalEvent&&e.originalEvent.changedTouches&&e.originalEvent.changedTouches[0]&&(Math.abs(t-e.pageX)>50||Math.abs(i-e.pageY)>50)&&clearTimeout(s)}).on("touchend.vakata.jstree",function(e){s&&clearTimeout(s)}),e(c).on("context_hide.vakata.jstree",e.proxy(function(){this._data.contextmenu.visible=!1},this))},this.teardown=function(){this._data.contextmenu.visible&&e.vakata.context.hide(),n.teardown.call(this)},this.show_contextmenu=function(i,n,r,s){if(i=this.get_node(i),!i||i.id===e.jstree.root)return!1;var a=this.settings.contextmenu,o=this.get_node(i,!0),l=o.children(".jstree-anchor"),d=!1,c=!1;(a.show_at_node||n===t||r===t)&&(d=l.offset(),n=d.left,r=d.top+this._data.core.li_height),this.settings.contextmenu.select_node&&!this.is_selected(i)&&this.activate_node(i,s),c=a.items,e.isFunction(c)&&(c=c.call(this,i,e.proxy(function(e){this._show_contextmenu(i,n,r,e)},this))),e.isPlainObject(c)&&this._show_contextmenu(i,n,r,c)},this._show_contextmenu=function(t,i,n,r){var s=this.get_node(t,!0),a=s.children(".jstree-anchor");e(c).one("context_show.vakata.jstree",e.proxy(function(t,i){var n="jstree-contextmenu jstree-"+this.get_theme()+"-contextmenu";e(i.element).addClass(n)},this)),this._data.contextmenu.visible=!0,e.vakata.context.show(a,{x:i,y:n},r),this.trigger("show_contextmenu",{node:t,x:i,y:n})}},function(e){var t=!1,i={element:!1,reference:!1,position_x:0,position_y:0,items:[],html:"",is_visible:!1};e.vakata.context={settings:{hide_onmouseleave:0,icons:!0},_trigger:function(t){e(c).triggerHandler("context_"+t+".vakata",{reference:i.reference,element:i.element,position:{x:i.position_x,y:i.position_y}})},_execute:function(t){return t=i.items[t],!(!t||t._disabled&&(!e.isFunction(t._disabled)||t._disabled({item:t,reference:i.reference,element:i.element}))||!t.action)&&t.action.call(null,{item:t,reference:i.reference,element:i.element,position:{x:i.position_x,y:i.position_y}})},_parse:function(t,n){if(!t)return!1;n||(i.html="",i.items=[]);var r,s="",a=!1;return n&&(s+="<ul>"),e.each(t,function(t,n){return!n||(i.items.push(n),!a&&n.separator_before&&(s+="<li class='vakata-context-separator'><a href='#' "+(e.vakata.context.settings.icons?"":'style="margin-left:0px;"')+">&#160;</a></li>"),a=!1,s+="<li class='"+(n._class||"")+(n._disabled===!0||e.isFunction(n._disabled)&&n._disabled({item:n,reference:i.reference,element:i.element})?" vakata-contextmenu-disabled ":"")+"' "+(n.shortcut?" data-shortcut='"+n.shortcut+"' ":"")+">",s+="<a href='#' rel='"+(i.items.length-1)+"'>",e.vakata.context.settings.icons&&(s+="<i ",n.icon&&(s+=n.icon.indexOf("/")!==-1||n.icon.indexOf(".")!==-1?" style='background:url(\""+n.icon+"\") center center no-repeat' ":" class='"+n.icon+"' "),s+="></i><span class='vakata-contextmenu-sep'>&#160;</span>"),s+=(e.isFunction(n.label)?n.label({item:t,reference:i.reference,element:i.element}):n.label)+(n.shortcut?' <span class="vakata-contextmenu-shortcut vakata-contextmenu-shortcut-'+n.shortcut+'">'+(n.shortcut_label||"")+"</span>":"")+"</a>",n.submenu&&(r=e.vakata.context._parse(n.submenu,!0),r&&(s+=r)),s+="</li>",void(n.separator_after&&(s+="<li class='vakata-context-separator'><a href='#' "+(e.vakata.context.settings.icons?"":'style="margin-left:0px;"')+">&#160;</a></li>",a=!0)))}),s=s.replace(/<li class\='vakata-context-separator'\><\/li\>$/,""),n&&(s+="</ul>"),n||(i.html=s,e.vakata.context._trigger("parse")),s.length>10&&s},_show_submenu:function(i){if(i=e(i),i.length&&i.children("ul").length){var n=i.children("ul"),r=i.offset().left+i.outerWidth(),s=i.offset().top,a=n.width(),o=n.height(),l=e(window).width()+e(window).scrollLeft(),d=e(window).height()+e(window).scrollTop();t?i[r-(a+10+i.outerWidth())<0?"addClass":"removeClass"]("vakata-context-left"):i[r+a+10>l?"addClass":"removeClass"]("vakata-context-right"),s+o+10>d&&n.css("bottom","-1px"),n.show()}},show:function(n,r,s){var a,o,l,d,c,h,u,f,g=!0;switch(i.element&&i.element.length&&i.element.width(""),g){case!r&&!n:return!1;case!!r&&!!n:i.reference=n,i.position_x=r.x,i.position_y=r.y;break;case!r&&!!n:i.reference=n,a=n.offset(),i.position_x=a.left+n.outerHeight(),i.position_y=a.top;break;case!!r&&!n:i.position_x=r.x,i.position_y=r.y}n&&!s&&e(n).data("vakata_contextmenu")&&(s=e(n).data("vakata_contextmenu")),e.vakata.context._parse(s)&&i.element.html(i.html),i.items.length&&(i.element.appendTo("body"),o=i.element,l=i.position_x,d=i.position_y,c=o.width(),h=o.height(),u=e(window).width()+e(window).scrollLeft(),f=e(window).height()+e(window).scrollTop(),t&&(l-=o.outerWidth()-e(n).outerWidth(),l<e(window).scrollLeft()+20&&(l=e(window).scrollLeft()+20)),l+c+20>u&&(l=u-(c+20)),d+h+20>f&&(d=f-(h+20)),i.element.css({left:l,top:d}).show().find("a").first().focus().parent().addClass("vakata-context-hover"),i.is_visible=!0,e.vakata.context._trigger("show"))},hide:function(){i.is_visible&&(i.element.hide().find("ul").hide().end().find(":focus").blur().end().detach(),i.is_visible=!1,e.vakata.context._trigger("hide"))}},e(function(){t="rtl"===e("body").css("direction");var n=!1;i.element=e("<ul class='vakata-context'></ul>"),i.element.on("mouseenter","li",function(t){t.stopImmediatePropagation(),e.contains(this,t.relatedTarget)||(n&&clearTimeout(n),i.element.find(".vakata-context-hover").removeClass("vakata-context-hover").end(),e(this).siblings().find("ul").hide().end().end().parentsUntil(".vakata-context","li").addBack().addClass("vakata-context-hover"),e.vakata.context._show_submenu(this))}).on("mouseleave","li",function(t){e.contains(this,t.relatedTarget)||e(this).find(".vakata-context-hover").addBack().removeClass("vakata-context-hover")}).on("mouseleave",function(t){e(this).find(".vakata-context-hover").removeClass("vakata-context-hover"),e.vakata.context.settings.hide_onmouseleave&&(n=setTimeout(function(t){return function(){e.vakata.context.hide()}}(this),e.vakata.context.settings.hide_onmouseleave))}).on("click","a",function(t){t.preventDefault(),e(this).blur().parent().hasClass("vakata-context-disabled")||e.vakata.context._execute(e(this).attr("rel"))===!1||e.vakata.context.hide()}).on("keydown","a",function(t){var n=null;switch(t.which){case 13:case 32:t.type="mouseup",t.preventDefault(),e(t.currentTarget).trigger(t);break;case 37:i.is_visible&&(i.element.find(".vakata-context-hover").last().closest("li").first().find("ul").hide().find(".vakata-context-hover").removeClass("vakata-context-hover").end().end().children("a").focus(),t.stopImmediatePropagation(),t.preventDefault());break;case 38:i.is_visible&&(n=i.element.find("ul:visible").addBack().last().children(".vakata-context-hover").removeClass("vakata-context-hover").prevAll("li:not(.vakata-context-separator)").first(),n.length||(n=i.element.find("ul:visible").addBack().last().children("li:not(.vakata-context-separator)").last()),n.addClass("vakata-context-hover").children("a").focus(),t.stopImmediatePropagation(),t.preventDefault());break;case 39:i.is_visible&&(i.element.find(".vakata-context-hover").last().children("ul").show().children("li:not(.vakata-context-separator)").removeClass("vakata-context-hover").first().addClass("vakata-context-hover").children("a").focus(),t.stopImmediatePropagation(),t.preventDefault());break;case 40:i.is_visible&&(n=i.element.find("ul:visible").addBack().last().children(".vakata-context-hover").removeClass("vakata-context-hover").nextAll("li:not(.vakata-context-separator)").first(),n.length||(n=i.element.find("ul:visible").addBack().last().children("li:not(.vakata-context-separator)").first()),n.addClass("vakata-context-hover").children("a").focus(),t.stopImmediatePropagation(),t.preventDefault());break;case 27:e.vakata.context.hide(),t.preventDefault()}}).on("keydown",function(e){e.preventDefault();var t=i.element.find(".vakata-contextmenu-shortcut-"+e.which).parent();t.parent().not(".vakata-context-disabled")&&t.click()}),e(c).on("mousedown.vakata.jstree",function(t){i.is_visible&&!e.contains(i.element[0],t.target)&&e.vakata.context.hide()}).on("context_show.vakata.jstree",function(e,n){i.element.find("li:has(ul)").children("a").addClass("vakata-context-parent"),t&&i.element.addClass("vakata-context-rtl").css("direction","rtl"),i.element.find("ul").hide().end()})})}(e),e.jstree.defaults.dnd={copy:!0,open_timeout:500,is_draggable:!0,check_while_dragging:!0,always_copy:!1,inside_pos:0,drag_selection:!0,touch:!0,large_drop_target:!1,large_drag_target:!1},e.jstree.plugins.dnd=function(t,i){this.bind=function(){i.bind.call(this),this.element.on("mousedown.jstree touchstart.jstree",this.settings.dnd.large_drag_target?".jstree-node":".jstree-anchor",e.proxy(function(t){if(this.settings.dnd.large_drag_target&&e(t.target).closest(".jstree-node")[0]!==t.currentTarget)return!0;if("touchstart"===t.type&&(!this.settings.dnd.touch||"selected"===this.settings.dnd.touch&&!e(t.currentTarget).closest(".jstree-node").children(".jstree-anchor").hasClass("jstree-clicked")))return!0;var i=this.get_node(t.target),n=this.is_selected(i)&&this.settings.dnd.drag_selection?this.get_top_selected().length:1,r=n>1?n+" "+this.get_string("nodes"):this.get_text(t.currentTarget);return this.settings.core.force_text&&(r=e.vakata.html.escape(r)),i&&i.id&&i.id!==e.jstree.root&&(1===t.which||"touchstart"===t.type)&&(this.settings.dnd.is_draggable===!0||e.isFunction(this.settings.dnd.is_draggable)&&this.settings.dnd.is_draggable.call(this,n>1?this.get_top_selected(!0):[i],t))?(this.element.trigger("mousedown.jstree"),e.vakata.dnd.start(t,{jstree:!0,origin:this,obj:this.get_node(i,!0),nodes:n>1?this.get_top_selected():[i.id]},'<div id="jstree-dnd" class="jstree-'+this.get_theme()+" jstree-"+this.get_theme()+"-"+this.get_theme_variant()+" "+(this.settings.core.themes.responsive?" jstree-dnd-responsive":"")+'"><i class="jstree-icon jstree-er"></i>'+r+'<ins class="jstree-copy" style="display:none;">+</ins></div>')):void 0},this))}},e(function(){var t=!1,i=!1,n=!1,r=!1,s=e('<div id="jstree-marker">&#160;</div>').hide();e(c).on("dnd_start.vakata.jstree",function(e,i){t=!1,n=!1,i&&i.data&&i.data.jstree&&s.appendTo("body")}).on("dnd_move.vakata.jstree",function(a,o){if(r&&clearTimeout(r),o&&o.data&&o.data.jstree&&(!o.event.target.id||"jstree-marker"!==o.event.target.id)){n=o.event;var l,d,c,h,u,f,g,_,p,m,v,y,x,b,w=e.jstree.reference(o.event.target),j=!1,k=!1,S=!1;if(w&&w._data&&w._data.dnd)if(s.attr("class","jstree-"+w.get_theme()+(w.settings.core.themes.responsive?" jstree-dnd-responsive":"")),o.helper.children().attr("class","jstree-"+w.get_theme()+" jstree-"+w.get_theme()+"-"+w.get_theme_variant()+" "+(w.settings.core.themes.responsive?" jstree-dnd-responsive":"")).find(".jstree-copy").first()[o.data.origin&&(o.data.origin.settings.dnd.always_copy||o.data.origin.settings.dnd.copy&&(o.event.metaKey||o.event.ctrlKey))?"show":"hide"](),o.event.target!==w.element[0]&&o.event.target!==w.get_container_ul()[0]||0!==w.get_container_ul().children().length){if(j=w.settings.dnd.large_drop_target?e(o.event.target).closest(".jstree-node").children(".jstree-anchor"):e(o.event.target).closest(".jstree-anchor"),j&&j.length&&j.parent().is(".jstree-closed, .jstree-open, .jstree-leaf")&&(k=j.offset(),S=o.event.pageY-k.top,c=j.outerHeight(),f=S<c/3?["b","i","a"]:S>c-c/3?["a","i","b"]:S>c/2?["i","a","b"]:["i","b","a"],e.each(f,function(n,a){switch(a){case"b":l=k.left-6,d=k.top,h=w.get_parent(j),u=j.parent().index();break;case"i":x=w.settings.dnd.inside_pos,b=w.get_node(j.parent()),l=k.left-2,d=k.top+c/2+1,h=b.id,u="first"===x?0:"last"===x?b.children.length:Math.min(x,b.children.length);break;case"a":l=k.left-6,d=k.top+c,h=w.get_parent(j),u=j.parent().index()+1}for(g=!0,_=0,p=o.data.nodes.length;_<p;_++)if(m=o.data.origin&&(o.data.origin.settings.dnd.always_copy||o.data.origin.settings.dnd.copy&&(o.event.metaKey||o.event.ctrlKey))?"copy_node":"move_node",v=u,"move_node"===m&&"a"===a&&o.data.origin&&o.data.origin===w&&h===w.get_parent(o.data.nodes[_])&&(y=w.get_node(h),v>e.inArray(o.data.nodes[_],y.children)&&(v-=1)),g=g&&(w&&w.settings&&w.settings.dnd&&w.settings.dnd.check_while_dragging===!1||w.check(m,o.data.origin&&o.data.origin!==w?o.data.origin.get_node(o.data.nodes[_]):o.data.nodes[_],h,v,{dnd:!0,ref:w.get_node(j.parent()),pos:a,origin:o.data.origin,is_multi:o.data.origin&&o.data.origin!==w,is_foreign:!o.data.origin})),!g){w&&w.last_error&&(i=w.last_error());break}if("i"===a&&j.parent().is(".jstree-closed")&&w.settings.dnd.open_timeout&&(r=setTimeout(function(e,t){return function(){e.open_node(t)}}(w,j),w.settings.dnd.open_timeout)),g)return t={ins:w,par:h,pos:"i"!==a||"last"!==x||0!==u||w.is_loaded(b)?u:"last"},s.css({left:l+"px",top:d+"px"}).show(),o.helper.find(".jstree-icon").first().removeClass("jstree-er").addClass("jstree-ok"),i={},f=!0,!1}),f===!0))return}else{for(g=!0,_=0,p=o.data.nodes.length;_<p&&(g=g&&w.check(o.data.origin&&(o.data.origin.settings.dnd.always_copy||o.data.origin.settings.dnd.copy&&(o.event.metaKey||o.event.ctrlKey))?"copy_node":"move_node",o.data.origin&&o.data.origin!==w?o.data.origin.get_node(o.data.nodes[_]):o.data.nodes[_],e.jstree.root,"last",{dnd:!0,ref:w.get_node(e.jstree.root),pos:"i",origin:o.data.origin,is_multi:o.data.origin&&o.data.origin!==w,is_foreign:!o.data.origin}),g);_++);if(g)return t={ins:w,par:e.jstree.root,pos:"last"},s.hide(),void o.helper.find(".jstree-icon").first().removeClass("jstree-er").addClass("jstree-ok")}t=!1,o.helper.find(".jstree-icon").removeClass("jstree-ok").addClass("jstree-er"),s.hide()}}).on("dnd_scroll.vakata.jstree",function(e,i){i&&i.data&&i.data.jstree&&(s.hide(),t=!1,n=!1,i.helper.find(".jstree-icon").first().removeClass("jstree-ok").addClass("jstree-er"))}).on("dnd_stop.vakata.jstree",function(a,o){if(r&&clearTimeout(r),o&&o.data&&o.data.jstree){s.hide().detach();var l,d,c=[];if(t){for(l=0,d=o.data.nodes.length;l<d;l++)c[l]=o.data.origin?o.data.origin.get_node(o.data.nodes[l]):o.data.nodes[l];t.ins[o.data.origin&&(o.data.origin.settings.dnd.always_copy||o.data.origin.settings.dnd.copy&&(o.event.metaKey||o.event.ctrlKey))?"copy_node":"move_node"](c,t.par,t.pos,!1,!1,!1,o.data.origin)}else l=e(o.event.target).closest(".jstree"),l.length&&i&&i.error&&"check"===i.error&&(l=l.jstree(!0),l&&l.settings.core.error.call(this,i));n=!1,t=!1}}).on("keyup.jstree keydown.jstree",function(t,i){i=e.vakata.dnd._get(),i&&i.data&&i.data.jstree&&(i.helper.find(".jstree-copy").first()[i.data.origin&&(i.data.origin.settings.dnd.always_copy||i.data.origin.settings.dnd.copy&&(t.metaKey||t.ctrlKey))?"show":"hide"](),n&&(n.metaKey=t.metaKey,n.ctrlKey=t.ctrlKey,e.vakata.dnd._trigger("move",n)))})}),function(e){e.vakata.html={div:e("<div />"),escape:function(t){return e.vakata.html.div.text(t).html()},strip:function(t){return e.vakata.html.div.empty().append(e.parseHTML(t)).text()}};var t={element:!1,target:!1,is_down:!1,is_drag:!1,helper:!1,helper_w:0,data:!1,init_x:0,init_y:0,scroll_l:0,scroll_t:0,scroll_e:!1,scroll_i:!1,is_touch:!1};e.vakata.dnd={settings:{scroll_speed:10,scroll_proximity:20,helper_left:5,helper_top:10,threshold:5,threshold_touch:50},_trigger:function(t,i){var n=e.vakata.dnd._get();n.event=i,e(c).triggerHandler("dnd_"+t+".vakata",n)},_get:function(){return{data:t.data,element:t.element,helper:t.helper}},_clean:function(){t.helper&&t.helper.remove(),t.scroll_i&&(clearInterval(t.scroll_i),t.scroll_i=!1),t={element:!1,target:!1,is_down:!1,is_drag:!1,helper:!1,helper_w:0,data:!1,init_x:0,init_y:0,scroll_l:0,scroll_t:0,scroll_e:!1,scroll_i:!1,is_touch:!1},e(c).off("mousemove.vakata.jstree touchmove.vakata.jstree",e.vakata.dnd.drag),e(c).off("mouseup.vakata.jstree touchend.vakata.jstree",e.vakata.dnd.stop)},_scroll:function(i){if(!t.scroll_e||!t.scroll_l&&!t.scroll_t)return t.scroll_i&&(clearInterval(t.scroll_i),t.scroll_i=!1),!1;if(!t.scroll_i)return t.scroll_i=setInterval(e.vakata.dnd._scroll,100),!1;if(i===!0)return!1;var n=t.scroll_e.scrollTop(),r=t.scroll_e.scrollLeft();t.scroll_e.scrollTop(n+t.scroll_t*e.vakata.dnd.settings.scroll_speed),t.scroll_e.scrollLeft(r+t.scroll_l*e.vakata.dnd.settings.scroll_speed),n===t.scroll_e.scrollTop()&&r===t.scroll_e.scrollLeft()||e.vakata.dnd._trigger("scroll",t.scroll_e)},start:function(i,n,r){"touchstart"===i.type&&i.originalEvent&&i.originalEvent.changedTouches&&i.originalEvent.changedTouches[0]&&(i.pageX=i.originalEvent.changedTouches[0].pageX,i.pageY=i.originalEvent.changedTouches[0].pageY,i.target=c.elementFromPoint(i.originalEvent.changedTouches[0].pageX-window.pageXOffset,i.originalEvent.changedTouches[0].pageY-window.pageYOffset)),t.is_drag&&e.vakata.dnd.stop({});try{i.currentTarget.unselectable="on",i.currentTarget.onselectstart=function(){return!1},i.currentTarget.style&&(i.currentTarget.style.MozUserSelect="none")}catch(e){}return t.init_x=i.pageX,t.init_y=i.pageY,t.data=n,t.is_down=!0,t.element=i.currentTarget,t.target=i.target,t.is_touch="touchstart"===i.type,r!==!1&&(t.helper=e("<div id='vakata-dnd'></div>").html(r).css({display:"block",margin:"0",padding:"0",position:"absolute",top:"-2000px",lineHeight:"16px",zIndex:"10000"})),e(c).on("mousemove.vakata.jstree touchmove.vakata.jstree",e.vakata.dnd.drag),e(c).on("mouseup.vakata.jstree touchend.vakata.jstree",e.vakata.dnd.stop),!1},drag:function(i){if("touchmove"===i.type&&i.originalEvent&&i.originalEvent.changedTouches&&i.originalEvent.changedTouches[0]&&(i.pageX=i.originalEvent.changedTouches[0].pageX,i.pageY=i.originalEvent.changedTouches[0].pageY,i.target=c.elementFromPoint(i.originalEvent.changedTouches[0].pageX-window.pageXOffset,i.originalEvent.changedTouches[0].pageY-window.pageYOffset)),t.is_down){if(!t.is_drag){if(!(Math.abs(i.pageX-t.init_x)>(t.is_touch?e.vakata.dnd.settings.threshold_touch:e.vakata.dnd.settings.threshold)||Math.abs(i.pageY-t.init_y)>(t.is_touch?e.vakata.dnd.settings.threshold_touch:e.vakata.dnd.settings.threshold)))return;t.helper&&(t.helper.appendTo("body"),t.helper_w=t.helper.outerWidth()),t.is_drag=!0,e.vakata.dnd._trigger("start",i)}var n=!1,r=!1,s=!1,a=!1,o=!1,l=!1,d=!1,h=!1,u=!1,f=!1;return t.scroll_t=0,t.scroll_l=0,t.scroll_e=!1,e(e(i.target).parentsUntil("body").addBack().get().reverse()).filter(function(){return/^auto|scroll$/.test(e(this).css("overflow"))&&(this.scrollHeight>this.offsetHeight||this.scrollWidth>this.offsetWidth)}).each(function(){var n=e(this),r=n.offset();if(this.scrollHeight>this.offsetHeight&&(r.top+n.height()-i.pageY<e.vakata.dnd.settings.scroll_proximity&&(t.scroll_t=1),i.pageY-r.top<e.vakata.dnd.settings.scroll_proximity&&(t.scroll_t=-1)),this.scrollWidth>this.offsetWidth&&(r.left+n.width()-i.pageX<e.vakata.dnd.settings.scroll_proximity&&(t.scroll_l=1),i.pageX-r.left<e.vakata.dnd.settings.scroll_proximity&&(t.scroll_l=-1)),t.scroll_t||t.scroll_l)return t.scroll_e=e(this),!1}),t.scroll_e||(n=e(c),r=e(window),s=n.height(),a=r.height(),o=n.width(),l=r.width(),d=n.scrollTop(),h=n.scrollLeft(),s>a&&i.pageY-d<e.vakata.dnd.settings.scroll_proximity&&(t.scroll_t=-1),s>a&&a-(i.pageY-d)<e.vakata.dnd.settings.scroll_proximity&&(t.scroll_t=1),o>l&&i.pageX-h<e.vakata.dnd.settings.scroll_proximity&&(t.scroll_l=-1),o>l&&l-(i.pageX-h)<e.vakata.dnd.settings.scroll_proximity&&(t.scroll_l=1),(t.scroll_t||t.scroll_l)&&(t.scroll_e=n)),t.scroll_e&&e.vakata.dnd._scroll(!0),t.helper&&(u=parseInt(i.pageY+e.vakata.dnd.settings.helper_top,10),f=parseInt(i.pageX+e.vakata.dnd.settings.helper_left,10),s&&u+25>s&&(u=s-50),o&&f+t.helper_w>o&&(f=o-(t.helper_w+2)),t.helper.css({left:f+"px",top:u+"px"})),e.vakata.dnd._trigger("move",i),!1}},stop:function(i){if("touchend"===i.type&&i.originalEvent&&i.originalEvent.changedTouches&&i.originalEvent.changedTouches[0]&&(i.pageX=i.originalEvent.changedTouches[0].pageX,i.pageY=i.originalEvent.changedTouches[0].pageY,i.target=c.elementFromPoint(i.originalEvent.changedTouches[0].pageX-window.pageXOffset,i.originalEvent.changedTouches[0].pageY-window.pageYOffset)),t.is_drag)e.vakata.dnd._trigger("stop",i);else if("touchend"===i.type&&i.target===t.target){var n=setTimeout(function(){e(i.target).click()},100);e(i.target).one("click",function(){n&&clearTimeout(n)})}return e.vakata.dnd._clean(),!1}}}(e),e.jstree.defaults.massload=null,e.jstree.plugins.massload=function(t,i){this.init=function(e,t){i.init.call(this,e,t),this._data.massload={}},this._load_nodes=function(t,n,r){var s=this.settings.massload;return r&&!e.isEmptyObject(this._data.massload)?i._load_nodes.call(this,t,n,r):e.isFunction(s)?s.call(this,t,e.proxy(function(e){if(e)for(var s in e)e.hasOwnProperty(s)&&(this._data.massload[s]=e[s]);i._load_nodes.call(this,t,n,r)},this)):"object"==typeof s&&s&&s.url?(s=e.extend(!0,{},s),e.isFunction(s.url)&&(s.url=s.url.call(this,t)),e.isFunction(s.data)&&(s.data=s.data.call(this,t)),e.ajax(s).done(e.proxy(function(e,s,a){if(e)for(var o in e)e.hasOwnProperty(o)&&(this._data.massload[o]=e[o]);i._load_nodes.call(this,t,n,r)},this)).fail(e.proxy(function(e){i._load_nodes.call(this,t,n,r)},this))):i._load_nodes.call(this,t,n,r)},this._load_node=function(t,n){var r=this._data.massload[t.id];return r?this["string"==typeof r?"_append_html_data":"_append_json_data"](t,"string"==typeof r?e(e.parseHTML(r)).filter(function(){return 3!==this.nodeType}):r,function(e){n.call(this,e),delete this._data.massload[t.id]}):i._load_node.call(this,t,n)}},e.jstree.defaults.search={ajax:!1,fuzzy:!1,case_sensitive:!1,show_only_matches:!1,show_only_matches_children:!1,close_opened_onclear:!0,search_leaves_only:!1,search_callback:!1},e.jstree.plugins.search=function(i,n){this.bind=function(){n.bind.call(this),this._data.search.str="",this._data.search.dom=e(),this._data.search.res=[],this._data.search.opn=[],this._data.search.som=!1,this._data.search.smc=!1,this._data.search.hdn=[],this.element.on("search.jstree",e.proxy(function(t,i){if(this._data.search.som&&i.res.length){var n,r,s=this._model.data,a=[];for(n=0,r=i.res.length;n<r;n++)s[i.res[n]]&&!s[i.res[n]].state.hidden&&(a.push(i.res[n]),a=a.concat(s[i.res[n]].parents),this._data.search.smc&&(a=a.concat(s[i.res[n]].children_d)));a=e.vakata.array_remove_item(e.vakata.array_unique(a),e.jstree.root),this._data.search.hdn=this.hide_all(!0),this.show_node(a)}},this)).on("clear_search.jstree",e.proxy(function(e,t){this._data.search.som&&t.res.length&&this.show_node(this._data.search.hdn)},this))},this.search=function(i,n,r,s,a,o){if(i===!1||""===e.trim(i.toString()))return this.clear_search();s=this.get_node(s),s=s&&s.id?s.id:null,i=i.toString();var l,d,c=this.settings.search,h=!!c.ajax&&c.ajax,u=this._model.data,f=null,g=[],_=[];if(this._data.search.res.length&&!a&&this.clear_search(),r===t&&(r=c.show_only_matches),o===t&&(o=c.show_only_matches_children),!n&&h!==!1)return e.isFunction(h)?h.call(this,i,e.proxy(function(t){t&&t.d&&(t=t.d),this._load_nodes(e.isArray(t)?e.vakata.array_unique(t):[],function(){this.search(i,!0,r,s,a)},!0)},this),s):(h=e.extend({},h),h.data||(h.data={}),h.data.str=i,s&&(h.data.inside=s),e.ajax(h).fail(e.proxy(function(){this._data.core.last_error={error:"ajax",plugin:"search",id:"search_01",reason:"Could not load search parents",data:JSON.stringify(h)},this.settings.core.error.call(this,this._data.core.last_error)},this)).done(e.proxy(function(t){t&&t.d&&(t=t.d),this._load_nodes(e.isArray(t)?e.vakata.array_unique(t):[],function(){this.search(i,!0,r,s,a)},!0)},this)));if(a||(this._data.search.str=i,this._data.search.dom=e(),this._data.search.res=[],this._data.search.opn=[],this._data.search.som=r,this._data.search.smc=o),f=new e.vakata.search(i,(!0),{caseSensitive:c.case_sensitive,fuzzy:c.fuzzy}),e.each(u[s?s:e.jstree.root].children_d,function(e,t){var n=u[t];n.text&&(!c.search_leaves_only||n.state.loaded&&0===n.children.length)&&(c.search_callback&&c.search_callback.call(this,i,n)||!c.search_callback&&f.search(n.text).isMatch)&&(g.push(t),_=_.concat(n.parents))}),g.length){for(_=e.vakata.array_unique(_),l=0,d=_.length;l<d;l++)_[l]!==e.jstree.root&&u[_[l]]&&this.open_node(_[l],null,0)===!0&&this._data.search.opn.push(_[l]);a?(this._data.search.dom=this._data.search.dom.add(e(this.element[0].querySelectorAll("#"+e.map(g,function(t){return"0123456789".indexOf(t[0])!==-1?"\\3"+t[0]+" "+t.substr(1).replace(e.jstree.idregex,"\\$&"):t.replace(e.jstree.idregex,"\\$&")}).join(", #")))),this._data.search.res=e.vakata.array_unique(this._data.search.res.concat(g))):(this._data.search.dom=e(this.element[0].querySelectorAll("#"+e.map(g,function(t){return"0123456789".indexOf(t[0])!==-1?"\\3"+t[0]+" "+t.substr(1).replace(e.jstree.idregex,"\\$&"):t.replace(e.jstree.idregex,"\\$&")}).join(", #"))),this._data.search.res=g),this._data.search.dom.children(".jstree-anchor").addClass("jstree-search")}this.trigger("search",{nodes:this._data.search.dom,str:i,res:this._data.search.res,show_only_matches:r})},this.clear_search=function(){this.settings.search.close_opened_onclear&&this.close_node(this._data.search.opn,0),this.trigger("clear_search",{nodes:this._data.search.dom,str:this._data.search.str,res:this._data.search.res}),this._data.search.res.length&&(this._data.search.dom=e(this.element[0].querySelectorAll("#"+e.map(this._data.search.res,function(t){return"0123456789".indexOf(t[0])!==-1?"\\3"+t[0]+" "+t.substr(1).replace(e.jstree.idregex,"\\$&"):t.replace(e.jstree.idregex,"\\$&")}).join(", #"))),this._data.search.dom.children(".jstree-anchor").removeClass("jstree-search")),this._data.search.str="",this._data.search.res=[],this._data.search.opn=[],this._data.search.dom=e()},this.redraw_node=function(t,i,r,s){if(t=n.redraw_node.apply(this,arguments),t&&e.inArray(t.id,this._data.search.res)!==-1){var a,o,l=null;for(a=0,o=t.childNodes.length;a<o;a++)if(t.childNodes[a]&&t.childNodes[a].className&&t.childNodes[a].className.indexOf("jstree-anchor")!==-1){l=t.childNodes[a];break}l&&(l.className+=" jstree-search")}return t}},function(e){e.vakata.search=function(t,i,n){n=n||{},n=e.extend({},e.vakata.search.defaults,n),n.fuzzy!==!1&&(n.fuzzy=!0),t=n.caseSensitive?t:t.toLowerCase();var r,s,a,o,l=n.location,d=n.distance,c=n.threshold,h=t.length;return h>32&&(n.fuzzy=!1),n.fuzzy&&(r=1<<h-1,s=function(){var e={},i=0;for(i=0;i<h;i++)e[t.charAt(i)]=0;for(i=0;i<h;i++)e[t.charAt(i)]|=1<<h-i-1;return e}(),a=function(e,t){var i=e/h,n=Math.abs(l-t);return d?i+n/d:n?1:i}),o=function(e){if(e=n.caseSensitive?e:e.toLowerCase(),t===e||e.indexOf(t)!==-1)return{isMatch:!0,score:0};if(!n.fuzzy)return{isMatch:!1,score:1};var i,o,d,u,f,g,_,p,m,v=e.length,y=c,x=e.indexOf(t,l),b=h+v,w=1,j=[];for(x!==-1&&(y=Math.min(a(0,x),y),x=e.lastIndexOf(t,l+h),x!==-1&&(y=Math.min(a(0,x),y))),x=-1,i=0;i<h;i++){for(d=0,u=b;d<u;)a(i,l+u)<=y?d=u:b=u,u=Math.floor((b-d)/2+d);for(b=u,g=Math.max(1,l-u+1),_=Math.min(l+u,v)+h,p=new Array(_+2),p[_+1]=(1<<i)-1,o=_;o>=g;o--)if(m=s[e.charAt(o-1)],0===i?p[o]=(p[o+1]<<1|1)&m:p[o]=(p[o+1]<<1|1)&m|((f[o+1]|f[o])<<1|1)|f[o+1],p[o]&r&&(w=a(i,o-1),w<=y)){if(y=w,x=o-1,j.push(x),!(x>l))break;g=Math.max(1,2*l-x)}if(a(i+1,l)>y)break;f=p}return{isMatch:x>=0,score:w}},i===!0?{search:o}:o(i)},e.vakata.search.defaults={location:0,distance:100,threshold:.6,fuzzy:!1,caseSensitive:!1}}(e),e.jstree.defaults.sort=function(e,t){return this.get_text(e)>this.get_text(t)?1:-1},e.jstree.plugins.sort=function(t,i){this.bind=function(){i.bind.call(this),this.element.on("model.jstree",e.proxy(function(e,t){this.sort(t.parent,!0)},this)).on("rename_node.jstree create_node.jstree",e.proxy(function(e,t){this.sort(t.parent||t.node.parent,!1),this.redraw_node(t.parent||t.node.parent,!0)},this)).on("move_node.jstree copy_node.jstree",e.proxy(function(e,t){this.sort(t.parent,!1),this.redraw_node(t.parent,!0)},this))},this.sort=function(t,i){var n,r;if(t=this.get_node(t),t&&t.children&&t.children.length&&(t.children.sort(e.proxy(this.settings.sort,this)),i))for(n=0,r=t.children_d.length;n<r;n++)this.sort(t.children_d[n],!1)}};var f=!1;e.jstree.defaults.state={key:"jstree",events:"changed.jstree open_node.jstree close_node.jstree check_node.jstree uncheck_node.jstree",ttl:!1,filter:!1},e.jstree.plugins.state=function(t,i){this.bind=function(){i.bind.call(this);var t=e.proxy(function(){this.element.on(this.settings.state.events,e.proxy(function(){f&&clearTimeout(f),f=setTimeout(e.proxy(function(){this.save_state()},this),100)},this)),this.trigger("state_ready")},this);this.element.on("ready.jstree",e.proxy(function(e,i){this.element.one("restore_state.jstree",t),this.restore_state()||t()},this))},this.save_state=function(){var t={state:this.get_state(),ttl:this.settings.state.ttl,sec:+new Date};e.vakata.storage.set(this.settings.state.key,JSON.stringify(t))},this.restore_state=function(){var t=e.vakata.storage.get(this.settings.state.key);if(t)try{t=JSON.parse(t)}catch(e){return!1}return!(t&&t.ttl&&t.sec&&+new Date-t.sec>t.ttl)&&(t&&t.state&&(t=t.state),t&&e.isFunction(this.settings.state.filter)&&(t=this.settings.state.filter.call(this,t)),!!t&&(this.element.one("set_state.jstree",function(i,n){n.instance.trigger("restore_state",{state:e.extend(!0,{},t)})}),this.set_state(t),!0))},this.clear_state=function(){return e.vakata.storage.del(this.settings.state.key)}},function(e,t){e.vakata.storage={set:function(e,t){return window.localStorage.setItem(e,t)},get:function(e){return window.localStorage.getItem(e)},del:function(e){return window.localStorage.removeItem(e)}}}(e),e.jstree.defaults.types={default:{}},e.jstree.defaults.types[e.jstree.root]={},e.jstree.plugins.types=function(i,n){this.init=function(i,r){var s,a;if(r&&r.types&&r.types.default)for(s in r.types)if("default"!==s&&s!==e.jstree.root&&r.types.hasOwnProperty(s))for(a in r.types.default)r.types.default.hasOwnProperty(a)&&r.types[s][a]===t&&(r.types[s][a]=r.types.default[a]);n.init.call(this,i,r),this._model.data[e.jstree.root].type=e.jstree.root},this.refresh=function(t,i){n.refresh.call(this,t,i),this._model.data[e.jstree.root].type=e.jstree.root},this.bind=function(){this.element.on("model.jstree",e.proxy(function(i,n){var r,s,a=this._model.data,o=n.nodes,l=this.settings.types,d="default";for(r=0,s=o.length;r<s;r++)d="default",a[o[r]].original&&a[o[r]].original.type&&l[a[o[r]].original.type]&&(d=a[o[r]].original.type),a[o[r]].data&&a[o[r]].data.jstree&&a[o[r]].data.jstree.type&&l[a[o[r]].data.jstree.type]&&(d=a[o[r]].data.jstree.type),a[o[r]].type=d,a[o[r]].icon===!0&&l[d].icon!==t&&(a[o[r]].icon=l[d].icon);a[e.jstree.root].type=e.jstree.root},this)),n.bind.call(this)},this.get_json=function(t,i,r){var s,a,o=this._model.data,l=i?e.extend(!0,{},i,{no_id:!1}):{},d=n.get_json.call(this,t,l,r);if(d===!1)return!1;if(e.isArray(d))for(s=0,a=d.length;s<a;s++)d[s].type=d[s].id&&o[d[s].id]&&o[d[s].id].type?o[d[s].id].type:"default",i&&i.no_id&&(delete d[s].id,d[s].li_attr&&d[s].li_attr.id&&delete d[s].li_attr.id,d[s].a_attr&&d[s].a_attr.id&&delete d[s].a_attr.id);else d.type=d.id&&o[d.id]&&o[d.id].type?o[d.id].type:"default",i&&i.no_id&&(d=this._delete_ids(d));return d},this._delete_ids=function(t){if(e.isArray(t)){for(var i=0,n=t.length;i<n;i++)t[i]=this._delete_ids(t[i]);return t}return delete t.id,t.li_attr&&t.li_attr.id&&delete t.li_attr.id,t.a_attr&&t.a_attr.id&&delete t.a_attr.id,t.children&&e.isArray(t.children)&&(t.children=this._delete_ids(t.children)),t},this.check=function(i,r,s,a,o){if(n.check.call(this,i,r,s,a,o)===!1)return!1;r=r&&r.id?r:this.get_node(r),s=s&&s.id?s:this.get_node(s);var l,d,c,h,u=r&&r.id?o&&o.origin?o.origin:e.jstree.reference(r.id):null;switch(u=u&&u._model&&u._model.data?u._model.data:null,i){case"create_node":case"move_node":case"copy_node":if("move_node"!==i||e.inArray(r.id,s.children)===-1){
if(l=this.get_rules(s),l.max_children!==t&&l.max_children!==-1&&l.max_children===s.children.length)return this._data.core.last_error={error:"check",plugin:"types",id:"types_01",reason:"max_children prevents function: "+i,data:JSON.stringify({chk:i,pos:a,obj:!(!r||!r.id)&&r.id,par:!(!s||!s.id)&&s.id})},!1;if(l.valid_children!==t&&l.valid_children!==-1&&e.inArray(r.type||"default",l.valid_children)===-1)return this._data.core.last_error={error:"check",plugin:"types",id:"types_02",reason:"valid_children prevents function: "+i,data:JSON.stringify({chk:i,pos:a,obj:!(!r||!r.id)&&r.id,par:!(!s||!s.id)&&s.id})},!1;if(u&&r.children_d&&r.parents){for(d=0,c=0,h=r.children_d.length;c<h;c++)d=Math.max(d,u[r.children_d[c]].parents.length);d=d-r.parents.length+1}(d<=0||d===t)&&(d=1);do{if(l.max_depth!==t&&l.max_depth!==-1&&l.max_depth<d)return this._data.core.last_error={error:"check",plugin:"types",id:"types_03",reason:"max_depth prevents function: "+i,data:JSON.stringify({chk:i,pos:a,obj:!(!r||!r.id)&&r.id,par:!(!s||!s.id)&&s.id})},!1;s=this.get_node(s.parent),l=this.get_rules(s),d++}while(s)}}return!0},this.get_rules=function(e){if(e=this.get_node(e),!e)return!1;var i=this.get_type(e,!0);return i.max_depth===t&&(i.max_depth=-1),i.max_children===t&&(i.max_children=-1),i.valid_children===t&&(i.valid_children=-1),i},this.get_type=function(t,i){return t=this.get_node(t),!!t&&(i?e.extend({type:t.type},this.settings.types[t.type]):t.type)},this.set_type=function(i,n){var r,s,a,o,l;if(e.isArray(i)){for(i=i.slice(),s=0,a=i.length;s<a;s++)this.set_type(i[s],n);return!0}return r=this.settings.types,i=this.get_node(i),!(!r[n]||!i)&&(o=i.type,l=this.get_icon(i),i.type=n,(l===!0||r[o]&&r[o].icon!==t&&l===r[o].icon)&&this.set_icon(i,r[n].icon===t||r[n].icon),!0)}},e.jstree.defaults.unique={case_sensitive:!1,duplicate:function(e,t){return e+" ("+t+")"}},e.jstree.plugins.unique=function(i,n){this.check=function(t,i,r,s,a){if(n.check.call(this,t,i,r,s,a)===!1)return!1;if(i=i&&i.id?i:this.get_node(i),r=r&&r.id?r:this.get_node(r),!r||!r.children)return!0;var o,l,d="rename_node"===t?s:i.text,c=[],h=this.settings.unique.case_sensitive,u=this._model.data;for(o=0,l=r.children.length;o<l;o++)c.push(h?u[r.children[o]].text:u[r.children[o]].text.toLowerCase());switch(h||(d=d.toLowerCase()),t){case"delete_node":return!0;case"rename_node":return o=e.inArray(d,c)===-1||i.text&&i.text[h?"toString":"toLowerCase"]()===d,o||(this._data.core.last_error={error:"check",plugin:"unique",id:"unique_01",reason:"Child with name "+d+" already exists. Preventing: "+t,data:JSON.stringify({chk:t,pos:s,obj:!(!i||!i.id)&&i.id,par:!(!r||!r.id)&&r.id})}),o;case"create_node":return o=e.inArray(d,c)===-1,o||(this._data.core.last_error={error:"check",plugin:"unique",id:"unique_04",reason:"Child with name "+d+" already exists. Preventing: "+t,data:JSON.stringify({chk:t,pos:s,obj:!(!i||!i.id)&&i.id,par:!(!r||!r.id)&&r.id})}),o;case"copy_node":return o=e.inArray(d,c)===-1,o||(this._data.core.last_error={error:"check",plugin:"unique",id:"unique_02",reason:"Child with name "+d+" already exists. Preventing: "+t,data:JSON.stringify({chk:t,pos:s,obj:!(!i||!i.id)&&i.id,par:!(!r||!r.id)&&r.id})}),o;case"move_node":return o=i.parent===r.id&&(!a||!a.is_multi)||e.inArray(d,c)===-1,o||(this._data.core.last_error={error:"check",plugin:"unique",id:"unique_03",reason:"Child with name "+d+" already exists. Preventing: "+t,data:JSON.stringify({chk:t,pos:s,obj:!(!i||!i.id)&&i.id,par:!(!r||!r.id)&&r.id})}),o}return!0},this.create_node=function(i,r,s,a,o){if(!r||r.text===t){if(null===i&&(i=e.jstree.root),i=this.get_node(i),!i)return n.create_node.call(this,i,r,s,a,o);if(s=s===t?"last":s,!s.toString().match(/^(before|after)$/)&&!o&&!this.is_loaded(i))return n.create_node.call(this,i,r,s,a,o);r||(r={});var l,d,c,h,u,f=this._model.data,g=this.settings.unique.case_sensitive,_=this.settings.unique.duplicate;for(d=l=this.get_string("New node"),c=[],h=0,u=i.children.length;h<u;h++)c.push(g?f[i.children[h]].text:f[i.children[h]].text.toLowerCase());for(h=1;e.inArray(g?d:d.toLowerCase(),c)!==-1;)d=_.call(this,l,++h).toString();r.text=d}return n.create_node.call(this,i,r,s,a,o)}};var g=c.createElement("DIV");if(g.setAttribute("unselectable","on"),g.setAttribute("role","presentation"),g.className="jstree-wholerow",g.innerHTML="&#160;",e.jstree.plugins.wholerow=function(t,i){this.bind=function(){i.bind.call(this),this.element.on("ready.jstree set_state.jstree",e.proxy(function(){this.hide_dots()},this)).on("init.jstree loading.jstree ready.jstree",e.proxy(function(){this.get_container_ul().addClass("jstree-wholerow-ul")},this)).on("deselect_all.jstree",e.proxy(function(e,t){this.element.find(".jstree-wholerow-clicked").removeClass("jstree-wholerow-clicked")},this)).on("changed.jstree",e.proxy(function(e,t){this.element.find(".jstree-wholerow-clicked").removeClass("jstree-wholerow-clicked");var i,n,r=!1;for(i=0,n=t.selected.length;i<n;i++)r=this.get_node(t.selected[i],!0),r&&r.length&&r.children(".jstree-wholerow").addClass("jstree-wholerow-clicked")},this)).on("open_node.jstree",e.proxy(function(e,t){this.get_node(t.node,!0).find(".jstree-clicked").parent().children(".jstree-wholerow").addClass("jstree-wholerow-clicked")},this)).on("hover_node.jstree dehover_node.jstree",e.proxy(function(e,t){"hover_node"===e.type&&this.is_disabled(t.node)||this.get_node(t.node,!0).children(".jstree-wholerow")["hover_node"===e.type?"addClass":"removeClass"]("jstree-wholerow-hovered")},this)).on("contextmenu.jstree",".jstree-wholerow",e.proxy(function(t){t.preventDefault();var i=e.Event("contextmenu",{metaKey:t.metaKey,ctrlKey:t.ctrlKey,altKey:t.altKey,shiftKey:t.shiftKey,pageX:t.pageX,pageY:t.pageY});e(t.currentTarget).closest(".jstree-node").children(".jstree-anchor").first().trigger(i)},this)).on("click.jstree",".jstree-wholerow",function(t){t.stopImmediatePropagation();var i=e.Event("click",{metaKey:t.metaKey,ctrlKey:t.ctrlKey,altKey:t.altKey,shiftKey:t.shiftKey});e(t.currentTarget).closest(".jstree-node").children(".jstree-anchor").first().trigger(i).focus()}).on("click.jstree",".jstree-leaf > .jstree-ocl",e.proxy(function(t){t.stopImmediatePropagation();var i=e.Event("click",{metaKey:t.metaKey,ctrlKey:t.ctrlKey,altKey:t.altKey,shiftKey:t.shiftKey});e(t.currentTarget).closest(".jstree-node").children(".jstree-anchor").first().trigger(i).focus()},this)).on("mouseover.jstree",".jstree-wholerow, .jstree-icon",e.proxy(function(e){return e.stopImmediatePropagation(),this.is_disabled(e.currentTarget)||this.hover_node(e.currentTarget),!1},this)).on("mouseleave.jstree",".jstree-node",e.proxy(function(e){this.dehover_node(e.currentTarget)},this))},this.teardown=function(){this.settings.wholerow&&this.element.find(".jstree-wholerow").remove(),i.teardown.call(this)},this.redraw_node=function(t,n,r,s){if(t=i.redraw_node.apply(this,arguments)){var a=g.cloneNode(!0);e.inArray(t.id,this._data.core.selected)!==-1&&(a.className+=" jstree-wholerow-clicked"),this._data.core.focused&&this._data.core.focused===t.id&&(a.className+=" jstree-wholerow-hovered"),t.insertBefore(a,t.childNodes[0])}return t}},c.registerElement&&Object&&Object.create){var _=Object.create(HTMLElement.prototype);_.createdCallback=function(){var t,i={core:{},plugins:[]};for(t in e.jstree.plugins)e.jstree.plugins.hasOwnProperty(t)&&this.attributes[t]&&(i.plugins.push(t),this.getAttribute(t)&&JSON.parse(this.getAttribute(t))&&(i[t]=JSON.parse(this.getAttribute(t))));for(t in e.jstree.defaults.core)e.jstree.defaults.core.hasOwnProperty(t)&&this.attributes[t]&&(i.core[t]=JSON.parse(this.getAttribute(t))||this.getAttribute(t));e(this).jstree(i)};try{c.registerElement("vakata-jstree",{prototype:_})}catch(e){}}}}),function(e){"function"==typeof define&&define.amd?define(["jquery"],e):jQuery&&!jQuery.fn.hoverIntent&&e(jQuery)}(function(e){var t,i,n={interval:100,sensitivity:6,timeout:0},r=0,s=function(e){t=e.pageX,i=e.pageY},a=function(e,n,r,o){return Math.sqrt((r.pX-t)*(r.pX-t)+(r.pY-i)*(r.pY-i))<o.sensitivity?(n.off(r.event,s),delete r.timeoutId,r.isActive=!0,e.pageX=t,e.pageY=i,delete r.pX,delete r.pY,o.over.apply(n[0],[e])):(r.pX=t,r.pY=i,r.timeoutId=setTimeout(function(){a(e,n,r,o)},o.interval),void 0)},o=function(e,t,i,n){return delete t.data("hoverIntent")[i.id],n.apply(t[0],[e])};e.fn.hoverIntent=function(t,i,l){var d=r++,c=e.extend({},n);e.isPlainObject(t)?(c=e.extend(c,t),e.isFunction(c.out)||(c.out=c.over)):c=e.isFunction(i)?e.extend(c,{over:t,out:i,selector:l}):e.extend(c,{over:t,out:t,selector:i});var h=function(t){var i=e.extend({},t),n=e(this),r=n.data("hoverIntent");r||n.data("hoverIntent",r={});var l=r[d];l||(r[d]=l={id:d}),l.timeoutId&&(l.timeoutId=clearTimeout(l.timeoutId));var h=l.event="mousemove.hoverIntent.hoverIntent"+d;if("mouseenter"===t.type){if(l.isActive)return;l.pX=i.pageX,l.pY=i.pageY,n.off(h,s).on(h,s),l.timeoutId=setTimeout(function(){a(i,n,l,c)},c.interval)}else{if(!l.isActive)return;n.off(h,s),l.timeoutId=setTimeout(function(){o(i,n,l,c.out)},c.timeout)}};return this.on({"mouseenter.hoverIntent":h,"mouseleave.hoverIntent":h},c.selector)}}),function(e){e.fn.mnmenu=function(t){var i={};"undefined"!=typeof t&&"undefined"!=typeof t.levelSettings&&(i=t.levelSettings,delete t.levelSettings);var n=e.extend({},e.fn.mnmenu.defaults,t);n.levelSettings=e.extend({},n.levelSettings,i);var r=e(this);return e(window).resize(function(){e.fn.mnmenu.windowResize(r,n)}),this.each(function(){var t=e(this);"UL"!==t.prop("tagName").toUpperCase()&&e.error("This function can only be called in <ul> elements."),t.addClass(n.menuClassName),e.fn.mnmenu.levelRecursion(n,t,0),t.find("ul").each(function(){e(this).css("display","none")})}),r.find("li").each(function(){var t=e(this);e.fn.mnmenu.addEventListeners(t,n)}),e.fn.mnmenu.resetView(r,n),r},e.fn.mnmenu.windowResize=function(t,i){e.fn.mnmenu.resetView(t,i)},e.fn.mnmenu.mouseEnter=function(t,i){var n=e(window).width();clearTimeout(t.data("timer")),e.fn.mnmenu.elementsToHover(t,i).each(function(){e(this).addClass(i.hoverClassName)}),t.children("ul").each(function(){var t=e(this),r=t.parent("li"),s=r.closest("ul");if(t.is(":animated"))t.stop(!0,!0).show();else{for(var a=100,o=t;o.get(0)!==e(document).get(0);){var l=parseInt(o.css("z-index"));!isNaN(l)&&l>a&&(a=l),o=o.parent()}t.css("z-index",a+1);for(var d=0,c=t[0].className.split(/\s+/),h=0;h<c.length;h++)c[h].indexOf([i.levelClassPrefix,"-"].join(""))>=0&&(d=parseInt(c[h].substring(i.levelClassPrefix.length+1)));var u=i.levelSettings[d];"undefined"==typeof u&&(u=i.levelSettings[0]);var f="auto",g="auto",_="auto",p="auto";u.parentAttachmentPosition.toUpperCase().indexOf("W")>=0&&u.attachmentPosition.toUpperCase().indexOf("E")>=0?(g=r.outerWidth()+"px",r.offset().left-t.outerWidth()<0&&(f=r.outerWidth()+"px",g="auto")):u.parentAttachmentPosition.toUpperCase().indexOf("E")>=0&&u.attachmentPosition.toUpperCase().indexOf("E")>=0?g="0px":u.parentAttachmentPosition.toUpperCase().indexOf("E")>=0&&u.attachmentPosition.toUpperCase().indexOf("W")>=0?(f=r.outerWidth()+"px",s.offset().left+s.outerWidth()+t.outerWidth()>n&&(f="auto",g=r.outerWidth()+"px")):u.parentAttachmentPosition.toUpperCase().indexOf("W")>=0&&u.attachmentPosition.toUpperCase().indexOf("W")>=0&&(f="0px"),u.parentAttachmentPosition.toUpperCase().indexOf("N")>=0&&u.attachmentPosition.toUpperCase().indexOf("S")>=0?p=r.outerHeight()+"px":u.parentAttachmentPosition.toUpperCase().indexOf("S")>=0&&u.attachmentPosition.toUpperCase().indexOf("S")>=0?p="0px":u.parentAttachmentPosition.toUpperCase().indexOf("S")>=0&&u.attachmentPosition.toUpperCase().indexOf("N")>=0?_=r.outerHeight()+"px":u.parentAttachmentPosition.toUpperCase().indexOf("N")>=0&&u.attachmentPosition.toUpperCase().indexOf("N")>=0&&(_="0px"),t.css("left",f),t.css("right",g),t.css("top",_),t.css("bottom",p),t.slideDown(i.duration)}})},e.fn.mnmenu.mouseLeave=function(t,i){clearTimeout(t.data("timer")),e.fn.mnmenu.elementsToHover(t,i).each(function(){e(this).removeClass(i.hoverClassName)}),t.children("ul").each(function(){var n=e(this);t.data("timer",setTimeout(function(){n.hide(i.duration)},i.delay))})},e.fn.mnmenu.resetView=function(t,i){var n=["li."+i.responsiveMenuButtonClass].join(""),r=t.find(n).addBack(n);if(0!==r.length){var s=r.children("ul").children();t.append(s),r.remove(),e.fn.mnmenu.levelRecursion(i,t,0)}var a=0;if(t.find(["li.",i.levelClassPrefix,"-0"].join("")).each(function(){a+=e(this).outerWidth()}),e(window).width()<a+i.responsiveMenuWindowWidthFudge&&i.responsiveMenuEnabled===!0){var s=t.children(),r=e(["<li class='",i.responsiveMenuButtonClass," first'>",i.responsiveMenuButtonLabel,"<ul></ul></li>"].join(""));t.append(r),e.fn.mnmenu.addEventListeners(r,i),r.children("ul").append(s),e.fn.mnmenu.levelRecursion(i,t,0)}},e.fn.mnmenu.levelRecursion=function(t,i,n){if("LI"===i.prop("tagName").toUpperCase()){var r=!0;i.parent().children().first().get(0)===i.get(0)&&n>1&&(i.parent().closest("li").append(e(["<span ","class='",t.arrowClassName,"'></span>"].join("")).append(t.arrowCharacter)),i.addClass(t.firstClassName),r=!1),i.parent().children().last().get(0)===i.get(0)&&(i.addClass(t.lastClassName),r=!1),r&&i.addClass(t.middleClassName),n++}i.children().each(function(){var i=e(this);i.removeClass([t.levelClassPrefix,"-",n].join("")),i.removeClass([t.levelClassPrefix,"-",n-1].join("")),i.removeClass([t.levelClassPrefix,"-",n+1].join("")),i.addClass([t.levelClassPrefix,"-",n].join("")),e.fn.mnmenu.levelRecursion(t,i,n)})},e.fn.mnmenu.addEventListeners=function(t,i){if(e.fn.hoverIntent){var n=t;n.hoverIntent(function(){e.fn.mnmenu.mouseEnter(e(this),i)},function(){e.fn.mnmenu.mouseLeave(e(this),i)})}else{var n=t;n.mouseenter(function(){e.fn.mnmenu.mouseEnter(e(this),i)}),n.mouseleave(function(){e.fn.mnmenu.mouseLeave(e(this),i)})}},e.fn.mnmenu.elementsToHover=function(t,i){return e([t,t.children(":not(ul)")])},e.fn.mnmenu.defaults={menuClassName:"mnmenu",hoverClassName:"hover",levelClassPrefix:"level",arrowClassName:"arrow fa fa-caret-right",arrowCharacter:"",firstClassName:"first",middleClassName:"middle",lastClassName:"last",delay:150,duration:250,defaultParentAttachmentPosition:"NE",defaultAttachmentPosition:"NW",responsiveMenuEnabled:!0,responsiveMenuWindowWidthFudge:10,responsiveMenuButtonClass:"mnresponsive-button",responsiveMenuButtonLabel:"Menu"},e.fn.mnmenu.defaults.levelSettings={},e.fn.mnmenu.defaults.levelSettings[0]=new MNLevelSettings,e.fn.mnmenu.defaults.levelSettings[1]=new MNLevelSettings,e.fn.mnmenu.defaults.levelSettings[1].parentAttachmentPosition="SW",e.fn.mnmenu.defaults.levelSettings[1].attachmentPosition="NW"}(jQuery),function(e){"function"==typeof define&&define.amd?define(["jquery","jquery-ui/menu"],e):e(jQuery)}(function(e){var t="onselectstart"in document.createElement("div"),i=e.ui.menu.version.match(/^(\d)\.(\d+)/),n={major:parseInt(i[1],10),minor:parseInt(i[2],10)},r=n.major<2&&n.minor<11;e.widget("moogle.contextmenu",{version:"@VERSION",options:{addClass:"ui-contextmenu",autoFocus:!1,autoTrigger:!0,delegate:null,hide:{effect:"fadeOut",duration:"fast"},ignoreParentSelect:!0,menu:null,position:null,preventContextMenuForPopup:!1,preventSelect:!1,show:{effect:"slideDown",duration:"fast"},taphold:!1,uiMenuOptions:{},beforeOpen:e.noop,blur:e.noop,close:e.noop,create:e.noop,createMenu:e.noop,focus:e.noop,open:e.noop,select:e.noop},_create:function(){var i,n,r,s=this.options;if(this.$headStyle=null,this.$menu=null,this.menuIsTemp=!1,this.currentTarget=null,this.previousFocus=null,s.preventSelect){r=(e(this.element).is(document)?e("body"):this.element).uniqueId().attr("id"),i="#"+r+" "+s.delegate+" { -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; }",this.$headStyle=e("<style class='moogle-contextmenu-style' />").prop("type","text/css").appendTo("head");try{this.$headStyle.html(i)}catch(e){this.$headStyle[0].styleSheet.cssText=i}t&&this.element.delegate(s.delegate,"selectstart"+this.eventNamespace,function(e){e.preventDefault()})}this._createUiMenu(s.menu),n="contextmenu"+this.eventNamespace,s.taphold&&(n+=" taphold"+this.eventNamespace),this.element.delegate(s.delegate,n,e.proxy(this._openMenu,this))},_destroy:function(){this.element.undelegate(this.eventNamespace),this._createUiMenu(null),this.$headStyle&&(this.$headStyle.remove(),this.$headStyle=null)},_createUiMenu:function(t){var i,n=this.options;this.isOpen()&&(i=this.currentTarget,this._closeMenu(!0),this.currentTarget=i),this.menuIsTemp?this.$menu.remove():this.$menu&&this.$menu.menu("destroy").removeClass(this.options.addClass).hide(),this.$menu=null,this.menuIsTemp=!1,t&&(e.isArray(t)?(this.$menu=e.moogle.contextmenu.createMenuMarkup(t),this.menuIsTemp=!0):"string"==typeof t?this.$menu=e(t):this.$menu=t,this.$menu.hide().addClass(n.addClass).menu(e.extend(!0,{},n.uiMenuOptions,{blur:e.proxy(n.blur,this),create:e.proxy(n.createMenu,this),focus:e.proxy(n.focus,this),select:e.proxy(function(t,i){var r,s=e.moogle.contextmenu.isMenu(i.item),a=i.item.data("actionHandler");i.cmd=i.item.attr("data-command"),i.target=e(this.currentTarget),s&&n.ignoreParentSelect||(r=this._trigger.call(this,"select",t,i),a&&(r=a.call(this,t,i)),r!==!1&&this._closeMenu.call(this),t.preventDefault())},this)})))},_openMenu:function(t,i){var n,r,s=this.options,a=s.position,o=this,l=!!t.isTrigger,d={menu:this.$menu,target:e(t.target),extraData:t.extraData,originalEvent:t,result:null};if(s.autoTrigger||l){if(t.preventDefault(),this.currentTarget=t.target,!i){if(n=this._trigger("beforeOpen",t,d),r=d.result&&e.isFunction(d.result.promise)?d.result:null,d.result=null,n===!1)return this.currentTarget=null,!1;if(r)return r.done(function(){o._openMenu(t,!0)}),this.currentTarget=null,!1;d.menu=this.$menu}e(document).bind("keydown"+this.eventNamespace,function(t){t.which===e.ui.keyCode.ESCAPE&&o._closeMenu()}).bind("mousedown"+this.eventNamespace+" touchstart"+this.eventNamespace,function(t){e(t.target).closest(".ui-menu-item").length||o._closeMenu()}),e.isFunction(a)&&(a=a(t,d)),a=e.extend({my:"left top",at:"left bottom",of:void 0===t.pageX?t.target:t,collision:"fit"},a),this.$menu.show().css({position:"absolute",left:0,top:0}).position(a).hide(),s.preventContextMenuForPopup&&this.$menu.bind("contextmenu"+this.eventNamespace,function(e){e.preventDefault()}),this._show(this.$menu,s.show,function(){s.autoFocus&&(o.$menu.focus(),o.previousFocus=e(t.target)),o._trigger.call(o,"open",t,d)})}},_closeMenu:function(t){var i=this,n=!t&&this.options.hide;e(document).unbind("mousedown"+this.eventNamespace).unbind("touchstart"+this.eventNamespace).unbind("keydown"+this.eventNamespace),i.currentTarget=null,this.$menu?(this.$menu.unbind("contextmenu"+this.eventNamespace),this._hide(this.$menu,n,function(){i.previousFocus&&(i.previousFocus.focus(),i.previousFocus=null),i._trigger("close")})):i._trigger("close")},_setOption:function(t,i){switch(t){case"menu":this.replaceMenu(i)}e.Widget.prototype._setOption.apply(this,arguments)},_getMenuEntry:function(e){return this.$menu.find("li[data-command="+e+"]")},close:function(){this.isOpen()&&this._closeMenu()},enableEntry:function(e,t){this._getMenuEntry(e).toggleClass("ui-state-disabled",t===!1)},getMenu:function(){return this.$menu},isOpen:function(){return!!this.$menu&&!!this.currentTarget},open:function(e,t){t=t||{};var i=jQuery.Event("contextmenu",{target:e.get(0),extraData:t});return this.element.trigger(i)},replaceMenu:function(e){this._createUiMenu(e)},setEntry:function(t,i){var n,r=this._getMenuEntry(t);"string"==typeof i?e.moogle.contextmenu.updateTitle(r,i):(r.empty(),i.cmd=i.cmd||t,e.moogle.contextmenu.createEntryMarkup(i,r),e.isArray(i.children)&&(n=e("<ul/>").appendTo(r),e.moogle.contextmenu.createMenuMarkup(i.children,n)),this.getMenu().menu("refresh"))},showEntry:function(e,t){this._getMenuEntry(e).toggle(t!==!1)}}),e.extend(e.moogle.contextmenu,{createEntryMarkup:function(t,i){var n=null;i.attr("data-command",t.cmd),/[^\-\u2014\u2013\s]/.test(t.title)?(r?(n=e("<a/>",{html:""+t.title,href:"#"}).appendTo(i),t.uiIcon&&n.append(e("<span class='ui-icon' />").addClass(t.uiIcon))):(i.html(""+t.title),e.isFunction(t.action)&&i.data("actionHandler",t.action),t.uiIcon&&i.append(e("<span class='ui-icon' />").addClass(t.uiIcon))),e.isFunction(t.action)&&i.data("actionHandler",t.action),t.disabled&&i.addClass("ui-state-disabled"),t.addClass&&i.addClass(t.addClass),e.isPlainObject(t.data)&&i.data(t.data),null!=t.tooltip&&i.attr("title",t.tooltip)):i.text(t.title)},createMenuMarkup:function(t,i){var n,r,s,a;for(null==i&&(i=e("<ul class='ui-helper-hidden' />").appendTo("body")),n=0;n<t.length;n++)r=t[n],a=e("<li/>").appendTo(i),e.moogle.contextmenu.createEntryMarkup(r,a),e.isArray(r.children)&&(s=e("<ul/>").appendTo(a),e.moogle.contextmenu.createMenuMarkup(r.children,s));return i},isMenu:function(e){return r?e.has(">a[aria-haspopup='true']").length>0:e.is("[aria-haspopup='true']")},replaceFirstTextNodeChild:function(e,t){e.contents().filter(function(){return 3===this.nodeType}).first().replaceWith(t)},updateTitle:function(t,i){r?e.moogle.contextmenu.replaceFirstTextNodeChild(e("a",t),i):e.moogle.contextmenu.replaceFirstTextNodeChild(t,i)}})});var indexOf=[].indexOf||function(e){for(var t=0,i=this.length;t<i;t++)if(t in this&&this[t]===e)return t;return-1};!function(){var e,t,i,n,r,s,a,o,l,d,c,h,u,f,g,_,p,m,v,y,x,b,w,j,k,S,C,T,I,E,N,O,A,D,L,P,M,z,F,R,B,V,U,H,G,q,K,W,X,Y,J,Q,Z,ee,te,ie,ne,re,se,ae,oe,le,de,ce,he,ue,fe,ge,_e,pe,me,ve,ye,xe,be,we,je,ke,Se,Ce,Te,$e,Ie,Ee,Ne,Oe,Ae,De,Le,Pe,Me,ze,Fe,Re,Be,Ve,Ue,He,Ge,qe,Ke,We,Xe,Ye,Je,Qe,Ze,et,tt,it,nt,rt,st,at,ot,lt,dt,ct,ht,ut,ft,gt,_t,pt,mt,vt,yt,xt,bt,wt,jt,kt,St,Ct,Tt,$t,It,Et,Nt,Ot,At,Dt,Lt,Pt,Mt,zt;return $(document).ready(function(e){return $("#loading-screen").remove()}),S=15,C=0,e={stdcell:"/stdcell",compile:"/compile",simulate:"/simulate"},W={},K=[],q=[],Nt="",Ot="",c="",X=[],st=function(e,t,i,n,r){var s;return"function"==typeof i&&(r=n,n=i,i={}),s={type:t,url:window.location.protocol+"//"+window.location.host+e,async:!0,contentType:"application/json",data:JSON.stringify(i)||"",success:function(e){return n(e)},error:function(e){var t,i;try{return i=JSON.parse(e.responseText),r(i)}catch(i){return t=i,r({error:e.responseText})}}},$.ajax(s)},Q=function(e){var t;for(t=(e||"id")+"_"+Math.random().toString().slice(2)+"_"+(new Date).getTime();indexOf.call(q,t)>=0;)t=(e||"id")+"_"+Math.random().toString().slice(2)+"_"+(new Date).getTime();return q.push(t),t},i=function(e){return location.origin||(location.origin=location.protocol+"//"+location.host),location.origin+"/IDE/"+e},V=function(e){return Object.keys(e).map(function(t){return[t,e[t]].map(encodeURIComponent).join("=")}).join("&")},we=function(){return new RegExp("^[\\w\\.]+$","g")},le=function(){return new RegExp("^\\s*module\\s+(.+?)\\s*(#\\s*\\(([\\s\\S]+?)\\)\\s*)??\\s*((\\([\\s\\S]*?\\))?\\s*;)([\\s\\S]*?)endmodule","gm")},H=function(e){var t,i,n,r;for(null==e&&(e=""),e=e.replace(ae(),"").replace(de(),""),n=le(),r=[],t=n.exec(e);null!==t;)i=t[1],indexOf.call(r,i)<0&&r.push(i.trim()),t=n.exec(e);return r},ae=function(){return new RegExp("\\/\\/.*$","gm")},de=function(){return new RegExp("\\/\\*(.|[\\r\\n])*?\\*\\/","gm")},Oe=function(e){return null==e&&(e="Please wait.."),$("#loading-text").text(e),$("#loading-div-background").show()},Ne=function(){return $("#loading-div-background").hide()},P=function(e,t){return null!=e&&"string"==typeof e&&""!==e.trim()||(e="Unkown error has occurred."),noty({text:e,type:t,theme:"relax",layout:"topCenter",timeout:3e3,animation:{open:"animated fadeIn",close:"animated fadeOut",speed:500}})},D=function(e){return P(e.error||e,"error")},z=function(e){return P(e,"warning")},L=function(e){return P(e,"information")},M=function(e){return P(e,"success")},Le=function(e,t){var i;return i=$('<li class="ui-widget-content">'+e.message+"</li>"),$("#"+t).append(i),null!=e.file&&(i.data("fileId",e.file),i.data("line",e.line)),i.dblclick(function(e){var t,i,n;if(n=$(this),t=n.data("fileId"),i=n.data("line"),null!=t&&(_t(t),me()===t))return Ge(!1,function(e){var t;return e?D(e):"number"==typeof i&&(t=Z())?t.gotoLine(i):void 0})})},Ae=function(e){return Le(e,"error-list")},Pe=function(e){return Le(e,"warning-list")},De=function(e){return Le(e,"console-list")},u=function(){return $("#error-list").html("")},g=function(){return $("#warning-list").html("")},f=function(){return $("#console-list").html("")},h=function(){return u(),g(),f()},vt=function(e){var t,i,n;if("string"==typeof e){if("console"===(i=!e)||"error"===i||"warning"===i)return;t={console:0,error:1,warning:2},e=t[e]}else{if("number"!=typeof e)return;if(0===(n=!e)||1===n||2===n)return}return $("#log-tabs").tabs({active:e,heightStyle:"fill"})},$("#console-list").selectable({autoRefresh:!0,cancel:".ui-selected",stop:function(e,t){return $(e.target).children(".ui-selected").not(":first").removeClass("ui-selected")}}),$("#error-list").selectable({autoRefresh:!0,cancel:".ui-selected",stop:function(e,t){return $(e.target).children(".ui-selected").not(":first").removeClass("ui-selected")}}),$("#warning-list").selectable({autoRefresh:!0,cancel:".ui-selected",stop:function(e,t){return $(e.target).children(".ui-selected").not(":first").removeClass("ui-selected")}}),He=function(e){return $("#log-tabs").tabs("refresh"),$("#editor-tabs").tabs("refresh"),at()},Split(["#files","#editors-logs"],{sizes:[20,80],gutterSize:8,cursor:"col-resize",onDrag:He}),Split(["#editors","#logs"],{direction:"vertical",sizes:[70,30],gutterSize:8,cursor:"col-resize",onDrag:He}),$("#menu").mnmenu(),Te=null,v=null,o=function(e,t){return e.indexOf(t,e.length-t.length)!==-1&&(e=e.substring(0,e.length-t.length)),e},m=function(e,t,i,n,r){var s;return null==n&&(n=350),null==r&&(r=150),$("#dialog-confirm").html(t),s=!1,$("#dialog-confirm").dialog({resizable:!1,modal:!0,title:e,height:r,width:n,buttons:{OK:function(){return s=!0,$(this).dialog("close")},Cancel:function(){return $(this).dialog("close")}},close:function(){return i(s)}})},Qe=function(e,t,i,n,r){var s,a;return null==n&&(n=350),null==r&&(r=150),$("#dialog-confirm").html(t),s=!1,a=!1,$("#dialog-confirm").dialog({resizable:!1,modal:!0,title:e,height:r,width:n,buttons:{Yes:function(){return s=!0,$(this).dialog("close")},No:function(){return $(this).dialog("close")},Cancel:function(){return a=!0,$(this).dialog("close")}},close:function(){return i(s,a)}})},O=function(e,t,i,n){return null==i&&(i=350),null==n&&(n=180),$("#dialog-box").html(t),$("#dialog-box").dialog({resizable:!1,modal:!0,title:e,height:n,width:i,buttons:{OK:function(){return $(this).dialog("close")}},close:function(){return $("#dialog-box").html("")}})},me=function(){var e;return e=$("#files").jstree("get_selected"),null!=e&&1===e.length&&e[0]},he=function(e){return $("#files").jstree(!0).get_node(e)},pe=function(){var e;return e=me(),!!e&&he(e)},xe=function(e){return null==e&&(e=!1),e?he(v):pe()},fe=function(e){return null==e&&(e=!1),e?he(v):be()},Ie=function(e){return"folder"===e||"buildFolder"===e||"root"===e},be=function(){var e,t,i,n;if(n=pe()){if(Ie(n.type))return n;for(e=n.parent,t=he(e);!Ie(t.type);)e=t.parent,t=he(e);return t}return i=he("#").children,0===i.length?"":he(i[0])},se=function(){var e,t,i,n,r;if(null!=c)return he(c);for(r=he(he("#").children[0]).children,i=0,n=r.length;i<n;i++)if(e=r[i],t=he(e),"buildFolder"===t.type)return c=e,t;return!1},Ee=function(e){return $("#files").jstree("is_open",e)},Ke=function(e){var t,i;for($("#files").jstree("open_node",e),t=he(e).parent,i=[];null!=e&&"#"!==e&&null!=t&&"#"!==t;)$("#files").jstree("open_node",t),i.push(t=he(t).parent);return i},s=function(e,t,i,n){var r;return r="tree-item tree-file-item","folder"===n||"buildFolder"===n?r="tree-item tree-folder-item":"root"===n?r="tree-item tree-root-item":"module"===n&&(r="tree-item tree-module-item"),X.push({id:e,parent:t,text:i,li_attr:{class:r},type:n})},Dt=function(e,t){var i,n,r;for(n=0,r=X.length;n<r;n++)if(i=X[n],i.id===e)return i.text=t,!0;return!1},Lt=function(e,t){var i,n,r;for(n=0,r=X.length;n<r;n++)if(i=X[n],i.id===e)return i.parent=t,!0;return!1},Pt=function(e,t){var i,n,r,s;for(s="tree-item tree-file-item","folder"===t||"buildFolder"===t?s="tree-item tree-folder-item":"root"===t?s="tree-item tree-root-item":"module"===t&&(s="tree-item tree-module-item"),n=0,r=X.length;n<r;n++)if(i=X[n],i.id===e)return i.type=t,i.li_attr.class=s,!0;return!1},N=function(e){return X[e]=void 0},w=function(e,t,i,n,r){var a;return null==r&&(r="last"),a="tree-file-item","folder"===n||"buildFolder"===n?a="tree-folder-item":"root"===n?a="tree-root-item":"module"===n&&(a="tree-module-item"),$("#files").jstree(!0).create_node(t,{id:e,text:i,type:n,li_attr:{class:"tree-item "+a}},r,function(r){return Ee(t)||Ke(t),"root"===n&&Ke(e),s(e,t,i,n)}),he(e)},ue=function(e){return"string"==typeof e&&(e=he(e)),he(e.parent).children.indexOf(e.id)},b=function(e,t,i){return w(e,t,i,"folder")},E=function(e){return $("#files").jstree(!0).delete_node(e),J("tabs-"+e)},nt=function(e){return"string"==typeof e&&(e=he(e)),$("#files").jstree(!0).rename_node(e,oldName)},_t=function(e){return $("#files").jstree(!0).deselect_all(),$("#files").jstree("select_node",e).trigger("select_node.jstree")},T=function(e){var t,i,n,r,s;if(r=he(e)){for(s=r.children,i=0,n=s.length;i<n;i++)t=s[i],E(t);return!0}return!1},yt=function(e,t){return $("#files").jstree("set_id",e,t)},ke=function(e,t){var i,n,r,s,a;for(s=he(e),a=s.children,n=0,r=a.length;n<r;n++)if(i=a[n],he(i).text===t)return i;return!1},Ce=function(e){return $("#menu-"+e).hide()},kt=function(e){return $("#menu-"+e).show()},B=function(e){return $("#menu-"+e).removeClass("disabled-menu-item")},A=function(e){var t;if(t=$("#menu-"+e),!t.hasClass("disabled-menu-item"))return t.addClass("disabled-menu-item")},G=function(e,t,i,n,r,s){var a,l,d,c,h;return null==r&&(r=""),d='<form action="#" id="new-file-form">\n\t<fieldset class="ui-helper-reset">\n\t\t<label for="file_title">'+t+'</label>\n\t\t<input type="text" name="file_title" id="file_title" value="'+i+'" class="ui-widget-content ui-corner-all">\n\t</fieldset>\n</form>',$("#prompt-dialog").html(d),$("#new-file-form").on("submit",function(e){return e.preventDefault(),e.stopPropagation()}),a=!1,l="",h=!1,c=null,$("#prompt-dialog").dialog({resizable:!1,modal:!0,title:e,height:130,width:320,buttons:{Create:function(){var e,t,i;if(l=$("#file_title").val(),""!==l.trim())return l=o(l,r),l=""+l+r,i=$(this),(c=ke(n.id,l))?(t="Overwrite "+l,e='<p><span class="ui-icon ui-icon-alert" style="float:left; margin:0 7px 20px 0;"></span>"'+l+'" already exists. Are you sure you want to overwrite it?</p>',m(t,e,function(e){if(e)return a=!0,h=!0,i.dialog("close")})):(a=!0,i.dialog("close"))},Cancel:function(){return $(this).dialog("close")}},close:function(){return $("#prompt-dialog").html(""),s(a,l,h,c)}}),$("#prompt-dialog").keypress(function(e){var t;if(13===e.keyCode)return t=$("#prompt-dialog").parent().find('.ui-button:contains("Create")'),t.click(),e.preventDefault(),e.stopPropagation()})},Fe=function(e,t,i,n,r,s){var a,l,d,c,h,u;return null==r&&(r=""),d='<form action="#" id="new-file-form">\n\t<fieldset class="ui-helper-reset">\n\t\t<label for="file_title">'+t+'</label>\n\t\t<input type="text" name="file_title" id="file_title" value="'+i+'" class="ui-widget-content ui-corner-all">\n                <div class ="synth-checkbox-div">\n                    <label class="ui-widget ui-corner-all synth-checkbox-label" for="seq"><input type="checkbox" id="seq" class="ui-widget ui-corner-all synth-checkbox"><span class="synth-checkbox-text">Sequential</span></label>\n                </div>\n            </fieldset>\n</form>',$("#prompt-dialog").html(d),$("#new-file-form").on("submit",function(e){return e.preventDefault(),e.stopPropagation()}),a=!1,l="",h=!1,c=null,u=!1,$("#prompt-dialog").dialog({resizable:!1,modal:!0,title:e,height:160,width:320,buttons:{Create:function(){var e,t,i;if(l=$("#file_title").val(),""!==l.trim())return u=$("#seq").is(":checked"),l=o(l,r),l=""+l+r,i=$(this),
(c=ke(n.id,l))?(t="Overwrite "+l,e='<p><span class="ui-icon ui-icon-alert" style="float:left; margin:0 7px 20px 0;"></span>"'+l+'" already exists. Are you sure you want to overwrite it?</p>',m(t,e,function(e){if(e)return a=!0,h=!0,i.dialog("close")})):(a=!0,i.dialog("close"))},Cancel:function(){return $(this).dialog("close")}},close:function(){return $("#prompt-dialog").html(""),s(a,l,h,c,u)}}),$("#prompt-dialog").keypress(function(e){var t;if(13===e.keyCode)return t=$("#prompt-dialog").parent().find('.ui-button:contains("Create")'),t.click(),e.preventDefault(),e.stopPropagation()})},zt=function(e,t,i){var n,r,s,a,o,l,d,c,h;for(c="",s="",c=0===e?'<select class="prompt-select" name="theme" tabindex="0" id="options-list">\n<option value="0" selected>Dark</option>\n<option value=1>Light</option>\n</select>':'<select class="prompt-select" name="options-list" tabindex="0" id="options-list">\n<option value="0">Dark</option>\n<option value=1 selected>Light</option>\n</select>',l=6;l<=60;)s=l===t?"\t"+s+'<option value="'+l+'" selected>'+l+"</option>\n":"\t"+s+'<option value="'+l+'">'+l+"</option>\n",l<16?l++:l+=l<32?2:l<48?4:6;return s='<select class="prompt-select" name="font" tabindex="0" id="font">\n'+s+"\n</select>",o='<form action="#" id="new-file-form">\n\t<fieldset class="ui-helper-reset">\n                <div>\n        \t\t\t<label for="theme">Theme:</label>\n                    <br>\n                    <br>\n            \t\t\t'+c+'\n                    <br>\n                    <br>\n                </div>\n\t\t<label for="font">Font Size:</label>\n                <br>\n                <br>\n\t\t'+s+'\n                <br>\n                <br>\n                <div class ="synth-checkbox-div">\n                    <label class="ui-widget ui-corner-all synth-checkbox-label" for="defaultSettings"><input type="checkbox" name="defaultSettings" id="defaultSettings" class="ui-widget ui-corner-all synth-checkbox"><span class="synth-checkbox-text">Remember these settings for upcoming projects</span></label>\n                </div>\n            </fieldset>\n</form>',$("#prompt-dialog").html(o),$("#new-file-form").on("submit",function(e){return e.preventDefault(),e.stopPropagation()}),n=!1,h=null,a=null,r=!1,$("#prompt-dialog").dialog({resizable:!1,modal:!0,title:"Workspace Settings",height:300,width:320,buttons:{Submit:function(){var e;if(h=parseInt($("#options-list").val()),a=parseInt($("#font").val()),r=$("#defaultSettings").is(":checked"),!isNaN(h)&&!isNaN(a))return e=$(this),n=!0,e.dialog("close")},Cancel:function(){return $(this).dialog("close")}},close:function(){return $("#prompt-dialog").html(""),i(n,h,a,r)}}),d=function(e){var t;if(13===e.keyCode)return t=$("#prompt-dialog").parent().find('.ui-button:contains("Submit")'),t.click(),e.preventDefault(),e.stopPropagation()},$("#prompt-dialog").parent().keypress(d),$("#options-list").selectmenu().addClass("prompt-overflow"),$("#font").selectmenu().addClass("prompt-overflow"),$("#prompt-dialog").parent().focus()},ut=function(e,t,i,n){var r,s,a;return s='<form action="#" id="new-file-form">\n\t<fieldset class="ui-helper-reset">\n\t\t<label for="search_query">'+t+'</label>\n\t\t<input type="text" name="search_query" id="search_query" value="'+i+'" class="ui-widget-content ui-corner-all">\n\t</fieldset>\n</form>',$("#prompt-dialog").html(s),$("#new-file-form").on("submit",function(e){return e.preventDefault(),e.stopPropagation()}),r=!1,a="",$("#prompt-dialog").dialog({resizable:!1,modal:!0,title:e,height:130,width:320,buttons:{Search:function(){var e;if(a=$("#search_query").val(),""!==a.trim())return e=$(this),r=!0,e.dialog("close")},Cancel:function(){return $(this).dialog("close")}},close:function(){return $("#prompt-dialog").html(""),n(r,a)}}),$("#prompt-dialog").keypress(function(e){var t;if(13===e.keyCode)return t=$("#prompt-dialog").parent().find('.ui-button:contains("Search")'),t.click(),e.preventDefault(),e.stopPropagation()})},Ct=function(e,t){var i,n,r,s,a,l,d,c,h,u,f,g,_;for(f="",r=!1,a=0,d=e.length;a<d;a++)h=e[a],r?f="\t"+f+'<option value="'+h.id+'">'+h.text+"</option>\n":(f="\t"+f+'<option value="'+h.id+'">'+h.text+"</option>\n",r=!0);return f='<select class="prompt-select" name="options-list" tabindex="0" id="options-list">\n'+f+"</select>",s='<form action="#" id="new-file-form">\n\t<fieldset class="ui-helper-reset prompt-fieldset">\n                <label for="file_title">Netlist File Name: </label>\n                <input type="text" name="file_title" id="file_title" value="netlist.v" class="ui-widget-content ui-corner-all">\n\t\t<label for="options-list" class="prompt-label module-label">Standard Cell Library</label>\n\t\t'+f+'\n                <div class="synth-options" id="synth-options">\n                    <div class ="synth-checkbox-div">\n                        <label class="ui-widget ui-corner-all synth-checkbox-label" for="synth-flatten"><input type="checkbox" id="synth-flatten" class="ui-widget ui-corner-all synth-checkbox" checked><span class="synth-checkbox-text">flatten</span></label>\n                    </div>\n                    <div class ="synth-checkbox-div">\n                        <label class="ui-widget ui-corner-all synth-checkbox-label" for="synth-purge"><input type="checkbox" id="synth-purge" class="ui-widget ui-corner-all synth-checkbox" checked><span class="synth-checkbox-text">purge</span></label>\n                    </div>\n                    <div class ="synth-checkbox-div">\n                        <label class="ui-widget ui-corner-all synth-checkbox-label" for="synth-proc"><input type="checkbox" id="synth-proc" class="ui-widget ui-corner-all synth-checkbox" checked><span class="synth-checkbox-text">proc</span></label>\n                    </div>\n                    <div class ="synth-checkbox-div">\n                        <label class="ui-widget ui-corner-all synth-checkbox-label" for="synth-memorymap"><input type="checkbox" id="synth-memorymap" class="ui-widget ui-corner-all synth-checkbox" checked><span class="synth-checkbox-text">memory_map</span></label>\n                    </div>\n                </div>\n\t</fieldset>\n</form>',$("#prompt-dialog").html(s),i=!1,n="",_=(e[0]||{id:0}).id,u={flatten:!0,purge:!0,proc:!0},g=!1,c=null,$("#prompt-dialog").dialog({resizable:!1,modal:!0,title:"Enter synthesis options..",height:220,width:380,buttons:{Synthesize:function(){var e,t,r;if(n=$("#file_title").val(),""!==n.trim()&&(_=$("#options-list").val(),""!==_.trim()))return n=o(n,".v"),n+=".v",u.flatten=$("#synth-flatten").is(":checked"),u.purge=$("#synth-purge").is(":checked"),u.proc=$("#synth-proc").is(":checked"),u.memorymap=$("#synth-memorymap").is(":checked"),r=$(this),(c=ke(se().id,n))?(t="Overwrite "+n,e='<p><span class="ui-icon ui-icon-alert" style="float:left; margin:0 7px 20px 0;"></span>"'+n+'" already exists. Are you sure you want to overwrite it?</p>',m(t,e,function(e){if(e)return i=!0,g=!0,r.dialog("close")})):(i=!0,r.dialog("close"))},Cancel:function(){return $(this).dialog("close")}},close:function(){return $("#prompt-dialog").html(""),t(i,n,_,u,g,c)}}),l=function(e){var t;if(13===e.keyCode)return t=$("#prompt-dialog").parent().find('.ui-button:contains("Select")'),t.click(),e.preventDefault(),e.stopPropagation()},$("#prompt-dialog").parent().keypress(l),$("#options-list").selectmenu().addClass("prompt-overflow"),$("#prompt-dialog").parent().focus()},Re=function(e,t,i,n,r,s,a,l){var d,c,h,u,f,g,_,p,v,y,x,b;for(null==a&&(a=""),x="",h=!1,f=0,_=r.length;f<_;f++)y=r[f],h?x="\t"+x+'<option value="'+y+'">'+y+"</option>\n":(x="\t"+x+'<option value="'+y+'">'+y+"</option>\n",h=!0);return x='<select class="prompt-select" name="options-list" tabindex="0" id="options-list">\n'+x+"</select>",u='<form action="#" id="new-file-form">\n\t<fieldset class="ui-helper-reset prompt-fieldset">\n                <label for="file_title">'+t+'</label>\n                <input type="text" name="file_title" id="file_title" value="'+i+'" class="ui-widget-content ui-corner-all">\n\t\t<label for="options-list" class="prompt-label module-label">'+n+"</label>\n\t\t"+x+"\n\t</fieldset>\n</form>",$("#prompt-dialog").html(u),d=!1,c="",v="",b=!1,p=null,$("#prompt-dialog").dialog({resizable:!1,modal:!0,title:e,height:200,width:320,buttons:{Create:function(){var e,t,i;if(c=$("#file_title").val(),""!==c.trim()&&(v=$("#options-list").val(),""!==v.trim()))return c=o(c,a),c=""+c+a,i=$(this),(p=ke(s.id,c))?(t="Overwrite "+c,e='<p><span class="ui-icon ui-icon-alert" style="float:left; margin:0 7px 20px 0;"></span>"'+c+'" already exists. Are you sure you want to overwrite it?</p>',m(t,e,function(e){if(e)return d=!0,b=!0,i.dialog("close")})):(d=!0,i.dialog("close"))},Cancel:function(){return $(this).dialog("close")}},close:function(){return $("#prompt-dialog").html(""),l(d,c,v,b,p)}}),g=function(e){var t;if(13===e.keyCode)return t=$("#prompt-dialog").parent().find('.ui-button:contains("Select")'),t.click(),e.preventDefault(),e.stopPropagation()},$("#prompt-dialog").parent().keypress(g),$("#options-list").selectmenu().addClass("prompt-overflow"),$("#prompt-dialog").parent().focus()},We=function(e,t,i,n){var r,s,a,o,l,d,c,h,u,f;for(f="",o=!1,d=0,h=i.length;d<h;d++)u=i[d],o?f="\t"+f+'<option value="'+u.id+'">'+u.text+"</option>\n":(f="\t"+f+'<option value="'+u.id+'">'+u.text+"</option>\n",o=!0);return f='<select class="prompt-select" name="options-list" tabindex="0" id="options-list">\n'+f+"</select>",l='<form action="#" id="new-file-form">\n\t<fieldset class="ui-helper-reset prompt-fieldset">\n\t\t<label for="options-list" class="prompt-label">'+t+"</label>\n\t\t"+f+"\n\t</fieldset>\n</form>",$("#prompt-dialog").html(l),$("#new-file-form").on("submit",function(e){return e.preventDefault(),e.stopPropagation()}),r=!1,s=null,a="",$("#prompt-dialog").dialog({resizable:!1,modal:!0,title:e,height:150,width:280,open:function(e,t){},buttons:{Select:function(){var e;if(s=$("#options-list").val(),null!=s&&""!==s.trim())return a=$("#options-list").children("option").filter(":selected").text(),e=$(this),r=!0,e.dialog("close")},Cancel:function(){return $(this).dialog("close")}},close:function(){return $("#prompt-dialog").html(""),n(r,s,a)}}),c=function(e){var t;if(13===e.keyCode)return t=$("#prompt-dialog").parent().find('.ui-button:contains("Select")'),t.click(),e.preventDefault(),e.stopPropagation()},$("#prompt-dialog").parent().keypress(c),$("#options-list").selectmenu().addClass("prompt-overflow"),$("#prompt-dialog").parent().focus()},Ue=function(e){var t,i;if(null==e&&(e=!1),i=fe(e),"folder"!==(t=!i.type)&&"root"!==t)return Fe("Enter module name..","Module Name: ","",i,".v",function(e,t,n,r,s){var a,l,d,c,h,u,f,g,_,p,m;if(e){for(Oe(),t=o(t,".v"),t+=".v",_=t,_.indexOf(".v",_.length-2)!==-1&&(_=_.substring(0,_.length-2)),n&&E(r),l=Q("verilog"),c=i.id,a="",a=s?"// file: "+t+"\n\n`timescale 1ns/1ns\n\nmodule "+_+"(clk, rst);\n    input clk, rst;\n\n    always @(posedge clk) begin\n        if (!rst) begin\n            //Reset logic goes here.\n        end\n        else begin\n            //Sequential logic goes here.\n        end\n    end\nendmodule":"// file: "+t+"\n\n`timescale 1ns/1ns\n\nmodule "+_+";\n\nendmodule",d="verilog",m=w(l,c,t,d),x(m,a),p=H(a),T(l),h=0,u=p.length;h<u;h++)f=p[h],g=f+"_"+t+"_"+f+"_"+(new Date).valueOf()+"_"+(""+Math.random()).split(".")[1],w(g,l,f,"module");return W[l]=a,Ne()}})},Ve=function(e){var t,i;if(null==e&&(e=!1),i=fe(e),"folder"!==(t=!i.type)&&"root"!==t)return Oe(),je(function(e,t){return Ne(),e?D(e):We("Select Source Module","Module File Name: ",t,function(e,t,n){var r;if(e)return n=o(n,".v"),r=n+"_tb.v",Oe(),ot(t,function(e,n,s,a,l){return Ne(),e?D(e):"verilog"===a||"exverilog"===a?Re("Enter testbench name","Testbench Name: ",r,"Target Module: ",l,i,".v",function(e,l,d,c,h){var u,f;if(e)return l=o(l,".v"),r=l+".v",Oe(),d=r,d.indexOf(".v",d.length-2)!==-1&&(d=d.substring(0,d.length-2)),c&&E(h),s=r,t=Q("testbench"),u=i.id,n="// file: "+s+"\n\n`timescale 1ns/1ns\n\nmodule "+d+";\n\nendmodule",W[t]=t,a="testbench",f=w(t,u,s,a),x(f,n),Ne()}):void 0})})})},Be=function(e){var t,i;if(null==e&&(e=!1),i=fe(e),"folder"!==(t=!i.type)&&"root"!==t)return G("Enter folder name..","Folder Name: ","Untitled Folder",i,"",function(e,t,n,r){var s,a,o,l;if(e)return Oe(),s=Q("folder"),o=i.id,a="folder",n&&E(r),l=w(s,o,t,a),_t(l.id),Ne()})},dt=function(e,t,i){var n,r,s,a;return r=he(e),null==r?i({error:"Failed to get file node"}):(Oe(),e=r.id,n=r.text,s=r.type,W[e]=t,a=[],"verilog"!==s&&"exverilog"!==s||(a=H(t)),Ne(),"function"==typeof i?i(null,e,n,s,t,a):void 0)},ct=function(e){var t,i,n,r,s,a,o;if(null==e&&(e=!1),t=Z()){if(i=t.tab,i.data("saved"))return;return r=t.getValue(),n=i.data("fileId"),s="tabs-"+n,dt(n,r,function(e,t,n,r,a,o){var l,d,c,h;if(e)return D(e);if("verilog"===r||"exverilog"===r)for(T(t),l=0,d=o.length;l<d;l++)c=o[l],h=c+"_"+n+"_"+c+"_"+(new Date).valueOf()+"_"+(""+Math.random()).split(".")[1],w(h,t,c,"module");return i.data("saved",!0),xt(s,n)})}if(a=ne()){if(o=a.tab,o.data("saved"))return;return r=a.exportTimingDiagram(),n=o.data("fileId"),s="tabs-"+n,dt(n,r,function(e,t,i,n,r,a){return e?D(e):(o.data("saved",!0),xt(s,i))})}},ht=!0,ft=function(e){return null==e&&(e=!1),ut("File Search","File Name: ","",function(e,t){if(e)return $("#files").jstree(!0).search(t),ht=!1})},At=function(e){var t;if(null==e&&(e=!1),t=Z(),null!=t&&t)return t.undo()},Ze=function(e){var t;if(null==e&&(e=!1),t=Z(),null!=t&&t)return t.redo()},gt=function(e){var t;if(null==e&&(e=!1),t=Z(),null!=t&&t)return t.selectAll()},Y=function(e){var t;if(null==e&&(e=!1),t=Z(),null!=t&&t)return t.execCommand("find")},rt=function(e){var t;if(null==e&&(e=!1),t=Z(),null!=t&&t)return t.execCommand("replace")},y=function(e){var t,i;if(null==e&&(e=!1),i=xe(e),i&&"verilog"!==(t=!i.type)&&"exverilog"!==t&&"testbench"!==t)return $("#files").jstree(!0).copy(i)},k=function(e){var t,i;if(null==e&&(e=!1),i=xe(e),i&&"verilog"!==(t=!i.type)&&"exverilog"!==t&&"testbench"!==t)return $("#files").jstree(!0).cut(i)},Ye=null,Xe=function(e){var t,i,n,r,a,o,l,d,c;if(null==e&&(e=!1),c=xe(e),$("#files").jstree(!0).can_paste()&&("folder"===(l=c.type)||"root"===l))return i=$("#files").jstree(!0).get_buffer(),d=i.node[0],o=!1,a=!1,t=function(e){var t,i,n,r,l;return t=Q(d.type),i=d.fileName,l=c.id,n=d.type,r="file",o&&E(a),$("#files").jstree(!0).paste(c),"copy"===e?(s(t,l,i,n),W[t]=W[d.id]):"move"===e&&Lt(d.id,l),Ne(),Ye!==t&&yt(Ye,t),Ee(c)||Ke(c.id),_t(t)},"copy_node"===i.mode?(a=ke(c.id,i.node[0].text))?(r="Overwrite "+i.node[0].text,n='<p><span class="ui-icon ui-icon-alert" style="float:left; margin:0 7px 20px 0;"></span>"'+i.node[0].text+'" already exists. Are you sure you want to overwrite it?</p>',m(r,n,function(e){if(e)return o=!0,Oe(),t("copy")})):(Oe(),t("copy")):"move_node"===i.mode?(a=ke(c.id,i.node[0].text))?(r="Overwrite "+i.node[0].text,n='<p><span class="ui-icon ui-icon-alert" style="float:left; margin:0 7px 20px 0;"></span>"'+i.node[0].text+'" already exists. Are you sure you want to overwrite it?</p>',m(r,n,function(e){if(e)return o=!0,Oe(),t("move")})):(Oe(),t("move")):void 0},$e=function(e){var t,i;if(null==e&&(e=!1),i=xe(e),i&&"exverilog"===i.type)return t=i.id,Oe(),Pt(t,"verilog"),$("#files").jstree(!0).set_type(i,"verilog"),Ne()},U=function(e){var t,i;if(null==e&&(e=!1),i=xe(e),i&&"verilog"===i.type)return t=i.id,Oe(),Pt(t,"exverilog"),$("#files").jstree(!0).set_type(i,"exverilog"),Ne()},it=function(e){var t,i,n,r;return null==e&&(e=!1),r=xe(e),"root"===r.type?D("Cannot rename repository root."):"buildFolder"===r.type?D("Cannot rename read-only directory."):(i=r.id,n=r.text,t=function(){return nt(updatedNode,n)},$("#files").jstree(!0).edit(r,null,function(e,t,n){var r,s,a,o,l;if(!n)return t?(Oe(),i=e.id,r=e.text,Dt(i,r),o="tabs-"+i,a=$("#"+o),a.length&&(s=a.data("saved"),l=r,null==s||s||(l+=" *"),xt(o,l)),Ne()):D("A file with the same name already exists.")}))},I=function(e){var t,i,n,r;return null==e&&(e=!1),r=xe(e),"root"===r.type?D("Cannot delete repository root."):"buildFolder"===r.type?D("Cannot delete read-only directory."):(n=r.text,i="Delete "+r.text,t='<p><span class="ui-icon ui-icon-alert" style="float:left; margin:0 7px 20px 0;"></span>Are you sure you want to delete "'+r.text+'"?</p>',m(i,t,function(e){var t;if(e&&r)return Oe(),t=r.id,N(t),E(t),W[t]=void 0,Ne(),P(n+" was deleted successfully.")}))},F=function(e){var t,i,n,r,a;if(null==e&&(e=!1),a=xe(e),"folder"!==(n=a.type)&&"buildFolder"!==n&&"root"!==n&&"module"!==n)return r=a.id,i="Duplicate "+a.text,t='<p>Are you sure you want to duplicate "'+a.text+'"?</p>',m(i,t,function(e){var t,i,n,o,l,d,c,h,u,f,g,_,p;if(e){if(c=a.text,i=void 0,o=/(.+)\.([0-9a-z]+)$/i,"verilog"!==(p=a.type)&&"exverilog"!==p&&"testbench"!==p||!o.test(c)){if("folder"!==a.type)return D({error:"Cannot duplicate the selected file type."});if(n=/(.+)_\d+ *$/,n.test(c)&&(c=n.exec(c)[1]),ke(a.parent,c))for(i=c+"_2",u=3;ke(a.parent,i);)i=c+"_"+u,u++;else i=c}else if(g=o.exec(c),t=g[1],l=g[2],n=/(.+)_\d+ *$/,n.test(t)&&(t=n.exec(t)[1]),f=ke(a.parent,t+"."+l))for(i=t+"_2."+l,u=3;ke(a.parent,i);)i=t+"_"+u+"."+l,u++;else i=t+"."+l;return d=Q(a.type),c=i,_=a.parent,h=a.type,w(d,_,c,h,ue(r)+1),W[d]=W[a.id],s(d,_,i,a.type),_t(d)}})},Tt=function(t){return null==t&&(t=!1),null!=Nt&&Ot?lt(!1,function(t,i){if(!i)return t?D(t):ve(function(t,i){return t?D(t):Ct(i,function(t,i,n,r,a,l){var d,u,f,g;if(t){for(i=o(i,".v"),i+=".v",Oe(),g={files:[],stdcell:n,options:r,name:i,topModule:Nt,topModuleFileId:Ot},u=0,f=X.length;u<f;u++)d=X[u],"verilog"===d.type&&g.files.push({id:d.id,name:d.text,content:W[d.id]});return st(e.compile,"POST",g,function(e){var t,n,r,o,d,u,f,g;return h(),Ne(),n=Q("netlist"),r="netlist",d=c,f=e.netlist||"",t=e.log.errors||[],g=e.log.warnings||[],u=e.log.report||"","string"==typeof u&&(u.split("\n").forEach(function(e){if(""!==e.trim())return De({message:e})}),vt(0)),g.length>0&&(g.forEach(function(e){return Pe(e)}),vt(2)),Ne(),0===t.length?(E(n),L(0===g.length?"Synthesis completed successfully.":"Synthesis completed with warnings."),a&&E(l),s(n,d,i,r),o=w(n,d,i,r),x(o,f),_t(n)):(t.forEach(function(e){return Ae(e)}),vt(1))},function(e){return Ne(),D(e)})}})})}):D("You must set top module first.")},St=function(t){var i,n;if(null==t&&(t=!1),n=xe(t),"testbench"===(i=n.type)||"vcd"===i)return lt(!1,function(t,i){var r,a;if(!i)return t?D(t):(r="simulation.vcd",a=n.id,"vcd"===n.type&&(r=n.text),G("Enter simulation name..","VCD File Name: ",r,se(),".vcd",function(t,i,r,l){var d,u,f,g;if(t){for(i=o(i,".vcd"),i+=".vcd",g={files:[],name:i,testbenchId:a},u=0,f=X.length;u<f;u++)d=X[u],"verilog"===d.type&&g.files.push({id:d.id,name:d.text,content:W[d.id]});return g.files.push({id:a,name:n.text,content:W[a]}),Oe(),st(e.simulate,"POST",g,function(e){var t,n,r,a,o,l,d;if(h(),o=e.log.filter(function(e){return"string"==typeof e&&""!==e.trim()}),t=e.errors.filter(function(e){return"object"==typeof e&&""!==e.message.trim()}),d=e.warnings.filter(function(e){return"object"==typeof e&&""!==e.message.trim()}),r=Q("vcd"),a="vcd",n=e.wave,l=c,o.length>0&&(o.forEach(function(e){return De({message:e})}),vt(0)),d.length>0&&(d.forEach(function(e){return Pe(e)}),vt(2)),0===t.length){if(null==r)return Ne(),D("Fatal error has occured during simulation.");E(r),P(0===d.length?"Simulation completed successfully.":"Simulation completed with warnings."),w(r,l,i,a),s(r,l,i,a),W[r]=n,qe(r)}else t.forEach(function(e){return Ae(e)}),vt(1);return Ne()},function(e){return D(e),Ne()})}}))})},Mt=function(){return ge(function(e,t){return e?(Ne(),"function"==typeof cb?cb(e):D(e)):zt(t.theme,t.fontSize,function(e,t,i,n){var r,s;if(e)return s=re(),r=[],C=t,S=i,s.forEach(function(e){var n;if(n=$("#"+e).data("editor"))return n.setFontSize(i),1===t?n.setTheme("ace/theme/crimson_editor"):n.setTheme("ace/theme/twilight")}),P("Settings updated successfully.")})})},t=function(e){var t,i,n,r;return null==e&&(e=!1),i="About CloudV",t="<p>CloudV is an online digital design, project management, and collaboration environment. For inquiries, please contact agiza@cloudv.io </p>",r=350,n=180,O(i,t,r,n)},ot=function(e,t){var i,n,r,s,a;return r=he(e),null==r?t({error:"Failed to get file node"}):(i=W[e],n=r.text,s=r.type,a=[],"verilog"!==s&&"exverilog"!==s||(a=H(i)),t(null,i,n,s,a))},qe=function(e,t){var i,n;return"string"==typeof e&&(e=he(e)),i=e.id,n="tabs-"+i,ye(n)?(mt(n),"function"==typeof t&&t(null)):(Oe(),ot(e.id,function(n,r,s,a,o){var l,d,c,h;if(n)return Ne(),"function"==typeof t?t(n):D(n);if(console.log(r),console.log(W),"verilog"===a||"exverilog"===a)for(T(i),l=0,d=o.length;l<d;l++)c=o[l],h=c+"_"+s+"_"+c+"_"+(new Date).valueOf()+"_"+(""+Math.random()).split(".")[1],w(h,i,c,"module");return"verilog"===a||"testbench"===a||"netlist"===a||"exverilog"===a?x(e,r):"vcd"===a&&j(e,r),Ne(),_t(e.id),"function"==typeof t?t(null):void 0})),Ke(i)},Ge=function(e,t){var i,n;if(null==e&&(e=!1),n=xe(e),null!=n&&n&&("verilog"===(i=n.type)||"testbench"===i||"netlist"===i||"vcd"===i||"exverilog"===i))return console.log(n),qe(n,t)},_=function(e){var t,i,n,r,s;if(null==e&&(e=!1),s=xe(e),r="tabs-"+s.id,n=$("#"+r),n.length&&(t=n.data("editor")))return i=n.data("fileId"),p(r)},bt=function(e,t){var i;if(null==e&&(e=!1),i=xe(e),"module"===i.type)return Oe(),Ot=i.parent,Nt=i.text,Ne(),"function"==typeof t?t(null):P(Nt+" was set as top project module.")},$("#toolbar-synthesize").button({icons:{primary:"ui-icon-refresh"}}).click(function(e){return Tt()}),$("#toolbar-simulate").button({icons:{primary:"ui-icon-play"}}).click(function(e){return St()}),Et=$(".toolbar"),ze=$(".menubar"),et=function(e){var t,i,n,r,s;return B("new"),B("new-verilog"),B("new-testbench"),B("new-folder"),B("save"),B("search"),B("exit"),B("undo"),B("redo"),B("select-all"),B("find"),B("replace"),B("refresh"),B("copy"),B("cut"),B("paste"),B("rename"),B("delete"),B("duplicate"),B("synthesize"),B("simulate"),B("about"),t=Z(),i=ne(),null!=t&&t||null!=i&&i?t.$readOnly&&(A("save"),A("undo"),A("redo"),A("replace")):(A("save"),A("undo"),A("redo"),A("select-all"),A("find"),A("replace")),(s=pe())?(n=s.type,r=he(s.parent),"buildFolder"===r.type&&(A("copy"),A("cut"),A("duplicate")),"buildFolder"===n&&(A("copy"),A("cut"),A("rename"),A("new"),A("new-verilog"),A("new-testbench"),A("new-folder")),$("#files").jstree(!0).can_paste()&&"buildFolder"!==n||A("paste"),"folder"===n||"root"===n||"buildFolder"===n?A("duplicate"):"module"===n?(A("new"),A("new-verilog"),A("new-testbench"),A("new-folder"),A("copy"),A("cut"),A("paste"),A("rename"),A("delete"),A("duplicate")):(A("paste"),A("new"),A("new-verilog"),A("new-testbench"),A("new-folder"))):(A("new"),A("new-verilog"),A("new-testbench"),A("new-folder"),A("copy"),A("cut"),A("paste"),A("rename"),A("delete"),A("duplicate"),void A("simulate"))},$(".menubar-topmenu").mouseenter(et),Me=$(".menubar-item"),Me.each(function(e,i){var n;return n=$(i),n.click(function(e){var i,r;if(r=n.attr("id"),$(".menubar-topitem").css("display","none"),i=n.hasClass("disabled-menu-item"),!i)switch(r){case"menu-new-verilog":return Ue();case"menu-new-testbench":return Ve();case"menu-new-folder":return Be();case"menu-save":return ct();case"menu-search":return ft();case"menu-exit":return exitWorkspace();case"menu-undo":return At();case"menu-redo":return Ze();case"menu-select-all":return gt();case"menu-find":return Y();case"menu-replace":return rt();case"menu-copy":return y();case"menu-move":return k();case"menu-cut":return k();case"menu-paste":return Xe();case"menu-rename":return it();case"menu-delete":return I();case"menu-duplicate":return F();case"menu-synthesize":return Tt();case"menu-simulate":return St();case"menu-settings":return Mt();case"menu-about":return t()}})}),$("#log-tabs").tabs({active:0}),$("#files").jstree({plugins:["wholerow","types","unique","search"],search:{close_opened_onclear:!1,fuzzy:!0},types:{default:{icon:"/images/tree-icons/Blank.png"},"#":{icon:"/images/tree-icons/Folder.png",valid_children:["root"]},root:{icon:"/images/tree-icons/Folder.png",valid_children:["folder","verilog","exverilog","testbench"]},buildFolder:{icon:"/images/tree-icons/Folder.png",valid_children:["netlist","vcd"]},folder:{icon:"/images/tree-icons/Folder.png",valid_children:["folder","verilog","exverilog","testbench"]},verilog:{icon:"/images/tree-icons/Verilog.png",valid_children:["module"]},exverilog:{icon:"/images/tree-icons/XVerilog.png",valid_children:["module"]},testbench:{icon:"/images/tree-icons/TB.png",valid_children:[]},netlist:{icon:"/images/tree-icons/NTL.png",valid_children:[]},vcd:{icon:"/images/tree-icons/VCD.png",valid_children:[]},module:{icon:"/images/tree-icons/MOD2.png",valid_children:[]}},contextmenu:{items:function(e){return{Create:{label:"Create New",icon:!1,action:function(e){return this.create(e)}}}}},core:{themes:{name:"default-dark",dots:!1},multiple:!1,check_callback:function(e,t,i,n,r){return!0},data:[]}}).on("contextmenu",".jstree-anchor",function(e){var t;if(t=$(e.target).closest("li"),t.length)return v=t.attr("id")}).bind("hover_node.jstree",function(e,t){return Te=t.node.id}).bind("dehover_node.jstree",function(e,t){return Te=null}).bind("dblclick.jstree",function(e){var t,i;if(t=$(e.target).closest("li"),t.length&&(i=t.attr("id"),null!=i&&""!==i.trim()))return Ge()}).bind("paste.jstree",function(){}).bind("copy_node.jstree",function(e,t){return Ye=t.node.id}).bind("move_node.jstree",function(e,t){return Ye=t.node.id}).bind("select_node.jstree",function(e,t){if(!ht)return $("#files").jstree(!0).search(""),ht=!0}).bind("keypress",function(e,t){if(127===e.keyCode)return I(!1)}),wt=function(e){return $("#files").jstree(!0).settings.core.data=e,$("#files").jstree(!0).refresh()},Je=function(e){return window.prompt("Copy to clipboard: Ctrl/Command + C, Enter",e)},$("#console").contextmenu({menu:[{title:"Clear",cmd:"clear"},{title:"Copy",cmd:"copy"}],close:function(e){},beforeOpen:function(e,t){var i;return i=$(t.target),i.is("li")&&i.hasClass("ui-widget-content")?$("#console").contextmenu("enableEntry","copy",!0):$("#console").contextmenu("enableEntry","copy",!1)},select:function(e,t){var i;return"clear"===t.cmd?f():"copy"===t.cmd?(i=$(t.target),Je(i.html())):void 0}}),$("#errors").contextmenu({menu:[{title:"Clear",cmd:"clear"},{title:"Copy",cmd:"copy"}],close:function(e){},beforeOpen:function(e,t){var i;return i=$(t.target),i.is("li")&&i.hasClass("ui-widget-content")?$("#errors").contextmenu("enableEntry","copy",!0):$("#errors").contextmenu("enableEntry","copy",!1)},select:function(e,t){var i;return"clear"===t.cmd?u():"copy"===t.cmd?(i=$(t.target),Je(i.html())):void 0}}),$("#warnings").contextmenu({menu:[{title:"Clear",cmd:"clear"},{title:"Copy",cmd:"copy"}],close:function(e){},beforeOpen:function(e,t){var i;return i=$(t.target),i.is("li")&&i.hasClass("ui-widget-content")?$("#warnings").contextmenu("enableEntry","copy",!0):$("#warnings").contextmenu("enableEntry","copy",!1)},select:function(e,t){var i;return"clear"===t.cmd?g():"copy"===t.cmd?(i=$(t.target),Je(i.html())):void 0}}),a=function(){return $("#files").contextmenu({delegate:".tree-item",menu:[{title:"Set As Top Module",cmd:"settop"},{title:"New",cmd:"new",children:[{title:"Verilog Module",cmd:"newverilog"},{title:"Verilog Testbench",cmd:"newtestbench"}]},{title:"New Folder",cmd:"newfolder"},{title:"Open",cmd:"open"},{title:"----",cmd:"first-seperator"},{title:"Copy",cmd:"copy"},{title:"Cut",cmd:"cut"},{title:"Paste",cmd:"paste"},{title:"Rename",cmd:"rename"},{title:"Delete",cmd:"delete"},{title:"----",cmd:"second-seperator"},{title:"Duplicate",cmd:"duplicate"},{title:"----",cmd:"third-seperator"},{title:"Exclude from Build",cmd:"exclude"},{title:"Include in Build",cmd:"include"},{title:"Close",cmd:"close"}],beforeOpen:function(e,t){var i,n,r;return i=$("#files").jstree(!0).get_node(v),n=i.type,$("#files").contextmenu("showEntry","settop",!0),$("#files").contextmenu("showEntry","new",!0),$("#files").contextmenu("showEntry","newfolder",!0),$("#files").contextmenu("showEntry","open",!0),$("#files").contextmenu("showEntry","first-seperator",!0),$("#files").contextmenu("showEntry","copy",!0),$("#files").contextmenu("showEntry","cut",!0),$("#files").contextmenu("showEntry","paste",!0),$("#files").contextmenu("showEntry","rename",!0),$("#files").contextmenu("showEntry","delete",!0),$("#files").contextmenu("showEntry","second-seperator",!0),$("#files").contextmenu("showEntry","duplicate",!0),$("#files").contextmenu("showEntry","third-seperator",!0),$("#files").contextmenu("showEntry","exclude",!0),$("#files").contextmenu("showEntry","include",!0),$("#files").contextmenu("showEntry","close",!0),$("#files").contextmenu("enableEntry","copy",!0),$("#files").contextmenu("enableEntry","cut",!0),$("#files").contextmenu("enableEntry","paste",!0),$("#files").contextmenu("enableEntry","duplicate",!0),$("#files").contextmenu("enableEntry","new",!0),$("#files").contextmenu("enableEntry","newfolder",!0),r=he(i.parent),"buildFolder"===r.type&&($("#files").contextmenu("enableEntry","copy",!1),$("#files").contextmenu("enableEntry","cut",!1),$("#files").contextmenu("enableEntry","duplicate",!1)),"buildFolder"===n&&($("#files").contextmenu("showEntry","copy",!1),$("#files").contextmenu("showEntry","cut",!1),$("#files").contextmenu("showEntry","rename",!1),$("#files").contextmenu("showEntry","delete",!1),$("#files").contextmenu("enableEntry","new",!1),$("#files").contextmenu("enableEntry","newfolder",!1)),$("#files").jstree(!0).can_paste()&&"buildFolder"!==n||$("#files").contextmenu("enableEntry","paste",!1),"verilog"!==n&&$("#files").contextmenu("showEntry","exclude",!1),"exverilog"!==n&&$("#files").contextmenu("showEntry","include",!1),"folder"===n||"root"===n||"buildFolder"===n?($("#files").contextmenu("showEntry","settop",!1),$("#files").contextmenu("showEntry","open",!1),$("#files").contextmenu("showEntry","second-seperator",!1),$("#files").contextmenu("showEntry","duplicate",!1),$("#files").contextmenu("showEntry","third-seperator",!1),$("#files").contextmenu("showEntry","close",!1)):"module"===n?($("#files").contextmenu("showEntry","new",!1),$("#files").contextmenu("showEntry","newfolder",!1),$("#files").contextmenu("showEntry","open",!1),$("#files").contextmenu("showEntry","first-seperator",!1),$("#files").contextmenu("showEntry","copy",!1),$("#files").contextmenu("showEntry","cut",!1),$("#files").contextmenu("showEntry","paste",!1),$("#files").contextmenu("showEntry","rename",!1),$("#files").contextmenu("showEntry","delete",!1),$("#files").contextmenu("showEntry","second-seperator",!1),$("#files").contextmenu("showEntry","duplicate",!1),$("#files").contextmenu("showEntry","third-seperator",!1),$("#files").contextmenu("showEntry","close",!1)):($("#files").contextmenu("showEntry","paste",!1),$("#files").contextmenu("showEntry","settop",!1),$("#files").contextmenu("showEntry","new",!1),$("#files").contextmenu("showEntry","newfolder",!1))},close:function(e){},select:function(e,t){var i;if(i=$("#files").jstree("get_selected"),null!=v)switch(t.cmd){case"newverilog":return Ue(!0);case"newtestbench":return Ve(!0);case"newfolder":return Be(!0);case"open":return Ge(!0);case"copy":return y(!0);case"cut":return k(!0);case"paste":return Xe(!0);case"rename":return it(!0);case"delete":return I(!0);case"duplicate":return F(!0);case"exclude":return U(!0);case"include":return $e(!0);case"close":return _(!0);case"settop":return bt(!0)}}})},R=$("#editor-tabs").tabs({active:0,heightStyle:"fill",activate:function(e,t){var i,n;if(n=$("#"+te()).data("fileId"),n&&_t(n),i=Z())return i.focus()}}),R.find(".ui-tabs-nav").sortable({axis:"x",distance:5,stop:function(){return R.tabs("refresh")}}),$("#editor-tabs").tabs().delegate("span.ui-icon-close.ui-icon-close-tab","click",function(){var e;if(e=$(this).closest("li").attr("aria-controls"),null!=e&&""!==e.trim())return p(e)}),$("#editor-tabs").tabs().keypress(function(e){}),$t=0,It="<li><a class=\"editor-tab-link\" href='#{href}'>#{title}</a> <span class='ui-icon ui-icon-close ui-icon-close-tab' role='presentation'>Remove Tab</span></li>",r=function(e,t){
var i,n;return i="tabs-"+t,ye(i)?mt(i):(n=$(It.replace(/#\{href\}/g,"#"+i).replace(/#\{title\}/g,e)),n.on("mouseup",function(e){return 2!==e.which||(p(i),!1)}),$("#editor-tabs").tabs().find(".ui-tabs-nav").append(n),$("#editor-tabs").tabs().append('<div id="'+i+'" class="editor-tab-content"></div>'),$("#editor-tabs").tabs().tabs("refresh"),mt(i)),i},xt=function(e,t){var i;return i=$('[href="#'+e+'"].editor-tab-link.ui-tabs-anchor'),!!i.length&&(i.text(t),!0)},l=function(e,t,i){var n,r,s,a,o;return null==i&&(i=""),a=$("#"+e),s="editor-"+t.id+"-"+e,a.append('<div class="editor" id="'+s+'"></div>'),r=ace.edit(s),1===C?r.setTheme("ace/theme/crimson_editor"):r.setTheme("ace/theme/twilight"),r.setFontSize(S),r.setValue(i),"verilog"===(o=t.type)||"exverilog"===o||"testbench"===o?(r.setOptions({enableSnippets:!0,enableLiveAutocompletion:!0,enableBasicAutocompletion:!0,showPrintMargin:!1},n=Infinity),r.getSession().setMode("ace/mode/verilog")):"netlist"===t.type?(r.setOptions({enableSnippets:!1,enableLiveAutocompletion:!1,enableBasicAutocompletion:!1,showPrintMargin:!1,readOnly:!0},n=Infinity),r.getSession().setMode("ace/mode/verilog")):r.setOptions({enableSnippets:!1,enableLiveAutocompletion:!1,enableBasicAutocompletion:!1,showPrintMargin:!1},n=Infinity),r.on("blur",function(e){return Se(r)}),r.on("focus",function(e){return r.reselect?(null!=t&&null!=t.id&&_t(t.id),r.reselect=!1):(r.reselect=!0,r.focus())}),r.on("change",function(t){if(a.data("saved"))return a.data("saved",!1),xt(e,a.data("title")+" *")}),r.commands.addCommand({name:"saveOpenTab",bindKey:{win:"Ctrl-S",mac:"Command-S"},exec:function(e){if(!e.$readOnly)return ct()},readOnly:!0}),xt(e,t.text),r.tab=a,a.data("title",t.text),a.data("fileId",t.id),a.data("editor",r),a.data("saved",!0),r.reselect=!0,window.editor=r,r},d=function(e,t,i){var n,r,s,a;return a=$("#"+e),s="waveform-"+t.id,r=$('<div class="waveform" id="'+s+'"></div>'),a.append(r),console.log("-------------------"),console.log(i),console.log(s),n=new Waveform(s,i),n.setOnChangeListener(function(e){}),n.setOnSaveListener(function(e){}),n.tab=a,xt(e,t.text),a.data("title",t.text),a.data("fileId",t.id),a.data("waveform",n),a.data("saved",!0),n},x=function(e,t){var i,n,s;return null==t&&(t=""),n="tabs-"+e.id,ye(n)?mt(n):(s=r(e.text,e.id),i=l(s,e,t),i.clearSelection(),i.gotoLine(0),i.focus(),i)},j=function(e,t){var i,n,s;return i="tabs-"+e.id,ye(i)?mt(i):(n=r(e.text,e.id),s=d(n,e,t))},pt=function(e){return $("#editor-tabs").tabs({active:e})},mt=function(e){var t;return t=$('#editor-tabs a[href="#'+e+'"]').parent().index()-1,pt(t)},oe=function(){return $("#editor-tabs >ul >li").size()},n=function(){return oe()>0},ie=function(){return n()?$("#editor-tabs").tabs("option","active"):null},te=function(){return $("#editor-tabs .ui-tabs-panel:visible").attr("id")},Z=function(){var e,t;return t=te(),null==t?null:(e=$("#"+t).data("editor"),null!=e&&e)},ne=function(){var e,t;return e=te(),null==e?null:(t=$("#"+e).data("waveform"),null!=t&&t)},ye=function(e){var t;return t=$("#"+e),!!t.length&&t},re=function(){var e,t;return t=[],e=$(".editor-tab-content"),e.each(function(e,i){return t.push($(i).attr("id"))}),t},lt=function(e,t){var i,n,r,s;return"function"==typeof e&&(t=e,e=!0),s=re(),r=[],s.forEach(function(e){var t;if(t=$("#"+e).data("saved"),null!=t&&!t)return r.push(e)}),0===r.length?t(null,!1):(n="Save Open Tabs",i="<p>Do you want to save open tabs?</p>",m(n,i,function(e){var i;return e?(i=0,r.forEach(function(e,n){var s,a,o,l,d;if(l=$("#"+e),a=l.data("fileId"),s=l.data("editor"),d=l.data("waveform"),o=void 0,s)o=s.getValue();else{if(!d)return i++,console.warn("Cannot find the editor.");o=d.exportTimingDiagram()}return dt(a,o,function(s,a,o,d,c,h){var u,f,g,_;if(!s){if(i++,"verilog"===d||"exverilog"===d)for(T(a),u=0,f=h.length;u<f;u++)g=h[u],_=g+"_"+o+"_"+g+"_"+(new Date).valueOf()+"_"+(""+Math.random()).split(".")[1],w(_,a,g,"module");l.data("saved",!0),xt(e,o)}return i===r.length?t(null,!1):n===r.length-1?t({error:"Could not save all open tabs."},!1):void 0})})):t(null,!0)}),null)},Se=function(e){if(null!=e&&null!=e.completer&&e.completer.getPopup())return e.completer.getPopup().hide()},J=function(e,t){var i,n,r;if(r=$("#"+e),r.length&&(i=$('.editor-tab-link[href="#'+e+'"]').parent(),n=i.remove().attr("aria-controls"),$("#"+n).remove(),$("#editor-tabs").tabs().tabs("refresh"),"function"==typeof t))return t()},p=function(e,t){var i,n,r,s,a,o,l;return o=$("#"+e),s=o.data("editor"),l=o.data("waveform"),i=function(){var i,n;if(i=$('.editor-tab-link[href="#'+e+'"]').parent(),n=i.remove().attr("aria-controls"),$("#"+n).remove(),$("#editor-tabs").tabs().tabs("refresh"),"function"==typeof t)return t()},Se(s),null==s||o.data("saved")?l&&!o.data("saved")?(a=o.data("title"),r="Save "+a,n='<p>Do you want to save the timing diagram "'+a+'" before closing?</p>',Qe(r,n,function(t,n){var r,s;if(!n)return t?(r=o.data("fileId"),s=l.exportTimingDiagram(),dt(r,s,function(t,n,r,s,a,l){return t?D(t):(o.data("saved",!0),xt(e,r),i())})):i()})):i():(a=o.data("title"),r="Save "+a,n='<p>Do you want to save "'+a+'" before closing?</p>',Qe(r,n,function(t,n){var r,a;if(!n)return t?(r=o.data("fileId"),a=s.getValue(),dt(r,a,function(t,n,r,s,a,l){var d,c,h,u;if(t)return D(t);if("verilog"===s||"exverilog"===s)for(T(n),d=0,c=l.length;d<c;d++)h=l[d],u=h+"_"+r+"_"+h+"_"+(new Date).valueOf()+"_"+(""+Math.random()).split(".")[1],w(u,n,h,"module");return o.data("saved",!0),xt(e,r),i()})):i()})),e},ee=function(){var e;return e=getActiveTabIndex()},$("#btn-new-tab").button({text:!1,icons:{primary:"ui-icon-plusthick"}}).click(function(e){return $("#btn-new-tab").contextmenu("open",$("#btn-new-tab"))}),$("#btn-new-tab").contextmenu({autoTrigger:!1,menu:[{title:"Verilog Module",cmd:"newverilog"},{title:"Verilog Testbench",cmd:"newtestbench"}],close:function(e){},beforeOpen:function(e,t){var i;return i=be(),"buildFolder"===i.type?($("#btn-new-tab").contextmenu("enableEntry","newverilog",!1),$("#btn-new-tab").contextmenu("enableEntry","newtestbench",!1)):($("#btn-new-tab").contextmenu("enableEntry","newverilog",!0),$("#btn-new-tab").contextmenu("enableEntry","newtestbench",!0))},select:function(e,t){switch(t.cmd){case"newverilog":return Ue();case"newtestbench":return Ve()}}}),_e=function(e,t){return null==e&&(e=""),"function"==typeof e&&(t=e,e=""),e=e.trim(),"verilog"===e?t(null,X.filter(function(e){return"verilog"===e.type}),c):"netlist"===e?t(null,X.filter(function(e){return"netlist"===e.type}),c):t(null,X,c)},ge=function(e){var t;return t={theme:0,fontSize:15},e(null,t)},je=function(e){return _e("verilog",e)},ce=function(e){return _e("netlist",e)},ve=function(t){return st(e.stdcell,"GET",{},function(e){var i,n,r,s,a;for(n=[],a=e.stdcell,r=0,s=a.length;r<s;r++)i=a[r],n.push({id:i,text:i});return t(null,n)},function(e){return t(e,[])}),null},at=function(e){return function(e){var t;return t=Et.width()+ze.width()+50,window.innerWidth<t?Et.hide():Et.show()}}(this),tt=function(e){return null==e&&(e=!1),Oe(),_e(function(e,t,i){return Ne(),e?D(e.error):wt(t)})},(jt=function(){var e,t;return ge(function(e,t){return e?D(e):(C=t.theme,S=t.fontSize)}),c=Q("buildFolder"),e=Q("root"),t=Q("folder"),s(e,"#","CloudV","root"),s(c,e,"build (read-only)","buildFolder"),s(t,e,"src","folder"),tt(),a(),Ke(e),$(window).resize(at),at(),$(document).unbind("keydown").bind("keydown",function(e){var t,i,n,r;if(t=!1,8===e.keyCode&&(i=e.srcElement||e.target,n=i.tagName.toLowerCase(),r=eltype.toLowerCase(),t=("input"===n&&("text"===r||"password"===r||"file"===r||"search"===r||"email"===r||"number"===r||"date"===r)||"textarea"===n)&&(i.readOnly||i.disabled)),t)return e.preventDefault()}),$(".ui-tabs").click(function(e){var t;if(!$(e.target).is("a")&&(t=Z()))return t.reselect=!0,t.focus()})})()}();
//# sourceMappingURL=data:application/json;base64,
