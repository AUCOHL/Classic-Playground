{"version":3,"sources":["parser.coffee"],"names":[],"mappings":"AAEA,IAAA;;AAAA,kBAAA,GAAqB,SAAC,OAAD,EAAU,MAAV,EAAkB,EAAlB;SACpB,EAAA,CAAG,IAAH,EAAS,YAAA,CAAa,OAAb,EAAsB,MAAtB,CAAT;AADoB;;AAIrB,YAAA,GAAe,SAAC,OAAD,EAAU,MAAV;AACd,MAAA;EAAA,aAAA,GAAgB,SAAA;WAAO,IAAA,MAAA,CAAO,WAAP,EAAoB,IAApB;EAAP;EAChB,kBAAA,GAAqB,SAAA;WAAO,IAAA,MAAA,CAAO,4BAAP,EAAqC,IAArC;EAAP;EACrB,WAAA,GAAc,SAAA;WAAO,IAAA,MAAA,CAAO,4GAAP,EAAqH,IAArH;EAAP;EAEd,OAAA,GAAU,OAAO,CAAC,OAAR,CAAgB,aAAA,CAAA,CAAhB,EAAiC,EAAjC,CAAoC,CAAC,OAArC,CAA6C,kBAAA,CAAA,CAA7C,EAAmE,EAAnE;EACV,eAAA,GAAkB,WAAA,CAAA;EAClB,aAAA,GAAgB,eAAe,CAAC,IAAhB,CAAqB,OAArB;AAChB,SAAM,aAAA,KAAmB,IAAzB;IACC,UAAA,GAAa,aAAc,CAAA,CAAA;IAC3B,IAAG,UAAA,KAAc,MAAjB;AACC,aAAO,KADR;;IAEA,aAAA,GAAgB,eAAe,CAAC,IAAhB,CAAqB,OAArB;EAJjB;SAKA;AAbc;;AAef,cAAA,GAAiB,SAAC,OAAD;AAChB,MAAA;EAAA,aAAA,GAAgB,SAAA;WAAO,IAAA,MAAA,CAAO,WAAP,EAAoB,IAApB;EAAP;EAChB,kBAAA,GAAqB,SAAA;WAAO,IAAA,MAAA,CAAO,4BAAP,EAAqC,IAArC;EAAP;EACrB,WAAA,GAAc,SAAA;WAAO,IAAA,MAAA,CAAO,wFAAP,EAAiG,IAAjG;EAAP;EAGd,OAAA,GAAU,OAAO,CAAC,OAAR,CAAgB,aAAA,CAAA,CAAhB,EAAiC,EAAjC,CAAoC,CAAC,OAArC,CAA6C,kBAAA,CAAA,CAA7C,EAAmE,EAAnE;EACV,eAAA,GAAkB,WAAA,CAAA;EAClB,aAAA,GAAgB,eAAe,CAAC,IAAhB,CAAqB,OAArB;EAChB,WAAA,GAAc;AACd,SAAM,aAAA,KAAmB,IAAzB;IACC,IAAG,wBAAH;MACC,WAAW,CAAC,IAAZ,CAAiB,aAAc,CAAA,CAAA,CAA/B,EADD;;IAEA,aAAA,GAAgB,eAAe,CAAC,IAAhB,CAAqB,OAArB;EAHjB;SAIA;AAdgB;;AAgBjB,MAAM,CAAC,OAAP,GACC;EAAA,YAAA,EAAc,YAAd;EACA,kBAAA,EAAoB,kBADpB;EAEA,cAAA,EAAgB,cAFhB","file":"parser.js","sourceRoot":"/source/","sourcesContent":["\n\nmoduleExistsInFile = (content, module, cb) ->\n\tcb null, moduleExists(content, module)\n\n\nmoduleExists = (content, module) ->\n\tcommentsRegEx = -> new RegExp '\\\\/\\\\/.*$', 'gm'\n\tmultiCommentsRegEx = -> new RegExp '\\\\/\\\\*(.|[\\\\r\\\\n])*?\\\\*\\\\/', 'gm'\n\tmoduleRegEx = -> new RegExp '^\\\\s*module\\\\s+(.+?)\\\\s*(#\\\\s*\\\\(([\\\\s\\\\S]+?)\\\\)\\\\s*)??\\\\s*((\\\\([\\\\s\\\\S]*?\\\\))?\\\\s*;)([\\\\s\\\\S]*?)endmodule', 'gm'\n\n\tcontent = content.replace(commentsRegEx(), '').replace(multiCommentsRegEx(), '')\n\textractionRegEx = moduleRegEx()\n\tmoduleMatches = extractionRegEx.exec(content)\n\twhile moduleMatches isnt null\n\t\tmoduleName = moduleMatches[1]\n\t\tif moduleName is module\n\t\t\treturn yes\n\t\tmoduleMatches = extractionRegEx.exec(content)\n\tno\n\nextractModules = (content) ->\n\tcommentsRegEx = -> new RegExp '\\\\/\\\\/.*$', 'gm'\n\tmultiCommentsRegEx = -> new RegExp '\\\\/\\\\*(.|[\\\\r\\\\n])*?\\\\*\\\\/', 'gm'\n\tmoduleRegEx = -> new RegExp '^\\\\s*module\\\\s+(.+?)\\\\s*(#\\\\s*\\\\(([\\\\s\\\\S]+?)\\\\)\\\\s*)??\\\\s*((\\\\([\\\\s\\\\S]*?\\\\))?\\\\s*;)$', 'gm'\n\n\n\tcontent = content.replace(commentsRegEx(), '').replace(multiCommentsRegEx(), '')\n\textractionRegEx = moduleRegEx()\n\tmoduleMatches = extractionRegEx.exec(content)\n\tmoduleNames = []\n\twhile moduleMatches isnt null\n\t\tif moduleMatches[1]?\n\t\t\tmoduleNames.push moduleMatches[1]\n\t\tmoduleMatches = extractionRegEx.exec(content)\n\tmoduleNames\n\nmodule.exports =\n\tmoduleExists: moduleExists\n\tmoduleExistsInFile: moduleExistsInFile\n\textractModules: extractModules\n"]}