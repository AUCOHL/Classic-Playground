{"version":3,"sources":["simulator.coffee"],"names":[],"mappings":"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","file":"simulator.js","sourceRoot":"/source/","sourcesContent":["fs = require 'fs'\npath = require 'path'\nexec = require('child_process').exec\nexecFile = require('child_process').execFile\nshortid = require 'shortid'\nrmdir = require 'rimraf'\n\nParser = require './parser'\n\n\ngenerateWave = (vcdContent, cb) ->\n\tdirName = shortid.generate() + '_' + Date.now()\n\tvcdName = shortid.generate() + '_' + Date.now()\n\tfullPath = path.join process.cwd(), \"temp/#{dirName}\"\n\tsourcePath = path.join fullPath, vcdName\n\tscriptPath = path.join process.cwd(), \"modules\"\n\n\tfs.mkdir fullPath, 0o0666, (err) ->\n\t\tif err\n\t\t\tconsole.error err\n\t\t\treturn cb error: 'Failed to get process VCD file.'\n\t\telse\n\t\t\tfs.writeFile sourcePath, vcdContent, (err) ->\n\t\t\t\tif err\n\t\t\t\t\tconsole.error err\n\t\t\t\t\treturn cb error: 'Failed to get process VCD file.'\n\t\t\t\t\trmdir sourcePath, (err) -> console.error err if err\n\t\t\t\telse\n\t\t\t\t\tcmd = \"perl vcd2js.pl #{sourcePath}\"\n\t\t\t\t\texec cmd,\n\t\t\t\t\t\tcwd: scriptPath\n\t\t\t\t\t\tmaxBuffer: 50000 * 1024\n\t\t\t\t\t\ttimeout: 3000,\n\t\t\t\t\t\t(err, stdout, stderr) ->\n\t\t\t\t\t\t\trmdir sourcePath, (err) -> console.error err if err\n\t\t\t\t\t\t\tif err\n\t\t\t\t\t\t\t\tconsole.error err\n\t\t\t\t\t\t\t\treturn cb error: \"Failed to generate wave form.\"\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\ttry\n\t\t\t\t\t\t\t\t\tstdout = stdout.replace /,\\s*\\]/gm, ']'\n\t\t\t\t\t\t\t\t\tstdout = stdout.replace /,\\s*\\}/gm, '}'\n\t\t\t\t\t\t\t\t\tstdout = stdout.replace /\\\\/gm, '\\\\\\\\'\n\t\t\t\t\t\t\t\t\twaveJSON = JSON.parse stdout\n\t\t\t\t\t\t\t\t\tcb null, waveJSON\n\t\t\t\t\t\t\t\tcatch e\n\t\t\t\t\t\t\t\t\tconsole.error e\n\t\t\t\t\t\t\t\t\tcb error: \"Failed to parse the generated wave.\"\n\n\n\n\n\nsimulate = (filesPath, filesArray, fullPath, nameMap, dumpName, cb) ->\n\terrorParsingRegEx = -> new RegExp('(.+)\\\\s*\\\\:\\\\s*(\\\\d+)\\\\s*\\\\:\\\\s*(.+)', 'gm')\n\tinnerErrorRegEx = -> new RegExp('\\\\s*(\\\\w+)\\\\s*\\\\:\\\\s*(.+)', 'igm')\n\n\tvvpName = \"#{Date.now()}.vvp\"\n\tfs.exists fullPath, (exists) ->\n\t\tif not exists\n\t\t\tcb error: 'Verilog file does not exists.'\n\t\telse\n\t\t\tif filesArray.length is 0\n\t\t\t\treturn cb error: \"No files detected for simulation.\"\n\n\n\t\t\tfs.readFile fullPath, 'UTF-8', (err, content) ->\n\t\t\t\tif err\n\t\t\t\t\tconsole.error err\n\t\t\t\t\tcb error: 'Failed to read testbench file.'\n\t\t\t\telse\n\t\t\t\t\ttbModules = Parser.extractModules content\n\t\t\t\t\tif tbModules.length is 0\n\t\t\t\t\t\treturn cb error: 'Cannot extract top module.'\n\t\t\t\t\tif tbModules.length > 1\n\t\t\t\t\t\treturn cb error: 'Only one top module per testbench is supported.'\n\t\t\t\t\ttopModule = tbModules[0]\n\n\t\t\t\t\tnames = filesArray[0].replace /\\\\/gm, '\\\\\\\\'\n\n\t\t\t\t\tfor i in [1...filesArray.length]\n\t\t\t\t\t\tnames = \"#{names} #{filesArray[i].replace /\\\\/gm, '\\\\\\\\'}\"\n\n\t\t\t\t\tcmd = \"iverilog #{names} -s #{topModule} -Wall -o #{vvpName}\"\n\t\t\t\t\tconsole.log cmd\n\n\t\t\t\t\tsimulatorProc = exec cmd,\n\t\t\t\t\t\tcwd: filesPath\n\t\t\t\t\t\tmaxBuffer: 5000 * 1024\n\t\t\t\t\t\ttimeout: 10000,\n\t\t\t\t\t\t(err, stdout, stderr) ->\n\t\t\t\t\t\t\tif err\n\t\t\t\t\t\t\t\tif not stderr\n\t\t\t\t\t\t\t\t\tconsole.error err\n\t\t\t\t\t\t\t\t\treturn cb error: \"An error occurred while building.\"\n\t\t\t\t\t\t\tif stdout\n\t\t\t\t\t\t\t\tif process.env.NODE_ENV is 'development'\n\t\t\t\t\t\t\t\t\tconsole.log 'stdout:'\n\t\t\t\t\t\t\t\t\tconsole.log stdout\n\t\t\t\t\t\t\t\t\tconsole.log '----end of stdout-----'\n\n\t\t\t\t\t\t\tsynthErrors = []\n\t\t\t\t\t\t\tsynthWarnings = []\n\n\t\t\t\t\t\t\tif stderr\n\t\t\t\t\t\t\t\terrorLines = stderr.trim().split '\\n'\n\t\t\t\t\t\t\t\tfor line in errorLines\n\t\t\t\t\t\t\t\t\tcontinue if line.trim() is '' or /^i give up\\.$/i.test(line.trim())\n\t\t\t\t\t\t\t\t\tlogEntry =\n\t\t\t\t\t\t\t\t\t\tmessage: line.trim()\n\t\t\t\t\t\t\t\t\textractionRegEx = errorParsingRegEx()\n\t\t\t\t\t\t\t\t\terrorMatches = extractionRegEx.exec line\n\t\t\t\t\t\t\t\t\tlogEntry.file = null\n\t\t\t\t\t\t\t\t\tlogEntry.line = 0\n\t\t\t\t\t\t\t\t\tif errorMatches isnt null\n\t\t\t\t\t\t\t\t\t\tfile = errorMatches[1]\n\t\t\t\t\t\t\t\t\t\tline = errorMatches[2]\n\t\t\t\t\t\t\t\t\t\tlineErr = errorMatches[3]\n\t\t\t\t\t\t\t\t\t\tif innerErrorRegEx().test lineErr\n\t\t\t\t\t\t\t\t\t\t\ttypeMatches = innerErrorRegEx().exec lineErr\n\t\t\t\t\t\t\t\t\t\t\ttype = typeMatches[1].toLowerCase()\n\t\t\t\t\t\t\t\t\t\t\tlineErr = innerErrorRegEx().exec(lineErr)[2]\n\t\t\t\t\t\t\t\t\t\tlineErr = lineErr.charAt(0).toUpperCase() + lineErr.slice(1);\n\n\t\t\t\t\t\t\t\t\t\tif nameMap[file]?\n\t\t\t\t\t\t\t\t\t\t\tlogEntry.file = nameMap[file].sourceId\n\t\t\t\t\t\t\t\t\t\t\tlogEntry.line = Number.parseInt line\n\t\t\t\t\t\t\t\t\t\t\tif not /error/i.test(type) and not /[\\s\\S]+\\s*\\:\\s*syntax error/i.test(logEntry.message)\n\t\t\t\t\t\t\t\t\t\t\t\tsynthWarnings.push logEntry\n\t\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t\t\tsynthErrors.push logEntry\n\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t\tsynthErrors.push logEntry\n\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\tsynthErrors.push logEntry\n\t\t\t\t\t\t\t\tsynthErrors.push 'Fatal error has occurred during simulation.' if err and not synthErrors.length\n\t\t\t\t\t\t\t\treturn cb null, synthErrors, synthWarnings, [] if synthErrors.length > 0\n\t\t\t\t\t\t\tvvpProc = execFile 'vvp',\n\t\t\t\t\t\t\t\t[vvpName],\n\t\t\t\t\t\t\t\tcwd: filesPath\n\t\t\t\t\t\t\t\tmaxBuffer: 5000 * 1024\n\t\t\t\t\t\t\t\ttimeout: 10000,\n\t\t\t\t\t\t\t\t(err, stdout, stderr) ->\n\t\t\t\t\t\t\t\t\tif err\n\t\t\t\t\t\t\t\t\t\tif not stderr\n\t\t\t\t\t\t\t\t\t\t\tconsole.error err\n\t\t\t\t\t\t\t\t\t\t\treturn cb error: \"An error occurred while simulating.\"\n\t\t\t\t\t\t\t\t\tif stdout\n\t\t\t\t\t\t\t\t\t\tif process.env.NODE_ENV is 'development'\n\t\t\t\t\t\t\t\t\t\t\tconsole.log 'stdout:'\n\t\t\t\t\t\t\t\t\t\t\tconsole.log stdout\n\t\t\t\t\t\t\t\t\t\t\tconsole.log '----end of stdout-----'\n\n\t\t\t\t\t\t\t\t\tsimErrors = []\n\t\t\t\t\t\t\t\t\tsimWarnings = []\n\n\t\t\t\t\t\t\t\t\tif stderr\n\t\t\t\t\t\t\t\t\t\terrorLines = stderr.trim().split '\\n'\n\t\t\t\t\t\t\t\t\t\tfor line in errorLines\n\t\t\t\t\t\t\t\t\t\t\tcontinue if line.trim() is '' or /^i give up\\.$/i.test(line.trim())\n\t\t\t\t\t\t\t\t\t\t\tlogEntry =\n\t\t\t\t\t\t\t\t\t\t\t\tmessage: line.trim()\n\t\t\t\t\t\t\t\t\t\t\textractionRegEx = errorParsingRegEx()\n\t\t\t\t\t\t\t\t\t\t\terrorMatches = extractionRegEx.exec line\n\t\t\t\t\t\t\t\t\t\t\tlogEntry.file = null\n\t\t\t\t\t\t\t\t\t\t\tlogEntry.line = 0\n\t\t\t\t\t\t\t\t\t\t\tif errorMatches isnt null\n\t\t\t\t\t\t\t\t\t\t\t\tfile = errorMatches[1]\n\t\t\t\t\t\t\t\t\t\t\t\tline = errorMatches[2]\n\t\t\t\t\t\t\t\t\t\t\t\tlineErr = errorMatches[3]\n\t\t\t\t\t\t\t\t\t\t\t\tif innerErrorRegEx().test lineErr\n\t\t\t\t\t\t\t\t\t\t\t\t\ttypeMatches = innerErrorRegEx().exec lineErr\n\t\t\t\t\t\t\t\t\t\t\t\t\ttype = typeMatches[1].toLowerCase()\n\t\t\t\t\t\t\t\t\t\t\t\t\tlineErr = innerErrorRegEx().exec(lineErr)[2]\n\t\t\t\t\t\t\t\t\t\t\t\tlineErr = lineErr.charAt(0).toUpperCase() + lineErr.slice(1);\n\t\t\t\t\t\t\t\t\t\t\t\tlogEntry.file = nameMap[file].sourceId\n\t\t\t\t\t\t\t\t\t\t\t\tlogEntry.line = Number.parseInt line\n\t\t\t\t\t\t\t\t\t\t\t\tif not /error/i.test(type) and not /[\\s\\S]+\\s*\\:\\s*syntax error/i.test(logEntry.message)\n\t\t\t\t\t\t\t\t\t\t\t\t\tsimWarnings.push logEntry\n\t\t\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t\t\t\tsimErrors.push logEntry\n\t\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t\t\tsimErrors.push logEntry\n\t\t\t\t\t\t\t\t\t\treturn cb null, synthErrors.concat(simErrors), synthWarnings.concat(simWarnings), []  if simErrors.length > 0\n\t\t\t\t\t\t\t\t\tvcdPath = path.join filesPath, dumpName\n\t\t\t\t\t\t\t\t\tfs.readFile vcdPath, 'UTF-8', (err, content) ->\n\t\t\t\t\t\t\t\t\t\tif err\n\t\t\t\t\t\t\t\t\t\t\tconsole.error err\n\t\t\t\t\t\t\t\t\t\t\tcb error: 'Failed to read synthesized file.'\n\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t\tcb null, synthErrors.concat(simErrors), synthWarnings.concat(simWarnings), stdout.split('\\n').filter((line) -> line.trim() isnt ''), content\n\nmodule.exports =\n\tgenerateWave: generateWave\n\tsimulate: simulate\n"]}